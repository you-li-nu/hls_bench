
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  tseng/tseng.hc tseng/tseng.pat tseng/tseng.mon
#   tseng/add_8.sif tseng/divide_8.sif tseng/multiply_8.sif
#   tseng/smultiply_8.sif tseng/subtract_8.sif tseng/tmultiply_8.sif
#   tseng/tseng.sif tseng/tseng.out.gold
# Wrapped by synthesis@sirius on Thu Jul 26 17:18:50 1990
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'tseng/tseng.hc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/tseng.hc'\"
else
echo shar: Extracting \"'tseng/tseng.hc'\" \(2401 characters\)
sed "s/^X//" >'tseng/tseng.hc' <<'END_OF_FILE'
X/*
X	TSENG:
X
X		This benchmark is taken from:
X
X		C-J. Tseng, D. P. Siewiorek, ``Automated Synthesis of Data
X	Paths in Digital Systems'', IEEE Trans CAD vol CAD-5, no.3  
X	[ Table I on Page 107 ].
X
X	A suggested use of this particular benchmark is in expolring
Xsequencing semantics available in Hercules (serial, serial-parallel and
Xforced parallel) and their effect on various resources needed for resulting
Xhardware.
X
X*/
X
X
X#include "../templates/library.hc"
X#define SIZE	8
X
Xprocess tseng (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, reset, ready)
X
X	inout port v1[SIZE];
X	inout port v2[SIZE];
X	inout port v3[SIZE];
X	inout port v4[SIZE];
X	inout port v5[SIZE];
X	inout port v6[SIZE];
X	inout port v7[SIZE];
X	inout port v8[SIZE];
X	inout port v9[SIZE];
X	inout port v10[SIZE];
X	inout port v11[SIZE];
X	inout port v12[SIZE];
X	inout port v13[SIZE];
X	inout port v14[SIZE];
X	inout port v15[SIZE];
X	in port reset;
X	inout port ready;
X[
X	boolean v1i[SIZE];
X	boolean v2i[SIZE];
X	boolean v3i[SIZE];
X	boolean v4i[SIZE];
X	boolean v5i[SIZE];
X	boolean v6i[SIZE];
X	boolean v7i[SIZE];
X	boolean v8i[SIZE];
X	boolean v9i[SIZE];
X	boolean v10i[SIZE];
X	boolean v11i[SIZE];
X	boolean v12i[SIZE];
X	boolean v13i[SIZE];
X	boolean v14i[SIZE];
X	boolean v15i[SIZE];
X	register tmp1[SIZE];
X	register tmp2[SIZE];
X	register tmp[SIZE];
X
X
X	if (reset) {
X		v1i = 0;
X		v2i = 0;
X		v3i = 0;
X		v4i = 0;
X		v5i = 0;
X		v6i = 0;
X		v7i = 0;
X		v8i = 0;
X		v9i = 0;
X		v10i = 0;
X		v11i = 0;
X		v12i = 0;
X		v13i = 0;
X		v14i = 0;
X		v15i = 0;
X	} else [
X		
X		while (! ready) {};
X
X		/* load initial values */
X		v1i = read(v1);
X		v2i = read(v2);
X		v3i = read(v3);
X		v4i = read(v4);
X		v5i = read(v5);
X		v6i = read(v6);
X		v7i = read(v7);
X		v8i = read(v8);
X		v9i = read(v9);
X		v10i = read(v10);
X		v11i = read(v11);
X		v12i = read(v12);
X		v13i = read(v13);
X		v14i = read(v14);
X		v15i = read(v15);
X
X		<
X		{ v3i = v1i + v2i;
X		v5i = v3i - v4i;
X		v8i = v3i + v5i;
X		v14i = v11i & v8i;
X		v1i = v14i; };
X	
X		{
X		v12i = v1i;
X		v7i = v3i * v6i;
X		v9i = v1i + v7i;
X		v15i = v12i | v9i;
X		v2i = v15i; };
X
X		{
X		v13i = v3i;
X		v11i = v10i / v5i; };
X		>;
X	];
X	< write v1 = v1i;
X	write v2 = v2i;
X	write v3 = v3i;
X	write v4 = v4i;
X	write v5 = v5i;
X	write v6 = v6i;
X	write v7 = v7i;
X	write v8 = v8i;
X	write v9 = v9i;
X	write v10 = v10i;
X	write v11 = v11i;
X	write v12 = v12i;
X	write v13 = v13i;
X	write v14 = v14i;
X	write v15 = v15i;
X	write ready=1; >;
X	write ready=0;
X]
END_OF_FILE
if test 2401 -ne `wc -c <'tseng/tseng.hc'`; then
    echo shar: \"'tseng/tseng.hc'\" unpacked with wrong size!
fi
# end of 'tseng/tseng.hc'
fi
if test -f 'tseng/tseng.pat' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/tseng.pat'\"
else
echo shar: Extracting \"'tseng/tseng.pat'\" \(32353 characters\)
sed "s/^X//" >'tseng/tseng.pat' <<'END_OF_FILE'
X# tseng: pattern file
X#
X.inputs reset[0:0] ready[0:0] 
Xv1[7:7] v1[6:6] v1[5:5] v1[4:4] v1[3:3] v1[2:2] v1[1:1] v1[0:0] 
Xv2[7:7] v2[6:6] v2[5:5] v2[4:4] v2[3:3] v2[2:2] v2[1:1] v2[0:0] 
Xv3[7:7] v3[6:6] v3[5:5] v3[4:4] v3[3:3] v3[2:2] v3[1:1] v3[0:0] 
Xv4[7:7] v4[6:6] v4[5:5] v4[4:4] v4[3:3] v4[2:2] v4[1:1] v4[0:0] 
Xv5[7:7] v5[6:6] v5[5:5] v5[4:4] v5[3:3] v5[2:2] v5[1:1] v5[0:0] 
Xv6[7:7] v6[6:6] v6[5:5] v6[4:4] v6[3:3] v6[2:2] v6[1:1] v6[0:0] 
Xv7[7:7] v7[6:6] v7[5:5] v7[4:4] v7[3:3] v7[2:2] v7[1:1] v7[0:0] 
Xv8[7:7] v8[6:6] v8[5:5] v8[4:4] v8[3:3] v8[2:2] v8[1:1] v8[0:0] 
Xv9[7:7] v9[6:6] v9[5:5] v9[4:4] v9[3:3] v9[2:2] v9[1:1] v9[0:0] 
Xv10[7:7] v10[6:6] v10[5:5] v10[4:4] v10[3:3] v10[2:2] v10[1:1] v10[0:0] 
Xv11[7:7] v11[6:6] v11[5:5] v11[4:4] v11[3:3] v11[2:2] v11[1:1] v11[0:0] 
Xv12[7:7] v12[6:6] v12[5:5] v12[4:4] v12[3:3] v12[2:2] v12[1:1] v12[0:0] 
Xv13[7:7] v13[6:6] v13[5:5] v13[4:4] v13[3:3] v13[2:2] v13[1:1] v13[0:0] 
Xv14[7:7] v14[6:6] v14[5:5] v14[4:4] v14[3:3] v14[2:2] v14[1:1] v14[0:0] 
Xv15[7:7] v15[6:6] v15[5:5] v15[4:4] v15[3:3] v15[2:2] v15[1:1] v15[0:0] ;  
X#
X00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 ; 
X00 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X10 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X10 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X00 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X00 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X00 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X00 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X00 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X#
X#	Input values:
X#	[ 12 8 13 10 3 0 1 3 0 1 3 0 1 3 0 ]
X#	[ c 8 d a 3 0 1 3 0 1 3 0 1 3 0 ]
X#	
X#	Output values:
X#	[ 2 2 20 10 10 0 0 30 2 1 0 2 20 2 2 ]
X#	[ 2 2 14 a a 0 0 1e 2 1 0 2 14 2 2 ]
X01 0000 1100 0000 1000 0000 1101 0000 1010 0000 0011 0000 0000 0000 0001 0000 0011 0000 0000 0000 0001 0000 0011 0000 0000 0000 0001 0000 0011 0000 0000 ;
X00 0000 1100 0000 1000 0000 1101 0000 1010 0000 0011 0000 0000 0000 0001 0000 0011 0000 0000 0000 0001 0000 0011 0000 0000 0000 0001 0000 0011 0000 0000 ;
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X00 ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X#
X#	Input values:
X#	[ 11 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ]
X#	[ b 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ]
X#	
X#	Output values:
X#	[ 1 81 16 5 11 5 80 27 81 5 0 1 16 1 81 ]
X#	[ 1 51 10 5 b 5 50 1b 51 5 0 1 10 1 51 ]
X01 0000 1011 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 ;
X01 0000 1011 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 ;
X00 0000 1011 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 0000 0101 ;
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X#
X#	Input values:
X#	[ 63 64 67 74 92 89 81 61 59 54 42 60 57 49 77 ]
X#	[ 3f 40 43 4a 5c 59 51 3d 3b 36 2a 3c 39 31 4d ]
X#
X#	Output values:
X#	[ 32 11367 127 74 53 89 11303 180 11335 54 1 32 127 32 11367 ]
X#	[ 20 2c67 7f 4a 35 59 2c27 b4 2c47 36 1 20 7f 20 2c67 ]
X#
X01 0011 1111 0100 0000 0100 0011 0100 1010 0101 1100 0101 1001 0101 0001 0011 1101 0011 1011 0011 0110 0010 1010 0011 1100 0011 1001 0011 0001 0100 1101 ; 
X01 0011 1111 0100 0000 0100 0011 0100 1010 0101 1100 0101 1001 0101 0001 0011 1101 0011 1011 0011 0110 0010 1010 0011 1100 0011 1001 0011 0001 0100 1101 ; 
X00 0011 1111 0100 0000 0100 0011 0100 1010 0101 1100 0101 1001 0101 0001 0011 1101 0011 1011 0011 0110 0010 1010 0011 1100 0011 1001 0011 0001 0100 1101 ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 ; 
X00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 ; 
X10 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 ; 
X10 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 ; 
X00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 ; 
X#
X#	Input values:
X#	[ 3 8 12 3 6 13 7 3 5 0 2 1 12 10 0 ]
X#	[ 3 8 c 3 6 d 7 3 5 0 2 1 c a 0 ]
X#	
X#	Output values:
X#	[ 2 147 11 3 8 13 143 19 145 0 0 2 11 2 147 ]
X#	[ 2 93 b 3 8 d 8f 13 91 0 0 2 b 2 93 ]
X01 0000 0011 0000 1000 0000 1100 0000 0011 0000 0110 0000 1101 0000 0111 0000 0011 0000 0101 0000 0000 0000 0010 0000 0001 0000 1100 0000 1010 0000 0000 ;
X01 0000 0011 0000 1000 0000 1100 0000 0011 0000 0110 0000 1101 0000 0111 0000 0011 0000 0101 0000 0000 0000 0010 0000 0001 0000 1100 0000 1010 0000 0000 ;
X00 0000 0011 0000 1000 0000 1100 0000 0011 0000 0110 0000 1101 0000 0111 0000 0011 0000 0101 0000 0000 0000 0010 0000 0001 0000 1100 0000 1010 0000 0000 ;
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
X0- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ; 
END_OF_FILE
if test 32353 -ne `wc -c <'tseng/tseng.pat'`; then
    echo shar: \"'tseng/tseng.pat'\" unpacked with wrong size!
fi
# end of 'tseng/tseng.pat'
fi
if test -f 'tseng/tseng.mon' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/tseng.mon'\"
else
echo shar: Extracting \"'tseng/tseng.mon'\" \(1312 characters\)
sed "s/^X//" >'tseng/tseng.mon' <<'END_OF_FILE'
Xreset[0:0]
Xready[0:0]
XHEX v1_0 v1[0:0] v1[1:1] v1[2:2] v1[3:3]
XHEX v1_1 v1[4:4] v1[5:5] v1[6:6] v1[7:7]
XHEX v2_0 v2[0:0] v2[1:1] v2[2:2] v2[3:3]
XHEX v2_1 v2[4:4] v2[5:5] v2[6:6] v2[7:7]
XHEX v3_0 v3[0:0] v3[1:1] v3[2:2] v3[3:3]
XHEX v3_1 v3[4:4] v3[5:5] v3[6:6] v3[7:7]
XHEX v4_0 v4[0:0] v4[1:1] v4[2:2] v4[3:3]
XHEX v4_1 v4[4:4] v4[5:5] v4[6:6] v4[7:7]
XHEX v5_0 v5[0:0] v5[1:1] v5[2:2] v5[3:3]
XHEX v5_1 v5[4:4] v5[5:5] v5[6:6] v5[7:7]
XHEX v6_0 v6[0:0] v6[1:1] v6[2:2] v6[3:3]
XHEX v6_1 v6[4:4] v6[5:5] v6[6:6] v6[7:7]
XHEX v7_0 v7[0:0] v7[1:1] v7[2:2] v7[3:3]
XHEX v7_1 v7[4:4] v7[5:5] v7[6:6] v7[7:7]
XHEX v8_0 v8[0:0] v8[1:1] v8[2:2] v8[3:3]
XHEX v8_1 v8[4:4] v8[5:5] v8[6:6] v8[7:7]
XHEX v9_0 v9[0:0] v9[1:1] v9[2:2] v9[3:3]
XHEX v9_1 v9[4:4] v9[5:5] v9[6:6] v9[7:7]
XHEX v10_0 v10[0:0] v10[1:1] v10[2:2] v10[3:3]
XHEX v10_1 v10[4:4] v10[5:5] v10[6:6] v10[7:7]
XHEX v11_0 v11[0:0] v11[1:1] v11[2:2] v11[3:3]
XHEX v11_1 v11[4:4] v11[5:5] v11[6:6] v11[7:7]
XHEX v12_0 v12[0:0] v12[1:1] v12[2:2] v12[3:3]
XHEX v12_1 v12[4:4] v12[5:5] v12[6:6] v12[7:7]
XHEX v13_0 v13[0:0] v13[1:1] v13[2:2] v13[3:3]
XHEX v13_1 v13[4:4] v13[5:5] v13[6:6] v13[7:7]
XHEX v14_0 v14[0:0] v14[1:1] v14[2:2] v14[3:3]
XHEX v14_1 v14[4:4] v14[5:5] v14[6:6] v14[7:7]
XHEX v15_0 v15[0:0] v15[1:1] v15[2:2] v15[3:3]
XHEX v15_1 v15[4:4] v15[5:5] v15[6:6] v15[7:7]
END_OF_FILE
if test 1312 -ne `wc -c <'tseng/tseng.mon'`; then
    echo shar: \"'tseng/tseng.mon'\" unpacked with wrong size!
fi
# end of 'tseng/tseng.mon'
fi
if test -f 'tseng/add_8.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/add_8.sif'\"
else
echo shar: Extracting \"'tseng/add_8.sif'\" \(3745 characters\)
sed "s/^X//" >'tseng/add_8.sif' <<'END_OF_FILE'
X#
X#	Sif model add_8	Printed Tue Jul 24 15:05:13 1990
X#
X.model add_8 sequencing ; 
X  .inputs op1[8] op2[8] ;
X  .outputs return_value[9] ;
X    #	Index 1
X    .polargraph 1 3;
X    .variable T44 T40 T34 T28 
X	T22 T16 T10 T4 
X	T1 ;
X    #	3 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op1[0:0] op2[0:0] op1[1:1] op2[1:1] 
X	op1[2:2] op2[2:2] op1[3:3] op2[3:3] 
X	op1[4:4] op2[4:4] op1[5:5] op2[5:5] 
X	op1[6:6] op2[6:6] op1[7:7] op2[7:7] 
X	;
X      .outputs T1[0:0] T4[0:0] T10[0:0] T16[0:0] 
X	T22[0:0] T28[0:0] T34[0:0] T40[0:0] 
X	T44[0:0] ;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        T1[0:0] = ((op1[0:0]  op2[0:0]' )+(op1[0:0]'  op2[0:0] ));
X        T2[0:0] = (op1[0:0]  op2[0:0] );
X        T3[0:0] = ((op1[1:1]  op2[1:1]' )+(op1[1:1]'  op2[1:1] ));
X        T4[0:0] = ((T3[0:0]  T2[0:0]' )+(T3[0:0]'  T2[0:0] ));
X        T5[0:0] = (op1[1:1]  op2[1:1] );
X        T6[0:0] = (op1[1:1] +op2[1:1] );
X        T7[0:0] = (T2[0:0]  T6[0:0] );
X        T8[0:0] = (T5[0:0] +T7[0:0] );
X        T9[0:0] = ((op1[2:2]  op2[2:2]' )+(op1[2:2]'  op2[2:2] ));
X        T10[0:0] = ((T9[0:0]  T8[0:0]' )+(T9[0:0]'  T8[0:0] ));
X        T11[0:0] = (op1[2:2]  op2[2:2] );
X        T12[0:0] = (op1[2:2] +op2[2:2] );
X        T13[0:0] = (T8[0:0]  T12[0:0] );
X        T14[0:0] = (T11[0:0] +T13[0:0] );
X        T15[0:0] = ((op1[3:3]  op2[3:3]' )+(op1[3:3]'  op2[3:3] ));
X        T16[0:0] = ((T15[0:0]  T14[0:0]' )+(T15[0:0]'  T14[0:0] ));
X        T17[0:0] = (op1[3:3]  op2[3:3] );
X        T18[0:0] = (op1[3:3] +op2[3:3] );
X        T19[0:0] = (T14[0:0]  T18[0:0] );
X        T20[0:0] = (T17[0:0] +T19[0:0] );
X        T21[0:0] = ((op1[4:4]  op2[4:4]' )+(op1[4:4]'  op2[4:4] ));
X        T22[0:0] = ((T21[0:0]  T20[0:0]' )+(T21[0:0]'  T20[0:0] ));
X        T23[0:0] = (op1[4:4]  op2[4:4] );
X        T24[0:0] = (op1[4:4] +op2[4:4] );
X        T25[0:0] = (T20[0:0]  T24[0:0] );
X        T26[0:0] = (T23[0:0] +T25[0:0] );
X        T27[0:0] = ((op1[5:5]  op2[5:5]' )+(op1[5:5]'  op2[5:5] ));
X        T28[0:0] = ((T27[0:0]  T26[0:0]' )+(T27[0:0]'  T26[0:0] ));
X        T29[0:0] = (op1[5:5]  op2[5:5] );
X        T30[0:0] = (op1[5:5] +op2[5:5] );
X        T31[0:0] = (T26[0:0]  T30[0:0] );
X        T32[0:0] = (T29[0:0] +T31[0:0] );
X        T33[0:0] = ((op1[6:6]  op2[6:6]' )+(op1[6:6]'  op2[6:6] ));
X        T34[0:0] = ((T33[0:0]  T32[0:0]' )+(T33[0:0]'  T32[0:0] ));
X        T35[0:0] = (op1[6:6]  op2[6:6] );
X        T36[0:0] = (op1[6:6] +op2[6:6] );
X        T37[0:0] = (T32[0:0]  T36[0:0] );
X        T38[0:0] = (T35[0:0] +T37[0:0] );
X        T39[0:0] = ((op1[7:7]  op2[7:7]' )+(op1[7:7]'  op2[7:7] ));
X        T40[0:0] = ((T39[0:0]  T38[0:0]' )+(T39[0:0]'  T38[0:0] ));
X        T41[0:0] = (op1[7:7]  op2[7:7] );
X        T42[0:0] = (op1[7:7] +op2[7:7] );
X        T43[0:0] = (T38[0:0]  T42[0:0] );
X        T44[0:0] = (T41[0:0] +T43[0:0] );
X        .attribute delay 15 level;
X        .attribute area 192 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 nop;	#	sink node
X      .successors ;	#  predecessors 2 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] T1[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] T4[0:0] ;
X    .attribute hercules direct_connect return_value[2:2] T10[0:0] ;
X    .attribute hercules direct_connect return_value[3:3] T16[0:0] ;
X    .attribute hercules direct_connect return_value[4:4] T22[0:0] ;
X    .attribute hercules direct_connect return_value[5:5] T28[0:0] ;
X    .attribute hercules direct_connect return_value[6:6] T34[0:0] ;
X    .attribute hercules direct_connect return_value[7:7] T40[0:0] ;
X    .attribute hercules direct_connect return_value[8:8] T44[0:0] ;
X    .endpolargraph;
X.endmodel add_8 ;
END_OF_FILE
if test 3745 -ne `wc -c <'tseng/add_8.sif'`; then
    echo shar: \"'tseng/add_8.sif'\" unpacked with wrong size!
fi
# end of 'tseng/add_8.sif'
fi
if test -f 'tseng/divide_8.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/divide_8.sif'\"
else
echo shar: Extracting \"'tseng/divide_8.sif'\" \(17304 characters\)
sed "s/^X//" >'tseng/divide_8.sif' <<'END_OF_FILE'
X#
X#	Sif model divide_8	Printed Tue Jul 24 15:05:19 1990
X#
X.model divide_8 sequencing ; 
X  .inputs op1[8] op2[8] ;
X  .outputs return_value[8] ;
X    #	Index 1
X    .polargraph 1 5;
X    .variable X1 X2 X3 X4 
X	X5 X6 X7 X8 
X	T5[9] T6[9] T8 T4 
X	T3 T2 T1 ;
X    .variable register i[8] register tmp[8] ;
X    #	5 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op1[0:0] op1[1:1] op1[2:2] op1[3:3] 
X	op1[4:4] op1[5:5] op1[6:6] op1[7:7] 
X	op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	;
X      .outputs T1[0:0] ;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        c_0_T1[0:0] =  0 ;
X        d_0_T1[0:0] =  1 ;
X        c_1_T1[0:0] = ((c_0_T1[0:0]  (op2[0:0] +op1[0:0]' ))+(d_0_T1[0:0]  (op2[0:0]  op1[0:0]' )));
X        d_1_T1[0:0] = ((c_0_T1[0:0]  (op2[0:0]'  op1[0:0] ))+(d_0_T1[0:0]  (op2[0:0]' +op1[0:0] )));
X        c_2_T1[0:0] = ((c_1_T1[0:0]  (op2[1:1] +op1[1:1]' ))+(d_1_T1[0:0]  (op2[1:1]  op1[1:1]' )));
X        d_2_T1[0:0] = ((c_1_T1[0:0]  (op2[1:1]'  op1[1:1] ))+(d_1_T1[0:0]  (op2[1:1]' +op1[1:1] )));
X        c_3_T1[0:0] = ((c_2_T1[0:0]  (op2[2:2] +op1[2:2]' ))+(d_2_T1[0:0]  (op2[2:2]  op1[2:2]' )));
X        d_3_T1[0:0] = ((c_2_T1[0:0]  (op2[2:2]'  op1[2:2] ))+(d_2_T1[0:0]  (op2[2:2]' +op1[2:2] )));
X        c_4_T1[0:0] = ((c_3_T1[0:0]  (op2[3:3] +op1[3:3]' ))+(d_3_T1[0:0]  (op2[3:3]  op1[3:3]' )));
X        d_4_T1[0:0] = ((c_3_T1[0:0]  (op2[3:3]'  op1[3:3] ))+(d_3_T1[0:0]  (op2[3:3]' +op1[3:3] )));
X        c_5_T1[0:0] = ((c_4_T1[0:0]  (op2[4:4] +op1[4:4]' ))+(d_4_T1[0:0]  (op2[4:4]  op1[4:4]' )));
X        d_5_T1[0:0] = ((c_4_T1[0:0]  (op2[4:4]'  op1[4:4] ))+(d_4_T1[0:0]  (op2[4:4]' +op1[4:4] )));
X        c_6_T1[0:0] = ((c_5_T1[0:0]  (op2[5:5] +op1[5:5]' ))+(d_5_T1[0:0]  (op2[5:5]  op1[5:5]' )));
X        d_6_T1[0:0] = ((c_5_T1[0:0]  (op2[5:5]'  op1[5:5] ))+(d_5_T1[0:0]  (op2[5:5]' +op1[5:5] )));
X        c_7_T1[0:0] = ((c_6_T1[0:0]  (op2[6:6] +op1[6:6]' ))+(d_6_T1[0:0]  (op2[6:6]  op1[6:6]' )));
X        d_7_T1[0:0] = ((c_6_T1[0:0]  (op2[6:6]'  op1[6:6] ))+(d_6_T1[0:0]  (op2[6:6]' +op1[6:6] )));
X        c_8_T1[0:0] = ((c_7_T1[0:0]  (op2[7:7] +op1[7:7]' ))+(d_7_T1[0:0]  (op2[7:7]  op1[7:7]' )));
X        d_8_T1[0:0] = ((c_7_T1[0:0]  (op2[7:7]'  op1[7:7] ))+(d_7_T1[0:0]  (op2[7:7]' +op1[7:7] )));
X        T1[0:0] = c_8_T1[0:0] ;
X        .attribute delay 17 level;
X        .attribute area 179 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 cond;
X      .successors 4 ;	#  predecessors 2 
X      .cond T1[0:0] T2[0:0] ;	#	Latched
X      .case 1 ;
X        #	Index 2
X        .polargraph 1 2;
X        #	2 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 nop;	#	sink node
X          .successors ;	#  predecessors 1 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .case 0 ;
X        #	Index 3
X        .polargraph 1 4;
X        #	4 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs op1[0:0] op1[1:1] op1[2:2] op1[3:3] 
X	op1[4:4] op1[5:5] op1[6:6] op1[7:7] 
X	op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	;
X          .outputs T3[0:0] ;
X          .successors 3 ;	#  predecessors 1 
X          .operation logic 2 ;
X            #	Expression 0
X            c_0_T3[0:0] =  0 ;
X            d_0_T3[0:0] =  1 ;
X            c_1_T3[0:0] = ((c_0_T3[0:0]  (op2[0:0] +op1[0:0]' ))+(d_0_T3[0:0]  (op2[0:0]  op1[0:0]' )));
X            d_1_T3[0:0] = ((c_0_T3[0:0]  (op2[0:0]'  op1[0:0] ))+(d_0_T3[0:0]  (op2[0:0]' +op1[0:0] )));
X            c_2_T3[0:0] = ((c_1_T3[0:0]  (op2[1:1] +op1[1:1]' ))+(d_1_T3[0:0]  (op2[1:1]  op1[1:1]' )));
X            d_2_T3[0:0] = ((c_1_T3[0:0]  (op2[1:1]'  op1[1:1] ))+(d_1_T3[0:0]  (op2[1:1]' +op1[1:1] )));
X            c_3_T3[0:0] = ((c_2_T3[0:0]  (op2[2:2] +op1[2:2]' ))+(d_2_T3[0:0]  (op2[2:2]  op1[2:2]' )));
X            d_3_T3[0:0] = ((c_2_T3[0:0]  (op2[2:2]'  op1[2:2] ))+(d_2_T3[0:0]  (op2[2:2]' +op1[2:2] )));
X            c_4_T3[0:0] = ((c_3_T3[0:0]  (op2[3:3] +op1[3:3]' ))+(d_3_T3[0:0]  (op2[3:3]  op1[3:3]' )));
X            d_4_T3[0:0] = ((c_3_T3[0:0]  (op2[3:3]'  op1[3:3] ))+(d_3_T3[0:0]  (op2[3:3]' +op1[3:3] )));
X            c_5_T3[0:0] = ((c_4_T3[0:0]  (op2[4:4] +op1[4:4]' ))+(d_4_T3[0:0]  (op2[4:4]  op1[4:4]' )));
X            d_5_T3[0:0] = ((c_4_T3[0:0]  (op2[4:4]'  op1[4:4] ))+(d_4_T3[0:0]  (op2[4:4]' +op1[4:4] )));
X            c_6_T3[0:0] = ((c_5_T3[0:0]  (op2[5:5] +op1[5:5]' ))+(d_5_T3[0:0]  (op2[5:5]  op1[5:5]' )));
X            d_6_T3[0:0] = ((c_5_T3[0:0]  (op2[5:5]'  op1[5:5] ))+(d_5_T3[0:0]  (op2[5:5]' +op1[5:5] )));
X            c_7_T3[0:0] = ((c_6_T3[0:0]  (op2[6:6] +op1[6:6]' ))+(d_6_T3[0:0]  (op2[6:6]  op1[6:6]' )));
X            d_7_T3[0:0] = ((c_6_T3[0:0]  (op2[6:6]'  op1[6:6] ))+(d_6_T3[0:0]  (op2[6:6]' +op1[6:6] )));
X            c_8_T3[0:0] = ((c_7_T3[0:0]  (op2[7:7] +op1[7:7]' ))+(d_7_T3[0:0]  (op2[7:7]  op1[7:7]' )));
X            d_8_T3[0:0] = ((c_7_T3[0:0]  (op2[7:7]'  op1[7:7] ))+(d_7_T3[0:0]  (op2[7:7]' +op1[7:7] )));
X            T3[0:0] = d_8_T3[0:0] ;
X            .attribute delay 17 level;
X            .attribute area 179 literal;
X          .endoperation;
X        .endnode;
X
X        .node 3 cond;
X          .successors 4 ;	#  predecessors 2 
X          .cond T3[0:0] T4[0:0] ;	#	Latched
X          .case 1 ;
X            #	Index 4
X            .polargraph 1 4;
X            #	4 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 operation;
X              .inputs 0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	op1[7:7] op1[6:6] op1[5:5] op1[4:4] 
X	op1[3:3] op1[2:2] op1[1:1] op1[0:0] 
X	;
X              .outputs i[7:7] i[6:6] i[5:5] i[4:4] 
X	i[3:3] i[2:2] i[1:1] i[0:0] 
X	tmp[7:7] tmp[6:6] tmp[5:5] tmp[4:4] 
X	tmp[3:3] tmp[2:2] tmp[1:1] tmp[0:0] 
X	;
X              .successors 3 ;	#  predecessors 1 
X              .attribute constraint delay 2 1 cycles;
X              .operation load_register;
X            .endnode;
X
X            .node 3 loop;
X              .successors 4 ;	#  predecessors 2 
X              .loop T8[0:0] ;	#	
X                #	Index 5
X                .polargraph 1 3;
X                #	3 nodes
X                .node 1 nop;	#	source node
X                  .successors 2 ;
X                .endnode;
X
X                .node 2 operation;
X                  .inputs tmp[0:0] tmp[1:1] tmp[2:2] tmp[3:3] 
X	tmp[4:4] tmp[5:5] tmp[6:6] tmp[7:7] 
X	op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	i[0:0] i[1:1] i[2:2] i[3:3] 
X	i[4:4] i[5:5] i[6:6] i[7:7] 
X	;
X                  .outputs T5[0:0] T5[1:1] T5[2:2] T5[3:3] 
X	T5[4:4] T5[5:5] T5[6:6] T5[7:7] 
X	T6[0:0] T6[1:1] T6[2:2] T6[3:3] 
X	T6[4:4] T6[5:5] T6[6:6] T6[7:7] 
X	T8[0:0] ;
X                  .successors 3 ;	#  predecessors 1 
X                  .operation logic 3 ;
X                    #	Expression 0
X                    c_T5[0:0] =  1 ;
X                    T5[0:0] = (((((tmp[0:0]'  op2[0:0]' ) c_T5[0:0]' )+((tmp[0:0]  op2[0:0] ) c_T5[0:0]' ))+((tmp[0:0]'  op2[0:0] ) c_T5[0:0] ))+((tmp[0:0]  op2[0:0]' ) c_T5[0:0] ));
X                    c_T5[1:1] = ((tmp[0:0]  op2[0:0]' )+(c_T5[0:0]  (tmp[0:0] +op2[0:0]' )));
X                    T5[1:1] = (((((tmp[1:1]'  op2[1:1]' ) c_T5[1:1]' )+((tmp[1:1]  op2[1:1] ) c_T5[1:1]' ))+((tmp[1:1]'  op2[1:1] ) c_T5[1:1] ))+((tmp[1:1]  op2[1:1]' ) c_T5[1:1] ));
X                    c_T5[2:2] = ((tmp[1:1]  op2[1:1]' )+(c_T5[1:1]  (tmp[1:1] +op2[1:1]' )));
X                    T5[2:2] = (((((tmp[2:2]'  op2[2:2]' ) c_T5[2:2]' )+((tmp[2:2]  op2[2:2] ) c_T5[2:2]' ))+((tmp[2:2]'  op2[2:2] ) c_T5[2:2] ))+((tmp[2:2]  op2[2:2]' ) c_T5[2:2] ));
X                    c_T5[3:3] = ((tmp[2:2]  op2[2:2]' )+(c_T5[2:2]  (tmp[2:2] +op2[2:2]' )));
X                    T5[3:3] = (((((tmp[3:3]'  op2[3:3]' ) c_T5[3:3]' )+((tmp[3:3]  op2[3:3] ) c_T5[3:3]' ))+((tmp[3:3]'  op2[3:3] ) c_T5[3:3] ))+((tmp[3:3]  op2[3:3]' ) c_T5[3:3] ));
X                    c_T5[4:4] = ((tmp[3:3]  op2[3:3]' )+(c_T5[3:3]  (tmp[3:3] +op2[3:3]' )));
X                    T5[4:4] = (((((tmp[4:4]'  op2[4:4]' ) c_T5[4:4]' )+((tmp[4:4]  op2[4:4] ) c_T5[4:4]' ))+((tmp[4:4]'  op2[4:4] ) c_T5[4:4] ))+((tmp[4:4]  op2[4:4]' ) c_T5[4:4] ));
X                    c_T5[5:5] = ((tmp[4:4]  op2[4:4]' )+(c_T5[4:4]  (tmp[4:4] +op2[4:4]' )));
X                    T5[5:5] = (((((tmp[5:5]'  op2[5:5]' ) c_T5[5:5]' )+((tmp[5:5]  op2[5:5] ) c_T5[5:5]' ))+((tmp[5:5]'  op2[5:5] ) c_T5[5:5] ))+((tmp[5:5]  op2[5:5]' ) c_T5[5:5] ));
X                    c_T5[6:6] = ((tmp[5:5]  op2[5:5]' )+(c_T5[5:5]  (tmp[5:5] +op2[5:5]' )));
X                    T5[6:6] = (((((tmp[6:6]'  op2[6:6]' ) c_T5[6:6]' )+((tmp[6:6]  op2[6:6] ) c_T5[6:6]' ))+((tmp[6:6]'  op2[6:6] ) c_T5[6:6] ))+((tmp[6:6]  op2[6:6]' ) c_T5[6:6] ));
X                    c_T5[7:7] = ((tmp[6:6]  op2[6:6]' )+(c_T5[6:6]  (tmp[6:6] +op2[6:6]' )));
X                    T5[7:7] = (((((tmp[7:7]'  op2[7:7]' ) c_T5[7:7]' )+((tmp[7:7]  op2[7:7] ) c_T5[7:7]' ))+((tmp[7:7]'  op2[7:7] ) c_T5[7:7] ))+((tmp[7:7]  op2[7:7]' ) c_T5[7:7] ));
X                    c_T5[8:8] = ((tmp[7:7]  op2[7:7]' )+(c_T5[7:7]  (tmp[7:7] +op2[7:7]' )));
X                    T5[8:8] = c_T5[7:7] ;
X                    c_T6[0:0] =  0 ;
X                    T6[0:0] = (((((i[0:0]'   1 ) c_T6[0:0]' )+((i[0:0]   1' ) c_T6[0:0]' ))+((i[0:0]'   1' ) c_T6[0:0] ))+((i[0:0]   1 ) c_T6[0:0] ));
X                    c_T6[1:1] = ((i[0:0]   1 )+(c_T6[0:0]  (i[0:0] + 1 )));
X                    T6[1:1] = (((((i[1:1]'   0 ) c_T6[1:1]' )+((i[1:1]   0' ) c_T6[1:1]' ))+((i[1:1]'   0' ) c_T6[1:1] ))+((i[1:1]   0 ) c_T6[1:1] ));
X                    c_T6[2:2] = ((i[1:1]   0 )+(c_T6[1:1]  (i[1:1] + 0 )));
X                    T6[2:2] = (((((i[2:2]'   0 ) c_T6[2:2]' )+((i[2:2]   0' ) c_T6[2:2]' ))+((i[2:2]'   0' ) c_T6[2:2] ))+((i[2:2]   0 ) c_T6[2:2] ));
X                    c_T6[3:3] = ((i[2:2]   0 )+(c_T6[2:2]  (i[2:2] + 0 )));
X                    T6[3:3] = (((((i[3:3]'   0 ) c_T6[3:3]' )+((i[3:3]   0' ) c_T6[3:3]' ))+((i[3:3]'   0' ) c_T6[3:3] ))+((i[3:3]   0 ) c_T6[3:3] ));
X                    c_T6[4:4] = ((i[3:3]   0 )+(c_T6[3:3]  (i[3:3] + 0 )));
X                    T6[4:4] = (((((i[4:4]'   0 ) c_T6[4:4]' )+((i[4:4]   0' ) c_T6[4:4]' ))+((i[4:4]'   0' ) c_T6[4:4] ))+((i[4:4]   0 ) c_T6[4:4] ));
X                    c_T6[5:5] = ((i[4:4]   0 )+(c_T6[4:4]  (i[4:4] + 0 )));
X                    T6[5:5] = (((((i[5:5]'   0 ) c_T6[5:5]' )+((i[5:5]   0' ) c_T6[5:5]' ))+((i[5:5]'   0' ) c_T6[5:5] ))+((i[5:5]   0 ) c_T6[5:5] ));
X                    c_T6[6:6] = ((i[5:5]   0 )+(c_T6[5:5]  (i[5:5] + 0 )));
X                    T6[6:6] = (((((i[6:6]'   0 ) c_T6[6:6]' )+((i[6:6]   0' ) c_T6[6:6]' ))+((i[6:6]'   0' ) c_T6[6:6] ))+((i[6:6]   0 ) c_T6[6:6] ));
X                    c_T6[7:7] = ((i[6:6]   0 )+(c_T6[6:6]  (i[6:6] + 0 )));
X                    T6[7:7] = (((((i[7:7]'   0 ) c_T6[7:7]' )+((i[7:7]   0' ) c_T6[7:7]' ))+((i[7:7]'   0' ) c_T6[7:7] ))+((i[7:7]   0 ) c_T6[7:7] ));
X                    c_T6[8:8] = ((i[7:7]   0 )+(c_T6[7:7]  (i[7:7] + 0 )));
X                    T6[8:8] = c_T6[7:7] ;
X                    c_0_T7[0:0] =  0 ;
X                    d_0_T7[0:0] =  1 ;
X                    c_1_T7[0:0] = ((c_0_T7[0:0]  (op2[0:0] +T5[0:0]' ))+(d_0_T7[0:0]  (op2[0:0]  T5[0:0]' )));
X                    d_1_T7[0:0] = ((c_0_T7[0:0]  (op2[0:0]'  T5[0:0] ))+(d_0_T7[0:0]  (op2[0:0]' +T5[0:0] )));
X                    c_2_T7[0:0] = ((c_1_T7[0:0]  (op2[1:1] +T5[1:1]' ))+(d_1_T7[0:0]  (op2[1:1]  T5[1:1]' )));
X                    d_2_T7[0:0] = ((c_1_T7[0:0]  (op2[1:1]'  T5[1:1] ))+(d_1_T7[0:0]  (op2[1:1]' +T5[1:1] )));
X                    c_3_T7[0:0] = ((c_2_T7[0:0]  (op2[2:2] +T5[2:2]' ))+(d_2_T7[0:0]  (op2[2:2]  T5[2:2]' )));
X                    d_3_T7[0:0] = ((c_2_T7[0:0]  (op2[2:2]'  T5[2:2] ))+(d_2_T7[0:0]  (op2[2:2]' +T5[2:2] )));
X                    c_4_T7[0:0] = ((c_3_T7[0:0]  (op2[3:3] +T5[3:3]' ))+(d_3_T7[0:0]  (op2[3:3]  T5[3:3]' )));
X                    d_4_T7[0:0] = ((c_3_T7[0:0]  (op2[3:3]'  T5[3:3] ))+(d_3_T7[0:0]  (op2[3:3]' +T5[3:3] )));
X                    c_5_T7[0:0] = ((c_4_T7[0:0]  (op2[4:4] +T5[4:4]' ))+(d_4_T7[0:0]  (op2[4:4]  T5[4:4]' )));
X                    d_5_T7[0:0] = ((c_4_T7[0:0]  (op2[4:4]'  T5[4:4] ))+(d_4_T7[0:0]  (op2[4:4]' +T5[4:4] )));
X                    c_6_T7[0:0] = ((c_5_T7[0:0]  (op2[5:5] +T5[5:5]' ))+(d_5_T7[0:0]  (op2[5:5]  T5[5:5]' )));
X                    d_6_T7[0:0] = ((c_5_T7[0:0]  (op2[5:5]'  T5[5:5] ))+(d_5_T7[0:0]  (op2[5:5]' +T5[5:5] )));
X                    c_7_T7[0:0] = ((c_6_T7[0:0]  (op2[6:6] +T5[6:6]' ))+(d_6_T7[0:0]  (op2[6:6]  T5[6:6]' )));
X                    d_7_T7[0:0] = ((c_6_T7[0:0]  (op2[6:6]'  T5[6:6] ))+(d_6_T7[0:0]  (op2[6:6]' +T5[6:6] )));
X                    c_8_T7[0:0] = ((c_7_T7[0:0]  (op2[7:7] +T5[7:7]' ))+(d_7_T7[0:0]  (op2[7:7]  T5[7:7]' )));
X                    d_8_T7[0:0] = ((c_7_T7[0:0]  (op2[7:7]'  T5[7:7] ))+(d_7_T7[0:0]  (op2[7:7]' +T5[7:7] )));
X                    T7[0:0] = d_8_T7[0:0] ;
X                    T8[0:0] = T7[0:0]' ;
X                    .attribute delay 22 level;
X                    .attribute area 696 literal;
X                  .endoperation;
X                .endnode;
X
X                .node 3 nop;	#	sink node
X                  .successors ;	#  predecessors 2 
X                .endnode;
X
X                .endpolargraph;
X              .attribute hercules loop_load i[7:7] T6[7:7] ;
X              .attribute hercules loop_load i[6:6] T6[6:6] ;
X              .attribute hercules loop_load i[5:5] T6[5:5] ;
X              .attribute hercules loop_load i[4:4] T6[4:4] ;
X              .attribute hercules loop_load i[3:3] T6[3:3] ;
X              .attribute hercules loop_load i[2:2] T6[2:2] ;
X              .attribute hercules loop_load i[1:1] T6[1:1] ;
X              .attribute hercules loop_load i[0:0] T6[0:0] ;
X              .attribute hercules loop_load tmp[7:7] T5[7:7] ;
X              .attribute hercules loop_load tmp[6:6] T5[6:6] ;
X              .attribute hercules loop_load tmp[5:5] T5[5:5] ;
X              .attribute hercules loop_load tmp[4:4] T5[4:4] ;
X              .attribute hercules loop_load tmp[3:3] T5[3:3] ;
X              .attribute hercules loop_load tmp[2:2] T5[2:2] ;
X              .attribute hercules loop_load tmp[1:1] T5[1:1] ;
X              .attribute hercules loop_load tmp[0:0] T5[0:0] ;
X              .endloop;
X            .endnode;
X
X            .node 4 nop;	#	sink node
X              .successors ;	#  predecessors 3 
X            .endnode;
X
X            .endpolargraph;
X          .endcase;
X          .case 0 ;
X            #	Index 6
X            .polargraph 1 2;
X            #	2 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 nop;	#	sink node
X              .successors ;	#  predecessors 1 
X            .endnode;
X
X            .endpolargraph;
X          .endcase;
X          .endcond;
X        .endnode;
X
X        .node 4 nop;	#	sink node
X          .successors ;	#  predecessors 3 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 4 operation;
X      .inputs T2[0:0] T4[0:0] i[7:7] i[6:6] 
X	i[5:5] i[4:4] i[3:3] i[2:2] 
X	i[1:1] i[0:0] ;
X      .outputs X1[0:0] X2[0:0] X3[0:0] X4[0:0] 
X	X5[0:0] X6[0:0] X7[0:0] X8[0:0] 
X	;
X      .successors 5 ;	#  predecessors 3 
X      .operation logic 4 ;
X        #	Expression 0
X        M1[0:0] = X16[0:0] ;
X        M1[1:1] = X15[0:0] ;
X        M1[2:2] = X14[0:0] ;
X        M1[3:3] = X13[0:0] ;
X        M1[4:4] = X12[0:0] ;
X        M1[5:5] = X11[0:0] ;
X        M1[6:6] = X10[0:0] ;
X        M1[7:7] = X9[0:0] ;
X        X1[0:0] = ( 0 +(V0_T2_0_0[0:0]  M1[7:7] ));
X        X2[0:0] = ( 0 +(V0_T2_0_0[0:0]  M1[6:6] ));
X        X3[0:0] = ( 0 +(V0_T2_0_0[0:0]  M1[5:5] ));
X        X4[0:0] = ( 0 +(V0_T2_0_0[0:0]  M1[4:4] ));
X        X5[0:0] = ( 0 +(V0_T2_0_0[0:0]  M1[3:3] ));
X        X6[0:0] = ( 0 +(V0_T2_0_0[0:0]  M1[2:2] ));
X        X7[0:0] = ( 0 +(V0_T2_0_0[0:0]  M1[1:1] ));
X        X8[0:0] = ( 0 +(V0_T2_0_0[0:0]  M1[0:0] ));
X        X9[0:0] = ((V1_T4_0_0[0:0]  i[7:7] )+ 0 );
X        X10[0:0] = ((V1_T4_0_0[0:0]  i[6:6] )+ 0 );
X        X11[0:0] = ((V1_T4_0_0[0:0]  i[5:5] )+ 0 );
X        X12[0:0] = ((V1_T4_0_0[0:0]  i[4:4] )+ 0 );
X        X13[0:0] = ((V1_T4_0_0[0:0]  i[3:3] )+ 0 );
X        X14[0:0] = ((V1_T4_0_0[0:0]  i[2:2] )+ 0 );
X        X15[0:0] = ((V1_T4_0_0[0:0]  i[1:1] )+ 0 );
X        X16[0:0] = ((V1_T4_0_0[0:0]  i[0:0] )+ 0 );
X        V1_T4_0_0[0:0] = T4[0:0] ;
X        V0_T2_0_0[0:0] = T2[0:0]' ;
X        .attribute delay 4 level;
X        .attribute area 90 literal;
X      .endoperation;
X    .endnode;
X
X    .node 5 nop;	#	sink node
X      .successors ;	#  predecessors 4 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] X8[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] X7[0:0] ;
X    .attribute hercules direct_connect return_value[2:2] X6[0:0] ;
X    .attribute hercules direct_connect return_value[3:3] X5[0:0] ;
X    .attribute hercules direct_connect return_value[4:4] X4[0:0] ;
X    .attribute hercules direct_connect return_value[5:5] X3[0:0] ;
X    .attribute hercules direct_connect return_value[6:6] X2[0:0] ;
X    .attribute hercules direct_connect return_value[7:7] X1[0:0] ;
X    .endpolargraph;
X.endmodel divide_8 ;
END_OF_FILE
if test 17304 -ne `wc -c <'tseng/divide_8.sif'`; then
    echo shar: \"'tseng/divide_8.sif'\" unpacked with wrong size!
fi
# end of 'tseng/divide_8.sif'
fi
if test -f 'tseng/multiply_8.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/multiply_8.sif'\"
else
echo shar: Extracting \"'tseng/multiply_8.sif'\" \(17409 characters\)
sed "s/^X//" >'tseng/multiply_8.sif' <<'END_OF_FILE'
X#
X#	Sif model multiply_8	Printed Tue Jul 24 15:05:26 1990
X#
X.model multiply_8 sequencing ; 
X  .inputs op1[8] op2[8] ;
X  .outputs return_value[16] ;
X    #	Index 1
X    .polargraph 1 5;
X    .variable M1[16] T4[9] T3[17] T6 
X	T2 T1 ;
X    .variable register tmp[16] register count[8] ;
X    #	5 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	;
X      .outputs T1[0:0] ;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        c_0_T1[0:0] =  0 ;
X        d_0_T1[0:0] =  1 ;
X        c_1_T1[0:0] = ((c_0_T1[0:0]  (op2[0:0] + 0' ))+(d_0_T1[0:0]  (op2[0:0]   0' )));
X        d_1_T1[0:0] = ((c_0_T1[0:0]  (op2[0:0]'   0 ))+(d_0_T1[0:0]  (op2[0:0]' + 0 )));
X        c_2_T1[0:0] = ((c_1_T1[0:0]  (op2[1:1] + 0' ))+(d_1_T1[0:0]  (op2[1:1]   0' )));
X        d_2_T1[0:0] = ((c_1_T1[0:0]  (op2[1:1]'   0 ))+(d_1_T1[0:0]  (op2[1:1]' + 0 )));
X        c_3_T1[0:0] = ((c_2_T1[0:0]  (op2[2:2] + 0' ))+(d_2_T1[0:0]  (op2[2:2]   0' )));
X        d_3_T1[0:0] = ((c_2_T1[0:0]  (op2[2:2]'   0 ))+(d_2_T1[0:0]  (op2[2:2]' + 0 )));
X        c_4_T1[0:0] = ((c_3_T1[0:0]  (op2[3:3] + 0' ))+(d_3_T1[0:0]  (op2[3:3]   0' )));
X        d_4_T1[0:0] = ((c_3_T1[0:0]  (op2[3:3]'   0 ))+(d_3_T1[0:0]  (op2[3:3]' + 0 )));
X        c_5_T1[0:0] = ((c_4_T1[0:0]  (op2[4:4] + 0' ))+(d_4_T1[0:0]  (op2[4:4]   0' )));
X        d_5_T1[0:0] = ((c_4_T1[0:0]  (op2[4:4]'   0 ))+(d_4_T1[0:0]  (op2[4:4]' + 0 )));
X        c_6_T1[0:0] = ((c_5_T1[0:0]  (op2[5:5] + 0' ))+(d_5_T1[0:0]  (op2[5:5]   0' )));
X        d_6_T1[0:0] = ((c_5_T1[0:0]  (op2[5:5]'   0 ))+(d_5_T1[0:0]  (op2[5:5]' + 0 )));
X        c_7_T1[0:0] = ((c_6_T1[0:0]  (op2[6:6] + 0' ))+(d_6_T1[0:0]  (op2[6:6]   0' )));
X        d_7_T1[0:0] = ((c_6_T1[0:0]  (op2[6:6]'   0 ))+(d_6_T1[0:0]  (op2[6:6]' + 0 )));
X        c_8_T1[0:0] = ((c_7_T1[0:0]  (op2[7:7] + 0' ))+(d_7_T1[0:0]  (op2[7:7]   0' )));
X        d_8_T1[0:0] = ((c_7_T1[0:0]  (op2[7:7]'   0 ))+(d_7_T1[0:0]  (op2[7:7]' + 0 )));
X        T1[0:0] = c_8_T1[0:0] ;
X        .attribute delay 17 level;
X        .attribute area 179 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 cond;
X      .successors 4 ;	#  predecessors 2 
X      .cond T1[0:0] T2[0:0] ;	#	Latched
X      .case 1 ;
X        #	Index 2
X        .polargraph 1 4;
X        #	4 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs 0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	op2[7:7] op2[6:6] op2[5:5] op2[4:4] 
X	op2[3:3] op2[2:2] op2[1:1] op2[0:0] 
X	;
X          .outputs tmp[15:15] tmp[14:14] tmp[13:13] tmp[12:12] 
X	tmp[11:11] tmp[10:10] tmp[9:9] tmp[8:8] 
X	tmp[7:7] tmp[6:6] tmp[5:5] tmp[4:4] 
X	tmp[3:3] tmp[2:2] tmp[1:1] tmp[0:0] 
X	count[7:7] count[6:6] count[5:5] count[4:4] 
X	count[3:3] count[2:2] count[1:1] count[0:0] 
X	;
X          .successors 3 ;	#  predecessors 1 
X          .attribute constraint delay 2 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 3 loop;
X          .successors 4 ;	#  predecessors 2 
X          .loop T6[0:0] ;	#	
X            #	Index 3
X            .polargraph 1 3;
X            #	3 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 operation;
X              .inputs tmp[0:0] tmp[1:1] tmp[2:2] tmp[3:3] 
X	tmp[4:4] tmp[5:5] tmp[6:6] tmp[7:7] 
X	tmp[8:8] tmp[9:9] tmp[10:10] tmp[11:11] 
X	tmp[12:12] tmp[13:13] tmp[14:14] tmp[15:15] 
X	op1[0:0] op1[1:1] op1[2:2] op1[3:3] 
X	op1[4:4] op1[5:5] op1[6:6] op1[7:7] 
X	count[0:0] count[1:1] count[2:2] count[3:3] 
X	count[4:4] count[5:5] count[6:6] count[7:7] 
X	;
X              .outputs T3[0:0] T3[1:1] T3[2:2] T3[3:3] 
X	T3[4:4] T3[5:5] T3[6:6] T3[7:7] 
X	T3[8:8] T3[9:9] T3[10:10] T3[11:11] 
X	T3[12:12] T3[13:13] T3[14:14] T3[15:15] 
X	T4[0:0] T4[1:1] T4[2:2] T4[3:3] 
X	T4[4:4] T4[5:5] T4[6:6] T4[7:7] 
X	T6[0:0] ;
X              .successors 3 ;	#  predecessors 1 
X              .operation logic 2 ;
X                #	Expression 0
X                c_T3[0:0] =  0 ;
X                T3[0:0] = (((((tmp[0:0]'  op1[0:0] ) c_T3[0:0]' )+((tmp[0:0]  op1[0:0]' ) c_T3[0:0]' ))+((tmp[0:0]'  op1[0:0]' ) c_T3[0:0] ))+((tmp[0:0]  op1[0:0] ) c_T3[0:0] ));
X                c_T3[1:1] = ((tmp[0:0]  op1[0:0] )+(c_T3[0:0]  (tmp[0:0] +op1[0:0] )));
X                T3[1:1] = (((((tmp[1:1]'  op1[1:1] ) c_T3[1:1]' )+((tmp[1:1]  op1[1:1]' ) c_T3[1:1]' ))+((tmp[1:1]'  op1[1:1]' ) c_T3[1:1] ))+((tmp[1:1]  op1[1:1] ) c_T3[1:1] ));
X                c_T3[2:2] = ((tmp[1:1]  op1[1:1] )+(c_T3[1:1]  (tmp[1:1] +op1[1:1] )));
X                T3[2:2] = (((((tmp[2:2]'  op1[2:2] ) c_T3[2:2]' )+((tmp[2:2]  op1[2:2]' ) c_T3[2:2]' ))+((tmp[2:2]'  op1[2:2]' ) c_T3[2:2] ))+((tmp[2:2]  op1[2:2] ) c_T3[2:2] ));
X                c_T3[3:3] = ((tmp[2:2]  op1[2:2] )+(c_T3[2:2]  (tmp[2:2] +op1[2:2] )));
X                T3[3:3] = (((((tmp[3:3]'  op1[3:3] ) c_T3[3:3]' )+((tmp[3:3]  op1[3:3]' ) c_T3[3:3]' ))+((tmp[3:3]'  op1[3:3]' ) c_T3[3:3] ))+((tmp[3:3]  op1[3:3] ) c_T3[3:3] ));
X                c_T3[4:4] = ((tmp[3:3]  op1[3:3] )+(c_T3[3:3]  (tmp[3:3] +op1[3:3] )));
X                T3[4:4] = (((((tmp[4:4]'  op1[4:4] ) c_T3[4:4]' )+((tmp[4:4]  op1[4:4]' ) c_T3[4:4]' ))+((tmp[4:4]'  op1[4:4]' ) c_T3[4:4] ))+((tmp[4:4]  op1[4:4] ) c_T3[4:4] ));
X                c_T3[5:5] = ((tmp[4:4]  op1[4:4] )+(c_T3[4:4]  (tmp[4:4] +op1[4:4] )));
X                T3[5:5] = (((((tmp[5:5]'  op1[5:5] ) c_T3[5:5]' )+((tmp[5:5]  op1[5:5]' ) c_T3[5:5]' ))+((tmp[5:5]'  op1[5:5]' ) c_T3[5:5] ))+((tmp[5:5]  op1[5:5] ) c_T3[5:5] ));
X                c_T3[6:6] = ((tmp[5:5]  op1[5:5] )+(c_T3[5:5]  (tmp[5:5] +op1[5:5] )));
X                T3[6:6] = (((((tmp[6:6]'  op1[6:6] ) c_T3[6:6]' )+((tmp[6:6]  op1[6:6]' ) c_T3[6:6]' ))+((tmp[6:6]'  op1[6:6]' ) c_T3[6:6] ))+((tmp[6:6]  op1[6:6] ) c_T3[6:6] ));
X                c_T3[7:7] = ((tmp[6:6]  op1[6:6] )+(c_T3[6:6]  (tmp[6:6] +op1[6:6] )));
X                T3[7:7] = (((((tmp[7:7]'  op1[7:7] ) c_T3[7:7]' )+((tmp[7:7]  op1[7:7]' ) c_T3[7:7]' ))+((tmp[7:7]'  op1[7:7]' ) c_T3[7:7] ))+((tmp[7:7]  op1[7:7] ) c_T3[7:7] ));
X                c_T3[8:8] = ((tmp[7:7]  op1[7:7] )+(c_T3[7:7]  (tmp[7:7] +op1[7:7] )));
X                T3[8:8] = (((((tmp[8:8]'   0 ) c_T3[8:8]' )+((tmp[8:8]   0' ) c_T3[8:8]' ))+((tmp[8:8]'   0' ) c_T3[8:8] ))+((tmp[8:8]   0 ) c_T3[8:8] ));
X                c_T3[9:9] = ((tmp[8:8]   0 )+(c_T3[8:8]  (tmp[8:8] + 0 )));
X                T3[9:9] = (((((tmp[9:9]'   0 ) c_T3[9:9]' )+((tmp[9:9]   0' ) c_T3[9:9]' ))+((tmp[9:9]'   0' ) c_T3[9:9] ))+((tmp[9:9]   0 ) c_T3[9:9] ));
X                c_T3[10:10] = ((tmp[9:9]   0 )+(c_T3[9:9]  (tmp[9:9] + 0 )));
X                T3[10:10] = (((((tmp[10:10]'   0 ) c_T3[10:10]' )+((tmp[10:10]   0' ) c_T3[10:10]' ))+((tmp[10:10]'   0' ) c_T3[10:10] ))+((tmp[10:10]   0 ) c_T3[10:10] ));
X                c_T3[11:11] = ((tmp[10:10]   0 )+(c_T3[10:10]  (tmp[10:10] + 0 )));
X                T3[11:11] = (((((tmp[11:11]'   0 ) c_T3[11:11]' )+((tmp[11:11]   0' ) c_T3[11:11]' ))+((tmp[11:11]'   0' ) c_T3[11:11] ))+((tmp[11:11]   0 ) c_T3[11:11] ));
X                c_T3[12:12] = ((tmp[11:11]   0 )+(c_T3[11:11]  (tmp[11:11] + 0 )));
X                T3[12:12] = (((((tmp[12:12]'   0 ) c_T3[12:12]' )+((tmp[12:12]   0' ) c_T3[12:12]' ))+((tmp[12:12]'   0' ) c_T3[12:12] ))+((tmp[12:12]   0 ) c_T3[12:12] ));
X                c_T3[13:13] = ((tmp[12:12]   0 )+(c_T3[12:12]  (tmp[12:12] + 0 )));
X                T3[13:13] = (((((tmp[13:13]'   0 ) c_T3[13:13]' )+((tmp[13:13]   0' ) c_T3[13:13]' ))+((tmp[13:13]'   0' ) c_T3[13:13] ))+((tmp[13:13]   0 ) c_T3[13:13] ));
X                c_T3[14:14] = ((tmp[13:13]   0 )+(c_T3[13:13]  (tmp[13:13] + 0 )));
X                T3[14:14] = (((((tmp[14:14]'   0 ) c_T3[14:14]' )+((tmp[14:14]   0' ) c_T3[14:14]' ))+((tmp[14:14]'   0' ) c_T3[14:14] ))+((tmp[14:14]   0 ) c_T3[14:14] ));
X                c_T3[15:15] = ((tmp[14:14]   0 )+(c_T3[14:14]  (tmp[14:14] + 0 )));
X                T3[15:15] = (((((tmp[15:15]'   0 ) c_T3[15:15]' )+((tmp[15:15]   0' ) c_T3[15:15]' ))+((tmp[15:15]'   0' ) c_T3[15:15] ))+((tmp[15:15]   0 ) c_T3[15:15] ));
X                c_T3[16:16] = ((tmp[15:15]   0 )+(c_T3[15:15]  (tmp[15:15] + 0 )));
X                T3[16:16] = c_T3[15:15] ;
X                c_T4[0:0] =  1 ;
X                T4[0:0] = (((((count[0:0]'   1' ) c_T4[0:0]' )+((count[0:0]   1 ) c_T4[0:0]' ))+((count[0:0]'   1 ) c_T4[0:0] ))+((count[0:0]   1' ) c_T4[0:0] ));
X                c_T4[1:1] = ((count[0:0]   1' )+(c_T4[0:0]  (count[0:0] + 1' )));
X                T4[1:1] = (((((count[1:1]'   0' ) c_T4[1:1]' )+((count[1:1]   0 ) c_T4[1:1]' ))+((count[1:1]'   0 ) c_T4[1:1] ))+((count[1:1]   0' ) c_T4[1:1] ));
X                c_T4[2:2] = ((count[1:1]   0' )+(c_T4[1:1]  (count[1:1] + 0' )));
X                T4[2:2] = (((((count[2:2]'   0' ) c_T4[2:2]' )+((count[2:2]   0 ) c_T4[2:2]' ))+((count[2:2]'   0 ) c_T4[2:2] ))+((count[2:2]   0' ) c_T4[2:2] ));
X                c_T4[3:3] = ((count[2:2]   0' )+(c_T4[2:2]  (count[2:2] + 0' )));
X                T4[3:3] = (((((count[3:3]'   0' ) c_T4[3:3]' )+((count[3:3]   0 ) c_T4[3:3]' ))+((count[3:3]'   0 ) c_T4[3:3] ))+((count[3:3]   0' ) c_T4[3:3] ));
X                c_T4[4:4] = ((count[3:3]   0' )+(c_T4[3:3]  (count[3:3] + 0' )));
X                T4[4:4] = (((((count[4:4]'   0' ) c_T4[4:4]' )+((count[4:4]   0 ) c_T4[4:4]' ))+((count[4:4]'   0 ) c_T4[4:4] ))+((count[4:4]   0' ) c_T4[4:4] ));
X                c_T4[5:5] = ((count[4:4]   0' )+(c_T4[4:4]  (count[4:4] + 0' )));
X                T4[5:5] = (((((count[5:5]'   0' ) c_T4[5:5]' )+((count[5:5]   0 ) c_T4[5:5]' ))+((count[5:5]'   0 ) c_T4[5:5] ))+((count[5:5]   0' ) c_T4[5:5] ));
X                c_T4[6:6] = ((count[5:5]   0' )+(c_T4[5:5]  (count[5:5] + 0' )));
X                T4[6:6] = (((((count[6:6]'   0' ) c_T4[6:6]' )+((count[6:6]   0 ) c_T4[6:6]' ))+((count[6:6]'   0 ) c_T4[6:6] ))+((count[6:6]   0' ) c_T4[6:6] ));
X                c_T4[7:7] = ((count[6:6]   0' )+(c_T4[6:6]  (count[6:6] + 0' )));
X                T4[7:7] = (((((count[7:7]'   0' ) c_T4[7:7]' )+((count[7:7]   0 ) c_T4[7:7]' ))+((count[7:7]'   0 ) c_T4[7:7] ))+((count[7:7]   0' ) c_T4[7:7] ));
X                c_T4[8:8] = ((count[7:7]   0' )+(c_T4[7:7]  (count[7:7] + 0' )));
X                T4[8:8] = c_T4[7:7] ;
X                c_0_T5[0:0] =  0 ;
X                d_0_T5[0:0] =  1 ;
X                c_1_T5[0:0] = ((c_0_T5[0:0]  (T4[0:0] + 0' ))+(d_0_T5[0:0]  (T4[0:0]   0' )));
X                d_1_T5[0:0] = ((c_0_T5[0:0]  (T4[0:0]'   0 ))+(d_0_T5[0:0]  (T4[0:0]' + 0 )));
X                c_2_T5[0:0] = ((c_1_T5[0:0]  (T4[1:1] + 0' ))+(d_1_T5[0:0]  (T4[1:1]   0' )));
X                d_2_T5[0:0] = ((c_1_T5[0:0]  (T4[1:1]'   0 ))+(d_1_T5[0:0]  (T4[1:1]' + 0 )));
X                c_3_T5[0:0] = ((c_2_T5[0:0]  (T4[2:2] + 0' ))+(d_2_T5[0:0]  (T4[2:2]   0' )));
X                d_3_T5[0:0] = ((c_2_T5[0:0]  (T4[2:2]'   0 ))+(d_2_T5[0:0]  (T4[2:2]' + 0 )));
X                c_4_T5[0:0] = ((c_3_T5[0:0]  (T4[3:3] + 0' ))+(d_3_T5[0:0]  (T4[3:3]   0' )));
X                d_4_T5[0:0] = ((c_3_T5[0:0]  (T4[3:3]'   0 ))+(d_3_T5[0:0]  (T4[3:3]' + 0 )));
X                c_5_T5[0:0] = ((c_4_T5[0:0]  (T4[4:4] + 0' ))+(d_4_T5[0:0]  (T4[4:4]   0' )));
X                d_5_T5[0:0] = ((c_4_T5[0:0]  (T4[4:4]'   0 ))+(d_4_T5[0:0]  (T4[4:4]' + 0 )));
X                c_6_T5[0:0] = ((c_5_T5[0:0]  (T4[5:5] + 0' ))+(d_5_T5[0:0]  (T4[5:5]   0' )));
X                d_6_T5[0:0] = ((c_5_T5[0:0]  (T4[5:5]'   0 ))+(d_5_T5[0:0]  (T4[5:5]' + 0 )));
X                c_7_T5[0:0] = ((c_6_T5[0:0]  (T4[6:6] + 0' ))+(d_6_T5[0:0]  (T4[6:6]   0' )));
X                d_7_T5[0:0] = ((c_6_T5[0:0]  (T4[6:6]'   0 ))+(d_6_T5[0:0]  (T4[6:6]' + 0 )));
X                c_8_T5[0:0] = ((c_7_T5[0:0]  (T4[7:7] + 0' ))+(d_7_T5[0:0]  (T4[7:7]   0' )));
X                d_8_T5[0:0] = ((c_7_T5[0:0]  (T4[7:7]'   0 ))+(d_7_T5[0:0]  (T4[7:7]' + 0 )));
X                T5[0:0] = c_8_T5[0:0] ;
X                T6[0:0] = T5[0:0]' ;
X                .attribute delay 35 level;
X                .attribute area 952 literal;
X              .endoperation;
X            .endnode;
X
X            .node 3 nop;	#	sink node
X              .successors ;	#  predecessors 2 
X            .endnode;
X
X            .endpolargraph;
X          .attribute hercules loop_load tmp[15:15] T3[15:15] ;
X          .attribute hercules loop_load tmp[14:14] T3[14:14] ;
X          .attribute hercules loop_load tmp[13:13] T3[13:13] ;
X          .attribute hercules loop_load tmp[12:12] T3[12:12] ;
X          .attribute hercules loop_load tmp[11:11] T3[11:11] ;
X          .attribute hercules loop_load tmp[10:10] T3[10:10] ;
X          .attribute hercules loop_load tmp[9:9] T3[9:9] ;
X          .attribute hercules loop_load tmp[8:8] T3[8:8] ;
X          .attribute hercules loop_load tmp[7:7] T3[7:7] ;
X          .attribute hercules loop_load tmp[6:6] T3[6:6] ;
X          .attribute hercules loop_load tmp[5:5] T3[5:5] ;
X          .attribute hercules loop_load tmp[4:4] T3[4:4] ;
X          .attribute hercules loop_load tmp[3:3] T3[3:3] ;
X          .attribute hercules loop_load tmp[2:2] T3[2:2] ;
X          .attribute hercules loop_load tmp[1:1] T3[1:1] ;
X          .attribute hercules loop_load tmp[0:0] T3[0:0] ;
X          .attribute hercules loop_load count[7:7] T4[7:7] ;
X          .attribute hercules loop_load count[6:6] T4[6:6] ;
X          .attribute hercules loop_load count[5:5] T4[5:5] ;
X          .attribute hercules loop_load count[4:4] T4[4:4] ;
X          .attribute hercules loop_load count[3:3] T4[3:3] ;
X          .attribute hercules loop_load count[2:2] T4[2:2] ;
X          .attribute hercules loop_load count[1:1] T4[1:1] ;
X          .attribute hercules loop_load count[0:0] T4[0:0] ;
X          .endloop;
X        .endnode;
X
X        .node 4 nop;	#	sink node
X          .successors ;	#  predecessors 3 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .case 0 ;
X        #	Index 4
X        .polargraph 1 2;
X        #	2 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 nop;	#	sink node
X          .successors ;	#  predecessors 1 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 4 operation;
X      .inputs T2[0:0] tmp[15:15] tmp[14:14] tmp[13:13] 
X	tmp[12:12] tmp[11:11] tmp[10:10] tmp[9:9] 
X	tmp[8:8] tmp[7:7] tmp[6:6] tmp[5:5] 
X	tmp[4:4] tmp[3:3] tmp[2:2] tmp[1:1] 
X	tmp[0:0] ;
X      .outputs M1[0:0] M1[1:1] M1[2:2] M1[3:3] 
X	M1[4:4] M1[5:5] M1[6:6] M1[7:7] 
X	M1[8:8] M1[9:9] M1[10:10] M1[11:11] 
X	M1[12:12] M1[13:13] M1[14:14] M1[15:15] 
X	;
X      .successors 5 ;	#  predecessors 3 
X      .operation logic 3 ;
X        #	Expression 0
X        M1[0:0] = X16[0:0] ;
X        M1[1:1] = X15[0:0] ;
X        M1[2:2] = X14[0:0] ;
X        M1[3:3] = X13[0:0] ;
X        M1[4:4] = X12[0:0] ;
X        M1[5:5] = X11[0:0] ;
X        M1[6:6] = X10[0:0] ;
X        M1[7:7] = X9[0:0] ;
X        M1[8:8] = X8[0:0] ;
X        M1[9:9] = X7[0:0] ;
X        M1[10:10] = X6[0:0] ;
X        M1[11:11] = X5[0:0] ;
X        M1[12:12] = X4[0:0] ;
X        M1[13:13] = X3[0:0] ;
X        M1[14:14] = X2[0:0] ;
X        M1[15:15] = X1[0:0] ;
X        X1[0:0] = ((V1_T2_0_0[0:0]  tmp[15:15] )+ 0 );
X        X2[0:0] = ((V1_T2_0_0[0:0]  tmp[14:14] )+ 0 );
X        X3[0:0] = ((V1_T2_0_0[0:0]  tmp[13:13] )+ 0 );
X        X4[0:0] = ((V1_T2_0_0[0:0]  tmp[12:12] )+ 0 );
X        X5[0:0] = ((V1_T2_0_0[0:0]  tmp[11:11] )+ 0 );
X        X6[0:0] = ((V1_T2_0_0[0:0]  tmp[10:10] )+ 0 );
X        X7[0:0] = ((V1_T2_0_0[0:0]  tmp[9:9] )+ 0 );
X        X8[0:0] = ((V1_T2_0_0[0:0]  tmp[8:8] )+ 0 );
X        X9[0:0] = ((V1_T2_0_0[0:0]  tmp[7:7] )+ 0 );
X        X10[0:0] = ((V1_T2_0_0[0:0]  tmp[6:6] )+ 0 );
X        X11[0:0] = ((V1_T2_0_0[0:0]  tmp[5:5] )+ 0 );
X        X12[0:0] = ((V1_T2_0_0[0:0]  tmp[4:4] )+ 0 );
X        X13[0:0] = ((V1_T2_0_0[0:0]  tmp[3:3] )+ 0 );
X        X14[0:0] = ((V1_T2_0_0[0:0]  tmp[2:2] )+ 0 );
X        X15[0:0] = ((V1_T2_0_0[0:0]  tmp[1:1] )+ 0 );
X        X16[0:0] = ((V1_T2_0_0[0:0]  tmp[0:0] )+ 0 );
X        V1_T2_0_0[0:0] = T2[0:0] ;
X        .attribute delay 2 level;
X        .attribute area 97 literal;
X      .endoperation;
X    .endnode;
X
X    .node 5 nop;	#	sink node
X      .successors ;	#  predecessors 4 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] M1[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] M1[1:1] ;
X    .attribute hercules direct_connect return_value[2:2] M1[2:2] ;
X    .attribute hercules direct_connect return_value[3:3] M1[3:3] ;
X    .attribute hercules direct_connect return_value[4:4] M1[4:4] ;
X    .attribute hercules direct_connect return_value[5:5] M1[5:5] ;
X    .attribute hercules direct_connect return_value[6:6] M1[6:6] ;
X    .attribute hercules direct_connect return_value[7:7] M1[7:7] ;
X    .attribute hercules direct_connect return_value[8:8] M1[8:8] ;
X    .attribute hercules direct_connect return_value[9:9] M1[9:9] ;
X    .attribute hercules direct_connect return_value[10:10] M1[10:10] ;
X    .attribute hercules direct_connect return_value[11:11] M1[11:11] ;
X    .attribute hercules direct_connect return_value[12:12] M1[12:12] ;
X    .attribute hercules direct_connect return_value[13:13] M1[13:13] ;
X    .attribute hercules direct_connect return_value[14:14] M1[14:14] ;
X    .attribute hercules direct_connect return_value[15:15] M1[15:15] ;
X    .endpolargraph;
X.endmodel multiply_8 ;
END_OF_FILE
if test 17409 -ne `wc -c <'tseng/multiply_8.sif'`; then
    echo shar: \"'tseng/multiply_8.sif'\" unpacked with wrong size!
fi
# end of 'tseng/multiply_8.sif'
fi
if test -f 'tseng/smultiply_8.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/smultiply_8.sif'\"
else
echo shar: Extracting \"'tseng/smultiply_8.sif'\" \(13196 characters\)
sed "s/^X//" >'tseng/smultiply_8.sif' <<'END_OF_FILE'
X#
X#	Sif model smultiply_8	Printed Tue Jul 24 15:05:34 1990
X#
X.model smultiply_8 sequencing ; 
X  .inputs op1[8] op2[8] ;
X  .outputs return_value[8] ;
X    #	Index 1
X    .polargraph 1 5;
X    .variable M1[8] T4[9] T3[9] T6 
X	T2 T1 ;
X    .variable register tmp[8] register count[8] ;
X    #	5 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	;
X      .outputs T1[0:0] ;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        c_0_T1[0:0] =  0 ;
X        d_0_T1[0:0] =  1 ;
X        c_1_T1[0:0] = ((c_0_T1[0:0]  (op2[0:0] + 0' ))+(d_0_T1[0:0]  (op2[0:0]   0' )));
X        d_1_T1[0:0] = ((c_0_T1[0:0]  (op2[0:0]'   0 ))+(d_0_T1[0:0]  (op2[0:0]' + 0 )));
X        c_2_T1[0:0] = ((c_1_T1[0:0]  (op2[1:1] + 0' ))+(d_1_T1[0:0]  (op2[1:1]   0' )));
X        d_2_T1[0:0] = ((c_1_T1[0:0]  (op2[1:1]'   0 ))+(d_1_T1[0:0]  (op2[1:1]' + 0 )));
X        c_3_T1[0:0] = ((c_2_T1[0:0]  (op2[2:2] + 0' ))+(d_2_T1[0:0]  (op2[2:2]   0' )));
X        d_3_T1[0:0] = ((c_2_T1[0:0]  (op2[2:2]'   0 ))+(d_2_T1[0:0]  (op2[2:2]' + 0 )));
X        c_4_T1[0:0] = ((c_3_T1[0:0]  (op2[3:3] + 0' ))+(d_3_T1[0:0]  (op2[3:3]   0' )));
X        d_4_T1[0:0] = ((c_3_T1[0:0]  (op2[3:3]'   0 ))+(d_3_T1[0:0]  (op2[3:3]' + 0 )));
X        c_5_T1[0:0] = ((c_4_T1[0:0]  (op2[4:4] + 0' ))+(d_4_T1[0:0]  (op2[4:4]   0' )));
X        d_5_T1[0:0] = ((c_4_T1[0:0]  (op2[4:4]'   0 ))+(d_4_T1[0:0]  (op2[4:4]' + 0 )));
X        c_6_T1[0:0] = ((c_5_T1[0:0]  (op2[5:5] + 0' ))+(d_5_T1[0:0]  (op2[5:5]   0' )));
X        d_6_T1[0:0] = ((c_5_T1[0:0]  (op2[5:5]'   0 ))+(d_5_T1[0:0]  (op2[5:5]' + 0 )));
X        c_7_T1[0:0] = ((c_6_T1[0:0]  (op2[6:6] + 0' ))+(d_6_T1[0:0]  (op2[6:6]   0' )));
X        d_7_T1[0:0] = ((c_6_T1[0:0]  (op2[6:6]'   0 ))+(d_6_T1[0:0]  (op2[6:6]' + 0 )));
X        c_8_T1[0:0] = ((c_7_T1[0:0]  (op2[7:7] + 0' ))+(d_7_T1[0:0]  (op2[7:7]   0' )));
X        d_8_T1[0:0] = ((c_7_T1[0:0]  (op2[7:7]'   0 ))+(d_7_T1[0:0]  (op2[7:7]' + 0 )));
X        T1[0:0] = c_8_T1[0:0] ;
X        .attribute delay 17 level;
X        .attribute area 179 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 cond;
X      .successors 4 ;	#  predecessors 2 
X      .cond T1[0:0] T2[0:0] ;	#	Latched
X      .case 1 ;
X        #	Index 2
X        .polargraph 1 4;
X        #	4 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs 0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	op2[7:7] op2[6:6] op2[5:5] op2[4:4] 
X	op2[3:3] op2[2:2] op2[1:1] op2[0:0] 
X	;
X          .outputs tmp[7:7] tmp[6:6] tmp[5:5] tmp[4:4] 
X	tmp[3:3] tmp[2:2] tmp[1:1] tmp[0:0] 
X	count[7:7] count[6:6] count[5:5] count[4:4] 
X	count[3:3] count[2:2] count[1:1] count[0:0] 
X	;
X          .successors 3 ;	#  predecessors 1 
X          .attribute constraint delay 2 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 3 loop;
X          .successors 4 ;	#  predecessors 2 
X          .loop T6[0:0] ;	#	
X            #	Index 3
X            .polargraph 1 3;
X            #	3 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 operation;
X              .inputs tmp[0:0] tmp[1:1] tmp[2:2] tmp[3:3] 
X	tmp[4:4] tmp[5:5] tmp[6:6] tmp[7:7] 
X	op1[0:0] op1[1:1] op1[2:2] op1[3:3] 
X	op1[4:4] op1[5:5] op1[6:6] op1[7:7] 
X	count[0:0] count[1:1] count[2:2] count[3:3] 
X	count[4:4] count[5:5] count[6:6] count[7:7] 
X	;
X              .outputs T3[0:0] T3[1:1] T3[2:2] T3[3:3] 
X	T3[4:4] T3[5:5] T3[6:6] T3[7:7] 
X	T4[0:0] T4[1:1] T4[2:2] T4[3:3] 
X	T4[4:4] T4[5:5] T4[6:6] T4[7:7] 
X	T6[0:0] ;
X              .successors 3 ;	#  predecessors 1 
X              .operation logic 2 ;
X                #	Expression 0
X                c_T3[0:0] =  0 ;
X                T3[0:0] = (((((tmp[0:0]'  op1[0:0] ) c_T3[0:0]' )+((tmp[0:0]  op1[0:0]' ) c_T3[0:0]' ))+((tmp[0:0]'  op1[0:0]' ) c_T3[0:0] ))+((tmp[0:0]  op1[0:0] ) c_T3[0:0] ));
X                c_T3[1:1] = ((tmp[0:0]  op1[0:0] )+(c_T3[0:0]  (tmp[0:0] +op1[0:0] )));
X                T3[1:1] = (((((tmp[1:1]'  op1[1:1] ) c_T3[1:1]' )+((tmp[1:1]  op1[1:1]' ) c_T3[1:1]' ))+((tmp[1:1]'  op1[1:1]' ) c_T3[1:1] ))+((tmp[1:1]  op1[1:1] ) c_T3[1:1] ));
X                c_T3[2:2] = ((tmp[1:1]  op1[1:1] )+(c_T3[1:1]  (tmp[1:1] +op1[1:1] )));
X                T3[2:2] = (((((tmp[2:2]'  op1[2:2] ) c_T3[2:2]' )+((tmp[2:2]  op1[2:2]' ) c_T3[2:2]' ))+((tmp[2:2]'  op1[2:2]' ) c_T3[2:2] ))+((tmp[2:2]  op1[2:2] ) c_T3[2:2] ));
X                c_T3[3:3] = ((tmp[2:2]  op1[2:2] )+(c_T3[2:2]  (tmp[2:2] +op1[2:2] )));
X                T3[3:3] = (((((tmp[3:3]'  op1[3:3] ) c_T3[3:3]' )+((tmp[3:3]  op1[3:3]' ) c_T3[3:3]' ))+((tmp[3:3]'  op1[3:3]' ) c_T3[3:3] ))+((tmp[3:3]  op1[3:3] ) c_T3[3:3] ));
X                c_T3[4:4] = ((tmp[3:3]  op1[3:3] )+(c_T3[3:3]  (tmp[3:3] +op1[3:3] )));
X                T3[4:4] = (((((tmp[4:4]'  op1[4:4] ) c_T3[4:4]' )+((tmp[4:4]  op1[4:4]' ) c_T3[4:4]' ))+((tmp[4:4]'  op1[4:4]' ) c_T3[4:4] ))+((tmp[4:4]  op1[4:4] ) c_T3[4:4] ));
X                c_T3[5:5] = ((tmp[4:4]  op1[4:4] )+(c_T3[4:4]  (tmp[4:4] +op1[4:4] )));
X                T3[5:5] = (((((tmp[5:5]'  op1[5:5] ) c_T3[5:5]' )+((tmp[5:5]  op1[5:5]' ) c_T3[5:5]' ))+((tmp[5:5]'  op1[5:5]' ) c_T3[5:5] ))+((tmp[5:5]  op1[5:5] ) c_T3[5:5] ));
X                c_T3[6:6] = ((tmp[5:5]  op1[5:5] )+(c_T3[5:5]  (tmp[5:5] +op1[5:5] )));
X                T3[6:6] = (((((tmp[6:6]'  op1[6:6] ) c_T3[6:6]' )+((tmp[6:6]  op1[6:6]' ) c_T3[6:6]' ))+((tmp[6:6]'  op1[6:6]' ) c_T3[6:6] ))+((tmp[6:6]  op1[6:6] ) c_T3[6:6] ));
X                c_T3[7:7] = ((tmp[6:6]  op1[6:6] )+(c_T3[6:6]  (tmp[6:6] +op1[6:6] )));
X                T3[7:7] = (((((tmp[7:7]'  op1[7:7] ) c_T3[7:7]' )+((tmp[7:7]  op1[7:7]' ) c_T3[7:7]' ))+((tmp[7:7]'  op1[7:7]' ) c_T3[7:7] ))+((tmp[7:7]  op1[7:7] ) c_T3[7:7] ));
X                c_T3[8:8] = ((tmp[7:7]  op1[7:7] )+(c_T3[7:7]  (tmp[7:7] +op1[7:7] )));
X                T3[8:8] = c_T3[7:7] ;
X                c_T4[0:0] =  1 ;
X                T4[0:0] = (((((count[0:0]'   1' ) c_T4[0:0]' )+((count[0:0]   1 ) c_T4[0:0]' ))+((count[0:0]'   1 ) c_T4[0:0] ))+((count[0:0]   1' ) c_T4[0:0] ));
X                c_T4[1:1] = ((count[0:0]   1' )+(c_T4[0:0]  (count[0:0] + 1' )));
X                T4[1:1] = (((((count[1:1]'   0' ) c_T4[1:1]' )+((count[1:1]   0 ) c_T4[1:1]' ))+((count[1:1]'   0 ) c_T4[1:1] ))+((count[1:1]   0' ) c_T4[1:1] ));
X                c_T4[2:2] = ((count[1:1]   0' )+(c_T4[1:1]  (count[1:1] + 0' )));
X                T4[2:2] = (((((count[2:2]'   0' ) c_T4[2:2]' )+((count[2:2]   0 ) c_T4[2:2]' ))+((count[2:2]'   0 ) c_T4[2:2] ))+((count[2:2]   0' ) c_T4[2:2] ));
X                c_T4[3:3] = ((count[2:2]   0' )+(c_T4[2:2]  (count[2:2] + 0' )));
X                T4[3:3] = (((((count[3:3]'   0' ) c_T4[3:3]' )+((count[3:3]   0 ) c_T4[3:3]' ))+((count[3:3]'   0 ) c_T4[3:3] ))+((count[3:3]   0' ) c_T4[3:3] ));
X                c_T4[4:4] = ((count[3:3]   0' )+(c_T4[3:3]  (count[3:3] + 0' )));
X                T4[4:4] = (((((count[4:4]'   0' ) c_T4[4:4]' )+((count[4:4]   0 ) c_T4[4:4]' ))+((count[4:4]'   0 ) c_T4[4:4] ))+((count[4:4]   0' ) c_T4[4:4] ));
X                c_T4[5:5] = ((count[4:4]   0' )+(c_T4[4:4]  (count[4:4] + 0' )));
X                T4[5:5] = (((((count[5:5]'   0' ) c_T4[5:5]' )+((count[5:5]   0 ) c_T4[5:5]' ))+((count[5:5]'   0 ) c_T4[5:5] ))+((count[5:5]   0' ) c_T4[5:5] ));
X                c_T4[6:6] = ((count[5:5]   0' )+(c_T4[5:5]  (count[5:5] + 0' )));
X                T4[6:6] = (((((count[6:6]'   0' ) c_T4[6:6]' )+((count[6:6]   0 ) c_T4[6:6]' ))+((count[6:6]'   0 ) c_T4[6:6] ))+((count[6:6]   0' ) c_T4[6:6] ));
X                c_T4[7:7] = ((count[6:6]   0' )+(c_T4[6:6]  (count[6:6] + 0' )));
X                T4[7:7] = (((((count[7:7]'   0' ) c_T4[7:7]' )+((count[7:7]   0 ) c_T4[7:7]' ))+((count[7:7]'   0 ) c_T4[7:7] ))+((count[7:7]   0' ) c_T4[7:7] ));
X                c_T4[8:8] = ((count[7:7]   0' )+(c_T4[7:7]  (count[7:7] + 0' )));
X                T4[8:8] = c_T4[7:7] ;
X                c_0_T5[0:0] =  0 ;
X                d_0_T5[0:0] =  1 ;
X                c_1_T5[0:0] = ((c_0_T5[0:0]  (T4[0:0] + 0' ))+(d_0_T5[0:0]  (T4[0:0]   0' )));
X                d_1_T5[0:0] = ((c_0_T5[0:0]  (T4[0:0]'   0 ))+(d_0_T5[0:0]  (T4[0:0]' + 0 )));
X                c_2_T5[0:0] = ((c_1_T5[0:0]  (T4[1:1] + 0' ))+(d_1_T5[0:0]  (T4[1:1]   0' )));
X                d_2_T5[0:0] = ((c_1_T5[0:0]  (T4[1:1]'   0 ))+(d_1_T5[0:0]  (T4[1:1]' + 0 )));
X                c_3_T5[0:0] = ((c_2_T5[0:0]  (T4[2:2] + 0' ))+(d_2_T5[0:0]  (T4[2:2]   0' )));
X                d_3_T5[0:0] = ((c_2_T5[0:0]  (T4[2:2]'   0 ))+(d_2_T5[0:0]  (T4[2:2]' + 0 )));
X                c_4_T5[0:0] = ((c_3_T5[0:0]  (T4[3:3] + 0' ))+(d_3_T5[0:0]  (T4[3:3]   0' )));
X                d_4_T5[0:0] = ((c_3_T5[0:0]  (T4[3:3]'   0 ))+(d_3_T5[0:0]  (T4[3:3]' + 0 )));
X                c_5_T5[0:0] = ((c_4_T5[0:0]  (T4[4:4] + 0' ))+(d_4_T5[0:0]  (T4[4:4]   0' )));
X                d_5_T5[0:0] = ((c_4_T5[0:0]  (T4[4:4]'   0 ))+(d_4_T5[0:0]  (T4[4:4]' + 0 )));
X                c_6_T5[0:0] = ((c_5_T5[0:0]  (T4[5:5] + 0' ))+(d_5_T5[0:0]  (T4[5:5]   0' )));
X                d_6_T5[0:0] = ((c_5_T5[0:0]  (T4[5:5]'   0 ))+(d_5_T5[0:0]  (T4[5:5]' + 0 )));
X                c_7_T5[0:0] = ((c_6_T5[0:0]  (T4[6:6] + 0' ))+(d_6_T5[0:0]  (T4[6:6]   0' )));
X                d_7_T5[0:0] = ((c_6_T5[0:0]  (T4[6:6]'   0 ))+(d_6_T5[0:0]  (T4[6:6]' + 0 )));
X                c_8_T5[0:0] = ((c_7_T5[0:0]  (T4[7:7] + 0' ))+(d_7_T5[0:0]  (T4[7:7]   0' )));
X                d_8_T5[0:0] = ((c_7_T5[0:0]  (T4[7:7]'   0 ))+(d_7_T5[0:0]  (T4[7:7]' + 0 )));
X                T5[0:0] = c_8_T5[0:0] ;
X                T6[0:0] = T5[0:0]' ;
X                .attribute delay 22 level;
X                .attribute area 696 literal;
X              .endoperation;
X            .endnode;
X
X            .node 3 nop;	#	sink node
X              .successors ;	#  predecessors 2 
X            .endnode;
X
X            .endpolargraph;
X          .attribute hercules loop_load tmp[7:7] T3[7:7] ;
X          .attribute hercules loop_load tmp[6:6] T3[6:6] ;
X          .attribute hercules loop_load tmp[5:5] T3[5:5] ;
X          .attribute hercules loop_load tmp[4:4] T3[4:4] ;
X          .attribute hercules loop_load tmp[3:3] T3[3:3] ;
X          .attribute hercules loop_load tmp[2:2] T3[2:2] ;
X          .attribute hercules loop_load tmp[1:1] T3[1:1] ;
X          .attribute hercules loop_load tmp[0:0] T3[0:0] ;
X          .attribute hercules loop_load count[7:7] T4[7:7] ;
X          .attribute hercules loop_load count[6:6] T4[6:6] ;
X          .attribute hercules loop_load count[5:5] T4[5:5] ;
X          .attribute hercules loop_load count[4:4] T4[4:4] ;
X          .attribute hercules loop_load count[3:3] T4[3:3] ;
X          .attribute hercules loop_load count[2:2] T4[2:2] ;
X          .attribute hercules loop_load count[1:1] T4[1:1] ;
X          .attribute hercules loop_load count[0:0] T4[0:0] ;
X          .endloop;
X        .endnode;
X
X        .node 4 nop;	#	sink node
X          .successors ;	#  predecessors 3 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .case 0 ;
X        #	Index 4
X        .polargraph 1 2;
X        #	2 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 nop;	#	sink node
X          .successors ;	#  predecessors 1 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 4 operation;
X      .inputs T2[0:0] tmp[7:7] tmp[6:6] tmp[5:5] 
X	tmp[4:4] tmp[3:3] tmp[2:2] tmp[1:1] 
X	tmp[0:0] ;
X      .outputs M1[0:0] M1[1:1] M1[2:2] M1[3:3] 
X	M1[4:4] M1[5:5] M1[6:6] M1[7:7] 
X	;
X      .successors 5 ;	#  predecessors 3 
X      .operation logic 3 ;
X        #	Expression 0
X        M1[0:0] = X8[0:0] ;
X        M1[1:1] = X7[0:0] ;
X        M1[2:2] = X6[0:0] ;
X        M1[3:3] = X5[0:0] ;
X        M1[4:4] = X4[0:0] ;
X        M1[5:5] = X3[0:0] ;
X        M1[6:6] = X2[0:0] ;
X        M1[7:7] = X1[0:0] ;
X        X1[0:0] = ((V1_T2_0_0[0:0]  tmp[7:7] )+ 0 );
X        X2[0:0] = ((V1_T2_0_0[0:0]  tmp[6:6] )+ 0 );
X        X3[0:0] = ((V1_T2_0_0[0:0]  tmp[5:5] )+ 0 );
X        X4[0:0] = ((V1_T2_0_0[0:0]  tmp[4:4] )+ 0 );
X        X5[0:0] = ((V1_T2_0_0[0:0]  tmp[3:3] )+ 0 );
X        X6[0:0] = ((V1_T2_0_0[0:0]  tmp[2:2] )+ 0 );
X        X7[0:0] = ((V1_T2_0_0[0:0]  tmp[1:1] )+ 0 );
X        X8[0:0] = ((V1_T2_0_0[0:0]  tmp[0:0] )+ 0 );
X        V1_T2_0_0[0:0] = T2[0:0] ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 5 nop;	#	sink node
X      .successors ;	#  predecessors 4 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] M1[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] M1[1:1] ;
X    .attribute hercules direct_connect return_value[2:2] M1[2:2] ;
X    .attribute hercules direct_connect return_value[3:3] M1[3:3] ;
X    .attribute hercules direct_connect return_value[4:4] M1[4:4] ;
X    .attribute hercules direct_connect return_value[5:5] M1[5:5] ;
X    .attribute hercules direct_connect return_value[6:6] M1[6:6] ;
X    .attribute hercules direct_connect return_value[7:7] M1[7:7] ;
X    .endpolargraph;
X.endmodel smultiply_8 ;
END_OF_FILE
if test 13196 -ne `wc -c <'tseng/smultiply_8.sif'`; then
    echo shar: \"'tseng/smultiply_8.sif'\" unpacked with wrong size!
fi
# end of 'tseng/smultiply_8.sif'
fi
if test -f 'tseng/subtract_8.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/subtract_8.sif'\"
else
echo shar: Extracting \"'tseng/subtract_8.sif'\" \(3369 characters\)
sed "s/^X//" >'tseng/subtract_8.sif' <<'END_OF_FILE'
X#
X#	Sif model subtract_8	Printed Tue Jul 24 15:05:40 1990
X#
X.model subtract_8 sequencing ; 
X  .inputs op1[8] op2[8] ;
X  .outputs return_value[9] ;
X    #	Index 1
X    .polargraph 1 4;
X    .variable T2[9] T1[9] ;
X    #	4 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	;
X      .outputs T1[0:0] T1[1:1] T1[2:2] T1[3:3] 
X	T1[4:4] T1[5:5] T1[6:6] T1[7:7] 
X	;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        c_T1[0:0] =  1 ;
X        T1[0:0] = ((((( 0'  op2[0:0]' ) c_T1[0:0]' )+(( 0  op2[0:0] ) c_T1[0:0]' ))+(( 0'  op2[0:0] ) c_T1[0:0] ))+(( 0  op2[0:0]' ) c_T1[0:0] ));
X        c_T1[1:1] = (( 0  op2[0:0]' )+(c_T1[0:0]  ( 0 +op2[0:0]' )));
X        T1[1:1] = ((((( 0'  op2[1:1]' ) c_T1[1:1]' )+(( 0  op2[1:1] ) c_T1[1:1]' ))+(( 0'  op2[1:1] ) c_T1[1:1] ))+(( 0  op2[1:1]' ) c_T1[1:1] ));
X        c_T1[2:2] = (( 0  op2[1:1]' )+(c_T1[1:1]  ( 0 +op2[1:1]' )));
X        T1[2:2] = ((((( 0'  op2[2:2]' ) c_T1[2:2]' )+(( 0  op2[2:2] ) c_T1[2:2]' ))+(( 0'  op2[2:2] ) c_T1[2:2] ))+(( 0  op2[2:2]' ) c_T1[2:2] ));
X        c_T1[3:3] = (( 0  op2[2:2]' )+(c_T1[2:2]  ( 0 +op2[2:2]' )));
X        T1[3:3] = ((((( 0'  op2[3:3]' ) c_T1[3:3]' )+(( 0  op2[3:3] ) c_T1[3:3]' ))+(( 0'  op2[3:3] ) c_T1[3:3] ))+(( 0  op2[3:3]' ) c_T1[3:3] ));
X        c_T1[4:4] = (( 0  op2[3:3]' )+(c_T1[3:3]  ( 0 +op2[3:3]' )));
X        T1[4:4] = ((((( 0'  op2[4:4]' ) c_T1[4:4]' )+(( 0  op2[4:4] ) c_T1[4:4]' ))+(( 0'  op2[4:4] ) c_T1[4:4] ))+(( 0  op2[4:4]' ) c_T1[4:4] ));
X        c_T1[5:5] = (( 0  op2[4:4]' )+(c_T1[4:4]  ( 0 +op2[4:4]' )));
X        T1[5:5] = ((((( 0'  op2[5:5]' ) c_T1[5:5]' )+(( 0  op2[5:5] ) c_T1[5:5]' ))+(( 0'  op2[5:5] ) c_T1[5:5] ))+(( 0  op2[5:5]' ) c_T1[5:5] ));
X        c_T1[6:6] = (( 0  op2[5:5]' )+(c_T1[5:5]  ( 0 +op2[5:5]' )));
X        T1[6:6] = ((((( 0'  op2[6:6]' ) c_T1[6:6]' )+(( 0  op2[6:6] ) c_T1[6:6]' ))+(( 0'  op2[6:6] ) c_T1[6:6] ))+(( 0  op2[6:6]' ) c_T1[6:6] ));
X        c_T1[7:7] = (( 0  op2[6:6]' )+(c_T1[6:6]  ( 0 +op2[6:6]' )));
X        T1[7:7] = ((((( 0'  op2[7:7]' ) c_T1[7:7]' )+(( 0  op2[7:7] ) c_T1[7:7]' ))+(( 0'  op2[7:7] ) c_T1[7:7] ))+(( 0  op2[7:7]' ) c_T1[7:7] ));
X        c_T1[8:8] = (( 0  op2[7:7]' )+(c_T1[7:7]  ( 0 +op2[7:7]' )));
X        T1[8:8] = c_T1[7:7] ;
X        .attribute delay 19 level;
X        .attribute area 258 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 proc;
X      .inputs op1[0:7] T1[0:7] ;
X      .outputs T2[0:8] ;
X      .successors 4 ;	#  predecessors 2 
X      .proc add with (8);
X    .endnode;
X
X    .node 4 nop;	#	sink node
X      .successors ;	#  predecessors 3 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] T2[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] T2[1:1] ;
X    .attribute hercules direct_connect return_value[2:2] T2[2:2] ;
X    .attribute hercules direct_connect return_value[3:3] T2[3:3] ;
X    .attribute hercules direct_connect return_value[4:4] T2[4:4] ;
X    .attribute hercules direct_connect return_value[5:5] T2[5:5] ;
X    .attribute hercules direct_connect return_value[6:6] T2[6:6] ;
X    .attribute hercules direct_connect return_value[7:7] T2[7:7] ;
X    .attribute hercules direct_connect return_value[8:8] T2[8:8] ;
X    .endpolargraph;
X.endmodel subtract_8 ;
END_OF_FILE
if test 3369 -ne `wc -c <'tseng/subtract_8.sif'`; then
    echo shar: \"'tseng/subtract_8.sif'\" unpacked with wrong size!
fi
# end of 'tseng/subtract_8.sif'
fi
if test -f 'tseng/tmultiply_8.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/tmultiply_8.sif'\"
else
echo shar: Extracting \"'tseng/tmultiply_8.sif'\" \(21376 characters\)
sed "s/^X//" >'tseng/tmultiply_8.sif' <<'END_OF_FILE'
X#
X#	Sif model tmultiply_8	Printed Tue Jul 24 15:05:47 1990
X#
X.model tmultiply_8 sequencing ; 
X  .inputs op1[8] op2[8] ;
X  .outputs return_value[8] ;
X    #	Index 1
X    .polargraph 1 5;
X    .variable X17 X18 X19 X20 
X	X21 X22 X23 X24 
X	T12[9] T11[9] X1 X2 
X	X3 X4 X5 X6 
X	X7 X8 T14 T10 
X	T9 T7 T6 T5 
X	;
X    .variable register tmp[8] register count[8] ;
X    #	5 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op1[0:0] op1[1:1] op1[2:2] op1[3:3] 
X	op1[4:4] op1[5:5] op1[6:6] op1[7:7] 
X	op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	;
X      .outputs T5[0:0] ;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        T1[0:0] = V00000000_op1_0_7[0:0] ;
X        T2[0:0] = (V0_T1_0_0[0:0] )';
X        T3[0:0] = V00000000_op2_0_7[0:0] ;
X        T4[0:0] = (V0_T3_0_0[0:0] )';
X        T5[0:0] = (T2[0:0] +T4[0:0] );
X        V0_T3_0_0[0:0] = T3[0:0]' ;
X        V00000000_op2_0_7[0:0] = (((((((op2[0:0]'  op2[1:1]' ) op2[2:2]' ) op2[3:3]' ) op2[4:4]' ) op2[5:5]' ) op2[6:6]' ) op2[7:7]' );
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        V00000000_op1_0_7[0:0] = (((((((op1[0:0]'  op1[1:1]' ) op1[2:2]' ) op1[3:3]' ) op1[4:4]' ) op1[5:5]' ) op1[6:6]' ) op1[7:7]' );
X        .attribute delay 9 level;
X        .attribute area 41 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 cond;
X      .successors 4 ;	#  predecessors 2 
X      .cond T5[0:0] T6[0:0] ;	#	Latched
X      .case 1 ;
X        #	Index 2
X        .polargraph 1 2;
X        #	2 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 nop;	#	sink node
X          .successors ;	#  predecessors 1 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .case 0 ;
X        #	Index 3
X        .polargraph 1 5;
X        #	5 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs op1[0:0] op1[1:1] op1[2:2] op1[3:3] 
X	op1[4:4] op1[5:5] op1[6:6] op1[7:7] 
X	op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	;
X          .outputs T7[0:0] ;
X          .successors 3 ;	#  predecessors 1 
X          .operation logic 2 ;
X            #	Expression 0
X            c_0_T8[0:0] =  0 ;
X            d_0_T8[0:0] =  1 ;
X            c_1_T8[0:0] = ((c_0_T8[0:0]  (op1[0:0] +op2[0:0]' ))+(d_0_T8[0:0]  (op1[0:0]  op2[0:0]' )));
X            d_1_T8[0:0] = ((c_0_T8[0:0]  (op1[0:0]'  op2[0:0] ))+(d_0_T8[0:0]  (op1[0:0]' +op2[0:0] )));
X            c_2_T8[0:0] = ((c_1_T8[0:0]  (op1[1:1] +op2[1:1]' ))+(d_1_T8[0:0]  (op1[1:1]  op2[1:1]' )));
X            d_2_T8[0:0] = ((c_1_T8[0:0]  (op1[1:1]'  op2[1:1] ))+(d_1_T8[0:0]  (op1[1:1]' +op2[1:1] )));
X            c_3_T8[0:0] = ((c_2_T8[0:0]  (op1[2:2] +op2[2:2]' ))+(d_2_T8[0:0]  (op1[2:2]  op2[2:2]' )));
X            d_3_T8[0:0] = ((c_2_T8[0:0]  (op1[2:2]'  op2[2:2] ))+(d_2_T8[0:0]  (op1[2:2]' +op2[2:2] )));
X            c_4_T8[0:0] = ((c_3_T8[0:0]  (op1[3:3] +op2[3:3]' ))+(d_3_T8[0:0]  (op1[3:3]  op2[3:3]' )));
X            d_4_T8[0:0] = ((c_3_T8[0:0]  (op1[3:3]'  op2[3:3] ))+(d_3_T8[0:0]  (op1[3:3]' +op2[3:3] )));
X            c_5_T8[0:0] = ((c_4_T8[0:0]  (op1[4:4] +op2[4:4]' ))+(d_4_T8[0:0]  (op1[4:4]  op2[4:4]' )));
X            d_5_T8[0:0] = ((c_4_T8[0:0]  (op1[4:4]'  op2[4:4] ))+(d_4_T8[0:0]  (op1[4:4]' +op2[4:4] )));
X            c_6_T8[0:0] = ((c_5_T8[0:0]  (op1[5:5] +op2[5:5]' ))+(d_5_T8[0:0]  (op1[5:5]  op2[5:5]' )));
X            d_6_T8[0:0] = ((c_5_T8[0:0]  (op1[5:5]'  op2[5:5] ))+(d_5_T8[0:0]  (op1[5:5]' +op2[5:5] )));
X            c_7_T8[0:0] = ((c_6_T8[0:0]  (op1[6:6] +op2[6:6]' ))+(d_6_T8[0:0]  (op1[6:6]  op2[6:6]' )));
X            d_7_T8[0:0] = ((c_6_T8[0:0]  (op1[6:6]'  op2[6:6] ))+(d_6_T8[0:0]  (op1[6:6]' +op2[6:6] )));
X            c_8_T8[0:0] = ((c_7_T8[0:0]  (op1[7:7] +op2[7:7]' ))+(d_7_T8[0:0]  (op1[7:7]  op2[7:7]' )));
X            d_8_T8[0:0] = ((c_7_T8[0:0]  (op1[7:7]'  op2[7:7] ))+(d_7_T8[0:0]  (op1[7:7]' +op2[7:7] )));
X            T8[0:0] = c_8_T8[0:0] ;
X            T7[0:0] = T8[0:0] ;
X            .attribute delay 17 level;
X            .attribute area 180 literal;
X          .endoperation;
X        .endnode;
X
X        .node 3 operation;
X          .inputs T7[0:0] op2[7:7] op1[7:7] op2[6:6] 
X	op1[6:6] op2[5:5] op1[5:5] op2[4:4] 
X	op1[4:4] op2[3:3] op1[3:3] op2[2:2] 
X	op1[2:2] op2[1:1] op1[1:1] op2[0:0] 
X	op1[0:0] ;
X          .outputs X1[0:0] X2[0:0] X3[0:0] X4[0:0] 
X	X5[0:0] X6[0:0] X7[0:0] X8[0:0] 
X	T9[0:0] ;
X          .successors 4 ;	#  predecessors 2 
X          .operation logic 3 ;
X            #	Expression 0
X            M1[0:0] = X8[0:0] ;
X            M1[1:1] = X7[0:0] ;
X            M1[2:2] = X6[0:0] ;
X            M1[3:3] = X5[0:0] ;
X            M1[4:4] = X4[0:0] ;
X            M1[5:5] = X3[0:0] ;
X            M1[6:6] = X2[0:0] ;
X            M1[7:7] = X1[0:0] ;
X            X1[0:0] = ((V1_T7_0_0[0:0]  op2[7:7] )+(V0_T7_0_0[0:0]  op1[7:7] ));
X            X2[0:0] = ((V1_T7_0_0[0:0]  op2[6:6] )+(V0_T7_0_0[0:0]  op1[6:6] ));
X            X3[0:0] = ((V1_T7_0_0[0:0]  op2[5:5] )+(V0_T7_0_0[0:0]  op1[5:5] ));
X            X4[0:0] = ((V1_T7_0_0[0:0]  op2[4:4] )+(V0_T7_0_0[0:0]  op1[4:4] ));
X            X5[0:0] = ((V1_T7_0_0[0:0]  op2[3:3] )+(V0_T7_0_0[0:0]  op1[3:3] ));
X            X6[0:0] = ((V1_T7_0_0[0:0]  op2[2:2] )+(V0_T7_0_0[0:0]  op1[2:2] ));
X            X7[0:0] = ((V1_T7_0_0[0:0]  op2[1:1] )+(V0_T7_0_0[0:0]  op1[1:1] ));
X            X8[0:0] = ((V1_T7_0_0[0:0]  op2[0:0] )+(V0_T7_0_0[0:0]  op1[0:0] ));
X            c_0_T9[0:0] =  0 ;
X            d_0_T9[0:0] =  1 ;
X            c_1_T9[0:0] = ((c_0_T9[0:0]  (M1[0:0] + 0' ))+(d_0_T9[0:0]  (M1[0:0]   0' )));
X            d_1_T9[0:0] = ((c_0_T9[0:0]  (M1[0:0]'   0 ))+(d_0_T9[0:0]  (M1[0:0]' + 0 )));
X            c_2_T9[0:0] = ((c_1_T9[0:0]  (M1[1:1] + 0' ))+(d_1_T9[0:0]  (M1[1:1]   0' )));
X            d_2_T9[0:0] = ((c_1_T9[0:0]  (M1[1:1]'   0 ))+(d_1_T9[0:0]  (M1[1:1]' + 0 )));
X            c_3_T9[0:0] = ((c_2_T9[0:0]  (M1[2:2] + 0' ))+(d_2_T9[0:0]  (M1[2:2]   0' )));
X            d_3_T9[0:0] = ((c_2_T9[0:0]  (M1[2:2]'   0 ))+(d_2_T9[0:0]  (M1[2:2]' + 0 )));
X            c_4_T9[0:0] = ((c_3_T9[0:0]  (M1[3:3] + 0' ))+(d_3_T9[0:0]  (M1[3:3]   0' )));
X            d_4_T9[0:0] = ((c_3_T9[0:0]  (M1[3:3]'   0 ))+(d_3_T9[0:0]  (M1[3:3]' + 0 )));
X            c_5_T9[0:0] = ((c_4_T9[0:0]  (M1[4:4] + 0' ))+(d_4_T9[0:0]  (M1[4:4]   0' )));
X            d_5_T9[0:0] = ((c_4_T9[0:0]  (M1[4:4]'   0 ))+(d_4_T9[0:0]  (M1[4:4]' + 0 )));
X            c_6_T9[0:0] = ((c_5_T9[0:0]  (M1[5:5] + 0' ))+(d_5_T9[0:0]  (M1[5:5]   0' )));
X            d_6_T9[0:0] = ((c_5_T9[0:0]  (M1[5:5]'   0 ))+(d_5_T9[0:0]  (M1[5:5]' + 0 )));
X            c_7_T9[0:0] = ((c_6_T9[0:0]  (M1[6:6] + 0' ))+(d_6_T9[0:0]  (M1[6:6]   0' )));
X            d_7_T9[0:0] = ((c_6_T9[0:0]  (M1[6:6]'   0 ))+(d_6_T9[0:0]  (M1[6:6]' + 0 )));
X            c_8_T9[0:0] = ((c_7_T9[0:0]  (M1[7:7] + 0' ))+(d_7_T9[0:0]  (M1[7:7]   0' )));
X            d_8_T9[0:0] = ((c_7_T9[0:0]  (M1[7:7]'   0 ))+(d_7_T9[0:0]  (M1[7:7]' + 0 )));
X            T9[0:0] = c_8_T9[0:0] ;
X            V0_T7_0_0[0:0] = T7[0:0]' ;
X            V1_T7_0_0[0:0] = T7[0:0] ;
X            .attribute delay 19 level;
X            .attribute area 245 literal;
X          .endoperation;
X        .endnode;
X
X        .node 4 cond;
X          .successors 5 ;	#  predecessors 3 
X          .cond T9[0:0] T10[0:0] ;	#	Latched
X          .case 1 ;
X            #	Index 4
X            .polargraph 1 4;
X            #	4 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 operation;
X              .inputs 0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	;
X              .outputs tmp[7:7] tmp[6:6] tmp[5:5] tmp[4:4] 
X	tmp[3:3] tmp[2:2] tmp[1:1] tmp[0:0] 
X	count[7:7] count[6:6] count[5:5] count[4:4] 
X	count[3:3] count[2:2] count[1:1] count[0:0] 
X	;
X              .successors 3 ;	#  predecessors 1 
X              .attribute constraint delay 2 1 cycles;
X              .operation load_register;
X            .endnode;
X
X            .node 3 loop;
X              .successors 4 ;	#  predecessors 2 
X              .loop T14[0:0] ;	#	
X                #	Index 5
X                .polargraph 1 3;
X                #	3 nodes
X                .node 1 nop;	#	source node
X                  .successors 2 ;
X                .endnode;
X
X                .node 2 operation;
X                  .inputs T7[0:0] op1[7:7] op2[7:7] op1[6:6] 
X	op2[6:6] op1[5:5] op2[5:5] op1[4:4] 
X	op2[4:4] op1[3:3] op2[3:3] op1[2:2] 
X	op2[2:2] op1[1:1] op2[1:1] op1[0:0] 
X	op2[0:0] tmp[0:0] tmp[1:1] tmp[2:2] 
X	tmp[3:3] tmp[4:4] tmp[5:5] tmp[6:6] 
X	tmp[7:7] count[0:0] count[1:1] count[2:2] 
X	count[3:3] count[4:4] count[5:5] count[6:6] 
X	count[7:7] X8[0:0] X7[0:0] X6[0:0] 
X	X5[0:0] X4[0:0] X3[0:0] X2[0:0] 
X	X1[0:0] ;
X                  .outputs T11[0:0] T11[1:1] T11[2:2] T11[3:3] 
X	T11[4:4] T11[5:5] T11[6:6] T11[7:7] 
X	T12[0:0] T12[1:1] T12[2:2] T12[3:3] 
X	T12[4:4] T12[5:5] T12[6:6] T12[7:7] 
X	T14[0:0] ;
X                  .successors 3 ;	#  predecessors 1 
X                  .operation logic 4 ;
X                    #	Expression 0
X                    M2[0:0] = X16[0:0] ;
X                    M2[1:1] = X15[0:0] ;
X                    M2[2:2] = X14[0:0] ;
X                    M2[3:3] = X13[0:0] ;
X                    M2[4:4] = X12[0:0] ;
X                    M2[5:5] = X11[0:0] ;
X                    M2[6:6] = X10[0:0] ;
X                    M2[7:7] = X9[0:0] ;
X                    X9[0:0] = ((V1_T7_0_0[0:0]  op1[7:7] )+(V0_T7_0_0[0:0]  op2[7:7] ));
X                    X10[0:0] = ((V1_T7_0_0[0:0]  op1[6:6] )+(V0_T7_0_0[0:0]  op2[6:6] ));
X                    X11[0:0] = ((V1_T7_0_0[0:0]  op1[5:5] )+(V0_T7_0_0[0:0]  op2[5:5] ));
X                    X12[0:0] = ((V1_T7_0_0[0:0]  op1[4:4] )+(V0_T7_0_0[0:0]  op2[4:4] ));
X                    X13[0:0] = ((V1_T7_0_0[0:0]  op1[3:3] )+(V0_T7_0_0[0:0]  op2[3:3] ));
X                    X14[0:0] = ((V1_T7_0_0[0:0]  op1[2:2] )+(V0_T7_0_0[0:0]  op2[2:2] ));
X                    X15[0:0] = ((V1_T7_0_0[0:0]  op1[1:1] )+(V0_T7_0_0[0:0]  op2[1:1] ));
X                    X16[0:0] = ((V1_T7_0_0[0:0]  op1[0:0] )+(V0_T7_0_0[0:0]  op2[0:0] ));
X                    c_T11[0:0] =  0 ;
X                    T11[0:0] = (((((tmp[0:0]'  M2[0:0] ) c_T11[0:0]' )+((tmp[0:0]  M2[0:0]' ) c_T11[0:0]' ))+((tmp[0:0]'  M2[0:0]' ) c_T11[0:0] ))+((tmp[0:0]  M2[0:0] ) c_T11[0:0] ));
X                    c_T11[1:1] = ((tmp[0:0]  M2[0:0] )+(c_T11[0:0]  (tmp[0:0] +M2[0:0] )));
X                    T11[1:1] = (((((tmp[1:1]'  M2[1:1] ) c_T11[1:1]' )+((tmp[1:1]  M2[1:1]' ) c_T11[1:1]' ))+((tmp[1:1]'  M2[1:1]' ) c_T11[1:1] ))+((tmp[1:1]  M2[1:1] ) c_T11[1:1] ));
X                    c_T11[2:2] = ((tmp[1:1]  M2[1:1] )+(c_T11[1:1]  (tmp[1:1] +M2[1:1] )));
X                    T11[2:2] = (((((tmp[2:2]'  M2[2:2] ) c_T11[2:2]' )+((tmp[2:2]  M2[2:2]' ) c_T11[2:2]' ))+((tmp[2:2]'  M2[2:2]' ) c_T11[2:2] ))+((tmp[2:2]  M2[2:2] ) c_T11[2:2] ));
X                    c_T11[3:3] = ((tmp[2:2]  M2[2:2] )+(c_T11[2:2]  (tmp[2:2] +M2[2:2] )));
X                    T11[3:3] = (((((tmp[3:3]'  M2[3:3] ) c_T11[3:3]' )+((tmp[3:3]  M2[3:3]' ) c_T11[3:3]' ))+((tmp[3:3]'  M2[3:3]' ) c_T11[3:3] ))+((tmp[3:3]  M2[3:3] ) c_T11[3:3] ));
X                    c_T11[4:4] = ((tmp[3:3]  M2[3:3] )+(c_T11[3:3]  (tmp[3:3] +M2[3:3] )));
X                    T11[4:4] = (((((tmp[4:4]'  M2[4:4] ) c_T11[4:4]' )+((tmp[4:4]  M2[4:4]' ) c_T11[4:4]' ))+((tmp[4:4]'  M2[4:4]' ) c_T11[4:4] ))+((tmp[4:4]  M2[4:4] ) c_T11[4:4] ));
X                    c_T11[5:5] = ((tmp[4:4]  M2[4:4] )+(c_T11[4:4]  (tmp[4:4] +M2[4:4] )));
X                    T11[5:5] = (((((tmp[5:5]'  M2[5:5] ) c_T11[5:5]' )+((tmp[5:5]  M2[5:5]' ) c_T11[5:5]' ))+((tmp[5:5]'  M2[5:5]' ) c_T11[5:5] ))+((tmp[5:5]  M2[5:5] ) c_T11[5:5] ));
X                    c_T11[6:6] = ((tmp[5:5]  M2[5:5] )+(c_T11[5:5]  (tmp[5:5] +M2[5:5] )));
X                    T11[6:6] = (((((tmp[6:6]'  M2[6:6] ) c_T11[6:6]' )+((tmp[6:6]  M2[6:6]' ) c_T11[6:6]' ))+((tmp[6:6]'  M2[6:6]' ) c_T11[6:6] ))+((tmp[6:6]  M2[6:6] ) c_T11[6:6] ));
X                    c_T11[7:7] = ((tmp[6:6]  M2[6:6] )+(c_T11[6:6]  (tmp[6:6] +M2[6:6] )));
X                    T11[7:7] = (((((tmp[7:7]'  M2[7:7] ) c_T11[7:7]' )+((tmp[7:7]  M2[7:7]' ) c_T11[7:7]' ))+((tmp[7:7]'  M2[7:7]' ) c_T11[7:7] ))+((tmp[7:7]  M2[7:7] ) c_T11[7:7] ));
X                    c_T11[8:8] = ((tmp[7:7]  M2[7:7] )+(c_T11[7:7]  (tmp[7:7] +M2[7:7] )));
X                    T11[8:8] = c_T11[7:7] ;
X                    c_T12[0:0] =  0 ;
X                    T12[0:0] = (((((count[0:0]'   1 ) c_T12[0:0]' )+((count[0:0]   1' ) c_T12[0:0]' ))+((count[0:0]'   1' ) c_T12[0:0] ))+((count[0:0]   1 ) c_T12[0:0] ));
X                    c_T12[1:1] = ((count[0:0]   1 )+(c_T12[0:0]  (count[0:0] + 1 )));
X                    T12[1:1] = (((((count[1:1]'   0 ) c_T12[1:1]' )+((count[1:1]   0' ) c_T12[1:1]' ))+((count[1:1]'   0' ) c_T12[1:1] ))+((count[1:1]   0 ) c_T12[1:1] ));
X                    c_T12[2:2] = ((count[1:1]   0 )+(c_T12[1:1]  (count[1:1] + 0 )));
X                    T12[2:2] = (((((count[2:2]'   0 ) c_T12[2:2]' )+((count[2:2]   0' ) c_T12[2:2]' ))+((count[2:2]'   0' ) c_T12[2:2] ))+((count[2:2]   0 ) c_T12[2:2] ));
X                    c_T12[3:3] = ((count[2:2]   0 )+(c_T12[2:2]  (count[2:2] + 0 )));
X                    T12[3:3] = (((((count[3:3]'   0 ) c_T12[3:3]' )+((count[3:3]   0' ) c_T12[3:3]' ))+((count[3:3]'   0' ) c_T12[3:3] ))+((count[3:3]   0 ) c_T12[3:3] ));
X                    c_T12[4:4] = ((count[3:3]   0 )+(c_T12[3:3]  (count[3:3] + 0 )));
X                    T12[4:4] = (((((count[4:4]'   0 ) c_T12[4:4]' )+((count[4:4]   0' ) c_T12[4:4]' ))+((count[4:4]'   0' ) c_T12[4:4] ))+((count[4:4]   0 ) c_T12[4:4] ));
X                    c_T12[5:5] = ((count[4:4]   0 )+(c_T12[4:4]  (count[4:4] + 0 )));
X                    T12[5:5] = (((((count[5:5]'   0 ) c_T12[5:5]' )+((count[5:5]   0' ) c_T12[5:5]' ))+((count[5:5]'   0' ) c_T12[5:5] ))+((count[5:5]   0 ) c_T12[5:5] ));
X                    c_T12[6:6] = ((count[5:5]   0 )+(c_T12[5:5]  (count[5:5] + 0 )));
X                    T12[6:6] = (((((count[6:6]'   0 ) c_T12[6:6]' )+((count[6:6]   0' ) c_T12[6:6]' ))+((count[6:6]'   0' ) c_T12[6:6] ))+((count[6:6]   0 ) c_T12[6:6] ));
X                    c_T12[7:7] = ((count[6:6]   0 )+(c_T12[6:6]  (count[6:6] + 0 )));
X                    T12[7:7] = (((((count[7:7]'   0 ) c_T12[7:7]' )+((count[7:7]   0' ) c_T12[7:7]' ))+((count[7:7]'   0' ) c_T12[7:7] ))+((count[7:7]   0 ) c_T12[7:7] ));
X                    c_T12[8:8] = ((count[7:7]   0 )+(c_T12[7:7]  (count[7:7] + 0 )));
X                    T12[8:8] = c_T12[7:7] ;
X                    M3[0:0] = X8[0:0] ;
X                    M3[1:1] = X7[0:0] ;
X                    M3[2:2] = X6[0:0] ;
X                    M3[3:3] = X5[0:0] ;
X                    M3[4:4] = X4[0:0] ;
X                    M3[5:5] = X3[0:0] ;
X                    M3[6:6] = X2[0:0] ;
X                    M3[7:7] = X1[0:0] ;
X                    c_0_T13[0:0] =  0 ;
X                    d_0_T13[0:0] =  1 ;
X                    c_1_T13[0:0] = ((c_0_T13[0:0]  (M3[0:0] +T12[0:0]' ))+(d_0_T13[0:0]  (M3[0:0]  T12[0:0]' )));
X                    d_1_T13[0:0] = ((c_0_T13[0:0]  (M3[0:0]'  T12[0:0] ))+(d_0_T13[0:0]  (M3[0:0]' +T12[0:0] )));
X                    c_2_T13[0:0] = ((c_1_T13[0:0]  (M3[1:1] +T12[1:1]' ))+(d_1_T13[0:0]  (M3[1:1]  T12[1:1]' )));
X                    d_2_T13[0:0] = ((c_1_T13[0:0]  (M3[1:1]'  T12[1:1] ))+(d_1_T13[0:0]  (M3[1:1]' +T12[1:1] )));
X                    c_3_T13[0:0] = ((c_2_T13[0:0]  (M3[2:2] +T12[2:2]' ))+(d_2_T13[0:0]  (M3[2:2]  T12[2:2]' )));
X                    d_3_T13[0:0] = ((c_2_T13[0:0]  (M3[2:2]'  T12[2:2] ))+(d_2_T13[0:0]  (M3[2:2]' +T12[2:2] )));
X                    c_4_T13[0:0] = ((c_3_T13[0:0]  (M3[3:3] +T12[3:3]' ))+(d_3_T13[0:0]  (M3[3:3]  T12[3:3]' )));
X                    d_4_T13[0:0] = ((c_3_T13[0:0]  (M3[3:3]'  T12[3:3] ))+(d_3_T13[0:0]  (M3[3:3]' +T12[3:3] )));
X                    c_5_T13[0:0] = ((c_4_T13[0:0]  (M3[4:4] +T12[4:4]' ))+(d_4_T13[0:0]  (M3[4:4]  T12[4:4]' )));
X                    d_5_T13[0:0] = ((c_4_T13[0:0]  (M3[4:4]'  T12[4:4] ))+(d_4_T13[0:0]  (M3[4:4]' +T12[4:4] )));
X                    c_6_T13[0:0] = ((c_5_T13[0:0]  (M3[5:5] +T12[5:5]' ))+(d_5_T13[0:0]  (M3[5:5]  T12[5:5]' )));
X                    d_6_T13[0:0] = ((c_5_T13[0:0]  (M3[5:5]'  T12[5:5] ))+(d_5_T13[0:0]  (M3[5:5]' +T12[5:5] )));
X                    c_7_T13[0:0] = ((c_6_T13[0:0]  (M3[6:6] +T12[6:6]' ))+(d_6_T13[0:0]  (M3[6:6]  T12[6:6]' )));
X                    d_7_T13[0:0] = ((c_6_T13[0:0]  (M3[6:6]'  T12[6:6] ))+(d_6_T13[0:0]  (M3[6:6]' +T12[6:6] )));
X                    c_8_T13[0:0] = ((c_7_T13[0:0]  (M3[7:7] +T12[7:7]' ))+(d_7_T13[0:0]  (M3[7:7]  T12[7:7]' )));
X                    d_8_T13[0:0] = ((c_7_T13[0:0]  (M3[7:7]'  T12[7:7] ))+(d_7_T13[0:0]  (M3[7:7]' +T12[7:7] )));
X                    T13[0:0] = c_8_T13[0:0] ;
X                    T14[0:0] = T13[0:0]' ;
X                    V0_T7_0_0[0:0] = T7[0:0]' ;
X                    V1_T7_0_0[0:0] = T7[0:0] ;
X                    .attribute delay 22 level;
X                    .attribute area 770 literal;
X                  .endoperation;
X                .endnode;
X
X                .node 3 nop;	#	sink node
X                  .successors ;	#  predecessors 2 
X                .endnode;
X
X                .endpolargraph;
X              .attribute hercules loop_load tmp[7:7] T11[7:7] ;
X              .attribute hercules loop_load tmp[6:6] T11[6:6] ;
X              .attribute hercules loop_load tmp[5:5] T11[5:5] ;
X              .attribute hercules loop_load tmp[4:4] T11[4:4] ;
X              .attribute hercules loop_load tmp[3:3] T11[3:3] ;
X              .attribute hercules loop_load tmp[2:2] T11[2:2] ;
X              .attribute hercules loop_load tmp[1:1] T11[1:1] ;
X              .attribute hercules loop_load tmp[0:0] T11[0:0] ;
X              .attribute hercules loop_load count[7:7] T12[7:7] ;
X              .attribute hercules loop_load count[6:6] T12[6:6] ;
X              .attribute hercules loop_load count[5:5] T12[5:5] ;
X              .attribute hercules loop_load count[4:4] T12[4:4] ;
X              .attribute hercules loop_load count[3:3] T12[3:3] ;
X              .attribute hercules loop_load count[2:2] T12[2:2] ;
X              .attribute hercules loop_load count[1:1] T12[1:1] ;
X              .attribute hercules loop_load count[0:0] T12[0:0] ;
X              .endloop;
X            .endnode;
X
X            .node 4 nop;	#	sink node
X              .successors ;	#  predecessors 3 
X            .endnode;
X
X            .endpolargraph;
X          .endcase;
X          .case 0 ;
X            #	Index 6
X            .polargraph 1 2;
X            #	2 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 nop;	#	sink node
X              .successors ;	#  predecessors 1 
X            .endnode;
X
X            .endpolargraph;
X          .endcase;
X          .endcond;
X        .endnode;
X
X        .node 5 nop;	#	sink node
X          .successors ;	#  predecessors 4 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 4 operation;
X      .inputs T6[0:0] T10[0:0] tmp[7:7] tmp[6:6] 
X	tmp[5:5] tmp[4:4] tmp[3:3] tmp[2:2] 
X	tmp[1:1] tmp[0:0] ;
X      .outputs X17[0:0] X18[0:0] X19[0:0] X20[0:0] 
X	X21[0:0] X22[0:0] X23[0:0] X24[0:0] 
X	;
X      .successors 5 ;	#  predecessors 3 
X      .operation logic 5 ;
X        #	Expression 0
X        M4[0:0] = X32[0:0] ;
X        M4[1:1] = X31[0:0] ;
X        M4[2:2] = X30[0:0] ;
X        M4[3:3] = X29[0:0] ;
X        M4[4:4] = X28[0:0] ;
X        M4[5:5] = X27[0:0] ;
X        M4[6:6] = X26[0:0] ;
X        M4[7:7] = X25[0:0] ;
X        X17[0:0] = ( 0 +(V0_T6_0_0[0:0]  M4[7:7] ));
X        X18[0:0] = ( 0 +(V0_T6_0_0[0:0]  M4[6:6] ));
X        X19[0:0] = ( 0 +(V0_T6_0_0[0:0]  M4[5:5] ));
X        X20[0:0] = ( 0 +(V0_T6_0_0[0:0]  M4[4:4] ));
X        X21[0:0] = ( 0 +(V0_T6_0_0[0:0]  M4[3:3] ));
X        X22[0:0] = ( 0 +(V0_T6_0_0[0:0]  M4[2:2] ));
X        X23[0:0] = ( 0 +(V0_T6_0_0[0:0]  M4[1:1] ));
X        X24[0:0] = ( 0 +(V0_T6_0_0[0:0]  M4[0:0] ));
X        X25[0:0] = ((V1_T10_0_0[0:0]  tmp[7:7] )+ 0 );
X        X26[0:0] = ((V1_T10_0_0[0:0]  tmp[6:6] )+ 0 );
X        X27[0:0] = ((V1_T10_0_0[0:0]  tmp[5:5] )+ 0 );
X        X28[0:0] = ((V1_T10_0_0[0:0]  tmp[4:4] )+ 0 );
X        X29[0:0] = ((V1_T10_0_0[0:0]  tmp[3:3] )+ 0 );
X        X30[0:0] = ((V1_T10_0_0[0:0]  tmp[2:2] )+ 0 );
X        X31[0:0] = ((V1_T10_0_0[0:0]  tmp[1:1] )+ 0 );
X        X32[0:0] = ((V1_T10_0_0[0:0]  tmp[0:0] )+ 0 );
X        V1_T10_0_0[0:0] = T10[0:0] ;
X        V0_T6_0_0[0:0] = T6[0:0]' ;
X        .attribute delay 4 level;
X        .attribute area 90 literal;
X      .endoperation;
X    .endnode;
X
X    .node 5 nop;	#	sink node
X      .successors ;	#  predecessors 4 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] X24[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] X23[0:0] ;
X    .attribute hercules direct_connect return_value[2:2] X22[0:0] ;
X    .attribute hercules direct_connect return_value[3:3] X21[0:0] ;
X    .attribute hercules direct_connect return_value[4:4] X20[0:0] ;
X    .attribute hercules direct_connect return_value[5:5] X19[0:0] ;
X    .attribute hercules direct_connect return_value[6:6] X18[0:0] ;
X    .attribute hercules direct_connect return_value[7:7] X17[0:0] ;
X    .endpolargraph;
X.endmodel tmultiply_8 ;
END_OF_FILE
if test 21376 -ne `wc -c <'tseng/tmultiply_8.sif'`; then
    echo shar: \"'tseng/tmultiply_8.sif'\" unpacked with wrong size!
fi
# end of 'tseng/tmultiply_8.sif'
fi
if test -f 'tseng/tseng.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/tseng.sif'\"
else
echo shar: Extracting \"'tseng/tseng.sif'\" \(27508 characters\)
sed "s/^X//" >'tseng/tseng.sif' <<'END_OF_FILE'
X#
X#	Sif model tseng	Printed Tue Jul 24 15:06:00 1990
X#
X.model tseng sequencing process; 
X  .inputs port reset ;
X  .inouts port v1[8] port v2[8] port v3[8] port v4[8] 
X	port v5[8] port v6[8] port v7[8] port v8[8] 
X	port v9[8] port v10[8] port v11[8] port v12[8] 
X	port v13[8] port v14[8] port v15[8] port ready 
X	;
X    #	Index 1
X    .polargraph 1 35;
X    .variable M15[8] X9 X10 X11 
X	X12 X13 X14 X15 
X	X16 M14[8] M13[8] X17 
X	X18 X19 X20 X21 
X	X22 X23 X24 M12[8] 
X	X1 X2 X3 X4 
X	X5 X6 X7 X8 
X	M11[8] T18[8] M10[8] M9[8] 
X	M8[8] M7[8] M6[8] M5[8] 
X	M4[8] M3[8] M2[8] T17[8] 
X	M1[8] T9[8] T16[9] T15[16] 
X	T14[8] T8[8] T13[9] T10[8] 
X	T12[9] T7[8] T11[9] T6[8] 
X	T5[8] T4 T2 T1 
X	;
X    #	35 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 cond;
X      .successors 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 ;	#  predecessors 1 
X      .cond reset[0:0] T1[0:0] ;	#	Latched
X      .case 1 ;
X        #	Index 2
X        .polargraph 1 2;
X        #	2 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 nop;	#	sink node
X          .successors ;	#  predecessors 1 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .case 0 ;
X        #	Index 3
X        .polargraph 1 18;
X        #	18 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs ready[0:0] ;
X          .outputs T2[0:0] ;
X          .successors 3 ;	#  predecessors 1 
X          .operation logic 1 ;
X            #	Expression 0
X            T2[0:0] = ready[0:0]' ;
X            .attribute delay 0 level;
X            .attribute area 1 literal;
X          .endoperation;
X        .endnode;
X
X        .node 3 cond;
X          .successors 4 ;	#  predecessors 2 
X          .cond T2[0:0] ;	#	Latched
X          .case 1 ;
X            #	Index 4
X            .polargraph 1 3;
X            #	3 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 loop;
X              .successors 3 ;	#  predecessors 1 
X              .loop T4[0:0] ;	#	
X                #	Index 5
X                .polargraph 1 3;
X                #	3 nodes
X                .node 1 nop;	#	source node
X                  .successors 2 ;
X                .endnode;
X
X                .node 2 operation;
X                  .inputs ready[0:0] ;
X                  .outputs T4[0:0] ;
X                  .successors 3 ;	#  predecessors 1 
X                  .operation logic 2 ;
X                    #	Expression 0
X                    T3[0:0] = ready[0:0]' ;
X                    T4[0:0] = T3[0:0]' ;
X                    .attribute delay 0 level;
X                    .attribute area 2 literal;
X                  .endoperation;
X                .endnode;
X
X                .node 3 nop;	#	sink node
X                  .successors ;	#  predecessors 2 
X                .endnode;
X
X                .endpolargraph;
X              .endloop;
X            .endnode;
X
X            .node 3 nop;	#	sink node
X              .successors ;	#  predecessors 2 
X            .endnode;
X
X            .endpolargraph;
X          .endcase;
X          .case 0 ;
X            #	Index 6
X            .polargraph 1 2;
X            #	2 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 nop;	#	sink node
X              .successors ;	#  predecessors 1 
X            .endnode;
X
X            .endpolargraph;
X          .endcase;
X          .endcond;
X        .endnode;
X
X        .node 4 operation;
X          .inputs v1[0:7] ;
X          .outputs T5[0:7] ;
X          .successors 5 ;	#  predecessors 3 
X          .attribute constraint delay 4 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 5 operation;
X          .inputs v2[0:7] ;
X          .outputs T6[0:7] ;
X          .successors 6 ;	#  predecessors 4 
X          .attribute constraint delay 5 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 6 operation;
X          .inputs v4[0:7] ;
X          .outputs T7[0:7] ;
X          .successors 7 ;	#  predecessors 5 
X          .attribute constraint delay 6 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 7 operation;
X          .inputs v6[0:7] ;
X          .outputs T8[0:7] ;
X          .successors 8 ;	#  predecessors 6 
X          .attribute constraint delay 7 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 8 operation;
X          .inputs v10[0:7] ;
X          .outputs T9[0:7] ;
X          .successors 9 ;	#  predecessors 7 
X          .attribute constraint delay 8 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 9 operation;
X          .inputs v11[0:7] ;
X          .outputs T10[0:7] ;
X          .successors 10 14 17 ;	#  predecessors 8 
X          .attribute constraint delay 9 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 10 proc;
X          .inputs T5[0:7] T6[0:7] ;
X          .outputs T11[0:8] ;
X          .successors 11 ;	#  predecessors 9 
X          .proc add with (8);
X        .endnode;
X
X        .node 11 proc;
X          .inputs T11[0:7] T7[0:7] ;
X          .outputs T12[0:8] ;
X          .successors 12 ;	#  predecessors 10 
X          .proc subtract with (8);
X        .endnode;
X
X        .node 12 proc;
X          .inputs T11[0:7] T12[0:7] ;
X          .outputs T13[0:8] ;
X          .successors 13 ;	#  predecessors 11 
X          .proc add with (8);
X        .endnode;
X
X        .node 13 operation;
X          .inputs T10[0:0] T10[1:1] T10[2:2] T10[3:3] 
X	T10[4:4] T10[5:5] T10[6:6] T10[7:7] 
X	T13[0:0] T13[1:1] T13[2:2] T13[3:3] 
X	T13[4:4] T13[5:5] T13[6:6] T13[7:7] 
X	;
X          .outputs T14[0:0] T14[1:1] T14[2:2] T14[3:3] 
X	T14[4:4] T14[5:5] T14[6:6] T14[7:7] 
X	;
X          .successors 18 ;	#  predecessors 12 
X          .operation logic 3 ;
X            #	Expression 0
X            T14[0:0] = (T10[0:0]  T13[0:0] );
X            T14[1:1] = (T10[1:1]  T13[1:1] );
X            T14[2:2] = (T10[2:2]  T13[2:2] );
X            T14[3:3] = (T10[3:3]  T13[3:3] );
X            T14[4:4] = (T10[4:4]  T13[4:4] );
X            T14[5:5] = (T10[5:5]  T13[5:5] );
X            T14[6:6] = (T10[6:6]  T13[6:6] );
X            T14[7:7] = (T10[7:7]  T13[7:7] );
X            .attribute delay 1 level;
X            .attribute area 24 literal;
X          .endoperation;
X        .endnode;
X
X        .node 14 proc;
X          .inputs T11[0:7] T8[0:7] ;
X          .outputs T15[0:15] ;
X          .successors 15 ;	#  predecessors 9 
X          .proc tmultiply with (8);
X        .endnode;
X
X        .node 15 proc;
X          .inputs T14[0:7] T15[0:7] ;
X          .outputs T16[0:8] ;
X          .successors 16 ;	#  predecessors 14 
X          .proc add with (8);
X        .endnode;
X
X        .node 16 operation;
X          .inputs T14[0:0] T14[1:1] T14[2:2] T14[3:3] 
X	T14[4:4] T14[5:5] T14[6:6] T14[7:7] 
X	T16[0:0] T16[1:1] T16[2:2] T16[3:3] 
X	T16[4:4] T16[5:5] T16[6:6] T16[7:7] 
X	;
X          .outputs T17[0:0] T17[1:1] T17[2:2] T17[3:3] 
X	T17[4:4] T17[5:5] T17[6:6] T17[7:7] 
X	;
X          .successors 18 ;	#  predecessors 15 
X          .operation logic 4 ;
X            #	Expression 0
X            T17[0:0] = (T14[0:0] +T16[0:0] );
X            T17[1:1] = (T14[1:1] +T16[1:1] );
X            T17[2:2] = (T14[2:2] +T16[2:2] );
X            T17[3:3] = (T14[3:3] +T16[3:3] );
X            T17[4:4] = (T14[4:4] +T16[4:4] );
X            T17[5:5] = (T14[5:5] +T16[5:5] );
X            T17[6:6] = (T14[6:6] +T16[6:6] );
X            T17[7:7] = (T14[7:7] +T16[7:7] );
X            .attribute delay 1 level;
X            .attribute area 24 literal;
X          .endoperation;
X        .endnode;
X
X        .node 17 proc;
X          .inputs T9[0:7] T12[0:7] ;
X          .outputs T18[0:7] ;
X          .successors 18 ;	#  predecessors 9 
X          .proc divide with (8);
X        .endnode;
X
X        .node 18 nop;	#	sink node
X          .successors ;	#  predecessors 13 16 17 
X        .endnode;
X
X        .attribute constraint delay 4 1 cycles;
X        .attribute constraint delay 5 1 cycles;
X        .attribute constraint delay 6 1 cycles;
X        .attribute constraint delay 7 1 cycles;
X        .attribute constraint delay 8 1 cycles;
X        .attribute constraint delay 9 1 cycles;
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 3 operation;
X      .inputs T1[0:0] T14[7:7] T14[6:6] T14[5:5] 
X	T14[4:4] T14[3:3] T14[2:2] T14[1:1] 
X	T14[0:0] ;
X      .outputs M1[0:0] M1[1:1] M1[2:2] M1[3:3] 
X	M1[4:4] M1[5:5] M1[6:6] M1[7:7] 
X	X1[0:0] X2[0:0] X3[0:0] X4[0:0] 
X	X5[0:0] X6[0:0] X7[0:0] X8[0:0] 
X	;
X      .successors 4 ;	#  predecessors 2 
X      .operation logic 5 ;
X        #	Expression 0
X        M1[0:0] = X8[0:0] ;
X        M1[1:1] = X7[0:0] ;
X        M1[2:2] = X6[0:0] ;
X        M1[3:3] = X5[0:0] ;
X        M1[4:4] = X4[0:0] ;
X        M1[5:5] = X3[0:0] ;
X        M1[6:6] = X2[0:0] ;
X        M1[7:7] = X1[0:0] ;
X        X1[0:0] = ( 0 +(V0_T1_0_0[0:0]  T14[7:7] ));
X        X2[0:0] = ( 0 +(V0_T1_0_0[0:0]  T14[6:6] ));
X        X3[0:0] = ( 0 +(V0_T1_0_0[0:0]  T14[5:5] ));
X        X4[0:0] = ( 0 +(V0_T1_0_0[0:0]  T14[4:4] ));
X        X5[0:0] = ( 0 +(V0_T1_0_0[0:0]  T14[3:3] ));
X        X6[0:0] = ( 0 +(V0_T1_0_0[0:0]  T14[2:2] ));
X        X7[0:0] = ( 0 +(V0_T1_0_0[0:0]  T14[1:1] ));
X        X8[0:0] = ( 0 +(V0_T1_0_0[0:0]  T14[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 4 operation;
X      .inputs M1[0:7] ;
X      .outputs v1[0:7] ;
X      .successors 34 ;	#  predecessors 3 
X      .attribute constraint delay 4 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 5 operation;
X      .inputs T1[0:0] T17[7:7] T17[6:6] T17[5:5] 
X	T17[4:4] T17[3:3] T17[2:2] T17[1:1] 
X	T17[0:0] ;
X      .outputs M2[0:0] M2[1:1] M2[2:2] M2[3:3] 
X	M2[4:4] M2[5:5] M2[6:6] M2[7:7] 
X	X9[0:0] X10[0:0] X11[0:0] X12[0:0] 
X	X13[0:0] X14[0:0] X15[0:0] X16[0:0] 
X	;
X      .successors 6 ;	#  predecessors 2 
X      .operation logic 6 ;
X        #	Expression 0
X        M2[0:0] = X16[0:0] ;
X        M2[1:1] = X15[0:0] ;
X        M2[2:2] = X14[0:0] ;
X        M2[3:3] = X13[0:0] ;
X        M2[4:4] = X12[0:0] ;
X        M2[5:5] = X11[0:0] ;
X        M2[6:6] = X10[0:0] ;
X        M2[7:7] = X9[0:0] ;
X        X9[0:0] = ( 0 +(V0_T1_0_0[0:0]  T17[7:7] ));
X        X10[0:0] = ( 0 +(V0_T1_0_0[0:0]  T17[6:6] ));
X        X11[0:0] = ( 0 +(V0_T1_0_0[0:0]  T17[5:5] ));
X        X12[0:0] = ( 0 +(V0_T1_0_0[0:0]  T17[4:4] ));
X        X13[0:0] = ( 0 +(V0_T1_0_0[0:0]  T17[3:3] ));
X        X14[0:0] = ( 0 +(V0_T1_0_0[0:0]  T17[2:2] ));
X        X15[0:0] = ( 0 +(V0_T1_0_0[0:0]  T17[1:1] ));
X        X16[0:0] = ( 0 +(V0_T1_0_0[0:0]  T17[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 6 operation;
X      .inputs M2[0:7] ;
X      .outputs v2[0:7] ;
X      .successors 34 ;	#  predecessors 5 
X      .attribute constraint delay 6 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 7 operation;
X      .inputs T1[0:0] T11[7:7] T11[6:6] T11[5:5] 
X	T11[4:4] T11[3:3] T11[2:2] T11[1:1] 
X	T11[0:0] ;
X      .outputs M3[0:0] M3[1:1] M3[2:2] M3[3:3] 
X	M3[4:4] M3[5:5] M3[6:6] M3[7:7] 
X	X17[0:0] X18[0:0] X19[0:0] X20[0:0] 
X	X21[0:0] X22[0:0] X23[0:0] X24[0:0] 
X	;
X      .successors 8 ;	#  predecessors 2 
X      .operation logic 7 ;
X        #	Expression 0
X        M3[0:0] = X24[0:0] ;
X        M3[1:1] = X23[0:0] ;
X        M3[2:2] = X22[0:0] ;
X        M3[3:3] = X21[0:0] ;
X        M3[4:4] = X20[0:0] ;
X        M3[5:5] = X19[0:0] ;
X        M3[6:6] = X18[0:0] ;
X        M3[7:7] = X17[0:0] ;
X        X17[0:0] = ( 0 +(V0_T1_0_0[0:0]  T11[7:7] ));
X        X18[0:0] = ( 0 +(V0_T1_0_0[0:0]  T11[6:6] ));
X        X19[0:0] = ( 0 +(V0_T1_0_0[0:0]  T11[5:5] ));
X        X20[0:0] = ( 0 +(V0_T1_0_0[0:0]  T11[4:4] ));
X        X21[0:0] = ( 0 +(V0_T1_0_0[0:0]  T11[3:3] ));
X        X22[0:0] = ( 0 +(V0_T1_0_0[0:0]  T11[2:2] ));
X        X23[0:0] = ( 0 +(V0_T1_0_0[0:0]  T11[1:1] ));
X        X24[0:0] = ( 0 +(V0_T1_0_0[0:0]  T11[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 8 operation;
X      .inputs M3[0:7] ;
X      .outputs v3[0:7] ;
X      .successors 34 ;	#  predecessors 7 
X      .attribute constraint delay 8 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 9 operation;
X      .inputs T1[0:0] T7[7:7] T7[6:6] T7[5:5] 
X	T7[4:4] T7[3:3] T7[2:2] T7[1:1] 
X	T7[0:0] ;
X      .outputs M4[0:0] M4[1:1] M4[2:2] M4[3:3] 
X	M4[4:4] M4[5:5] M4[6:6] M4[7:7] 
X	;
X      .successors 10 ;	#  predecessors 2 
X      .operation logic 8 ;
X        #	Expression 0
X        M4[0:0] = X32[0:0] ;
X        M4[1:1] = X31[0:0] ;
X        M4[2:2] = X30[0:0] ;
X        M4[3:3] = X29[0:0] ;
X        M4[4:4] = X28[0:0] ;
X        M4[5:5] = X27[0:0] ;
X        M4[6:6] = X26[0:0] ;
X        M4[7:7] = X25[0:0] ;
X        X25[0:0] = ( 0 +(V0_T1_0_0[0:0]  T7[7:7] ));
X        X26[0:0] = ( 0 +(V0_T1_0_0[0:0]  T7[6:6] ));
X        X27[0:0] = ( 0 +(V0_T1_0_0[0:0]  T7[5:5] ));
X        X28[0:0] = ( 0 +(V0_T1_0_0[0:0]  T7[4:4] ));
X        X29[0:0] = ( 0 +(V0_T1_0_0[0:0]  T7[3:3] ));
X        X30[0:0] = ( 0 +(V0_T1_0_0[0:0]  T7[2:2] ));
X        X31[0:0] = ( 0 +(V0_T1_0_0[0:0]  T7[1:1] ));
X        X32[0:0] = ( 0 +(V0_T1_0_0[0:0]  T7[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 10 operation;
X      .inputs M4[0:7] ;
X      .outputs v4[0:7] ;
X      .successors 34 ;	#  predecessors 9 
X      .attribute constraint delay 10 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 11 operation;
X      .inputs T1[0:0] T12[7:7] T12[6:6] T12[5:5] 
X	T12[4:4] T12[3:3] T12[2:2] T12[1:1] 
X	T12[0:0] ;
X      .outputs M5[0:0] M5[1:1] M5[2:2] M5[3:3] 
X	M5[4:4] M5[5:5] M5[6:6] M5[7:7] 
X	;
X      .successors 12 ;	#  predecessors 2 
X      .operation logic 9 ;
X        #	Expression 0
X        M5[0:0] = X40[0:0] ;
X        M5[1:1] = X39[0:0] ;
X        M5[2:2] = X38[0:0] ;
X        M5[3:3] = X37[0:0] ;
X        M5[4:4] = X36[0:0] ;
X        M5[5:5] = X35[0:0] ;
X        M5[6:6] = X34[0:0] ;
X        M5[7:7] = X33[0:0] ;
X        X33[0:0] = ( 0 +(V0_T1_0_0[0:0]  T12[7:7] ));
X        X34[0:0] = ( 0 +(V0_T1_0_0[0:0]  T12[6:6] ));
X        X35[0:0] = ( 0 +(V0_T1_0_0[0:0]  T12[5:5] ));
X        X36[0:0] = ( 0 +(V0_T1_0_0[0:0]  T12[4:4] ));
X        X37[0:0] = ( 0 +(V0_T1_0_0[0:0]  T12[3:3] ));
X        X38[0:0] = ( 0 +(V0_T1_0_0[0:0]  T12[2:2] ));
X        X39[0:0] = ( 0 +(V0_T1_0_0[0:0]  T12[1:1] ));
X        X40[0:0] = ( 0 +(V0_T1_0_0[0:0]  T12[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 12 operation;
X      .inputs M5[0:7] ;
X      .outputs v5[0:7] ;
X      .successors 34 ;	#  predecessors 11 
X      .attribute constraint delay 12 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 13 operation;
X      .inputs T1[0:0] T8[7:7] T8[6:6] T8[5:5] 
X	T8[4:4] T8[3:3] T8[2:2] T8[1:1] 
X	T8[0:0] ;
X      .outputs M6[0:0] M6[1:1] M6[2:2] M6[3:3] 
X	M6[4:4] M6[5:5] M6[6:6] M6[7:7] 
X	;
X      .successors 14 ;	#  predecessors 2 
X      .operation logic 10 ;
X        #	Expression 0
X        M6[0:0] = X48[0:0] ;
X        M6[1:1] = X47[0:0] ;
X        M6[2:2] = X46[0:0] ;
X        M6[3:3] = X45[0:0] ;
X        M6[4:4] = X44[0:0] ;
X        M6[5:5] = X43[0:0] ;
X        M6[6:6] = X42[0:0] ;
X        M6[7:7] = X41[0:0] ;
X        X41[0:0] = ( 0 +(V0_T1_0_0[0:0]  T8[7:7] ));
X        X42[0:0] = ( 0 +(V0_T1_0_0[0:0]  T8[6:6] ));
X        X43[0:0] = ( 0 +(V0_T1_0_0[0:0]  T8[5:5] ));
X        X44[0:0] = ( 0 +(V0_T1_0_0[0:0]  T8[4:4] ));
X        X45[0:0] = ( 0 +(V0_T1_0_0[0:0]  T8[3:3] ));
X        X46[0:0] = ( 0 +(V0_T1_0_0[0:0]  T8[2:2] ));
X        X47[0:0] = ( 0 +(V0_T1_0_0[0:0]  T8[1:1] ));
X        X48[0:0] = ( 0 +(V0_T1_0_0[0:0]  T8[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 14 operation;
X      .inputs M6[0:7] ;
X      .outputs v6[0:7] ;
X      .successors 34 ;	#  predecessors 13 
X      .attribute constraint delay 14 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 15 operation;
X      .inputs T1[0:0] T15[7:7] T15[6:6] T15[5:5] 
X	T15[4:4] T15[3:3] T15[2:2] T15[1:1] 
X	T15[0:0] ;
X      .outputs M7[0:0] M7[1:1] M7[2:2] M7[3:3] 
X	M7[4:4] M7[5:5] M7[6:6] M7[7:7] 
X	;
X      .successors 16 ;	#  predecessors 2 
X      .operation logic 11 ;
X        #	Expression 0
X        M7[0:0] = X56[0:0] ;
X        M7[1:1] = X55[0:0] ;
X        M7[2:2] = X54[0:0] ;
X        M7[3:3] = X53[0:0] ;
X        M7[4:4] = X52[0:0] ;
X        M7[5:5] = X51[0:0] ;
X        M7[6:6] = X50[0:0] ;
X        M7[7:7] = X49[0:0] ;
X        X49[0:0] = ( 0 +(V0_T1_0_0[0:0]  T15[7:7] ));
X        X50[0:0] = ( 0 +(V0_T1_0_0[0:0]  T15[6:6] ));
X        X51[0:0] = ( 0 +(V0_T1_0_0[0:0]  T15[5:5] ));
X        X52[0:0] = ( 0 +(V0_T1_0_0[0:0]  T15[4:4] ));
X        X53[0:0] = ( 0 +(V0_T1_0_0[0:0]  T15[3:3] ));
X        X54[0:0] = ( 0 +(V0_T1_0_0[0:0]  T15[2:2] ));
X        X55[0:0] = ( 0 +(V0_T1_0_0[0:0]  T15[1:1] ));
X        X56[0:0] = ( 0 +(V0_T1_0_0[0:0]  T15[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 16 operation;
X      .inputs M7[0:7] ;
X      .outputs v7[0:7] ;
X      .successors 34 ;	#  predecessors 15 
X      .attribute constraint delay 16 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 17 operation;
X      .inputs T1[0:0] T13[7:7] T13[6:6] T13[5:5] 
X	T13[4:4] T13[3:3] T13[2:2] T13[1:1] 
X	T13[0:0] ;
X      .outputs M8[0:0] M8[1:1] M8[2:2] M8[3:3] 
X	M8[4:4] M8[5:5] M8[6:6] M8[7:7] 
X	;
X      .successors 18 ;	#  predecessors 2 
X      .operation logic 12 ;
X        #	Expression 0
X        M8[0:0] = X64[0:0] ;
X        M8[1:1] = X63[0:0] ;
X        M8[2:2] = X62[0:0] ;
X        M8[3:3] = X61[0:0] ;
X        M8[4:4] = X60[0:0] ;
X        M8[5:5] = X59[0:0] ;
X        M8[6:6] = X58[0:0] ;
X        M8[7:7] = X57[0:0] ;
X        X57[0:0] = ( 0 +(V0_T1_0_0[0:0]  T13[7:7] ));
X        X58[0:0] = ( 0 +(V0_T1_0_0[0:0]  T13[6:6] ));
X        X59[0:0] = ( 0 +(V0_T1_0_0[0:0]  T13[5:5] ));
X        X60[0:0] = ( 0 +(V0_T1_0_0[0:0]  T13[4:4] ));
X        X61[0:0] = ( 0 +(V0_T1_0_0[0:0]  T13[3:3] ));
X        X62[0:0] = ( 0 +(V0_T1_0_0[0:0]  T13[2:2] ));
X        X63[0:0] = ( 0 +(V0_T1_0_0[0:0]  T13[1:1] ));
X        X64[0:0] = ( 0 +(V0_T1_0_0[0:0]  T13[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 18 operation;
X      .inputs M8[0:7] ;
X      .outputs v8[0:7] ;
X      .successors 34 ;	#  predecessors 17 
X      .attribute constraint delay 18 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 19 operation;
X      .inputs T1[0:0] T16[7:7] T16[6:6] T16[5:5] 
X	T16[4:4] T16[3:3] T16[2:2] T16[1:1] 
X	T16[0:0] ;
X      .outputs M9[0:0] M9[1:1] M9[2:2] M9[3:3] 
X	M9[4:4] M9[5:5] M9[6:6] M9[7:7] 
X	;
X      .successors 20 ;	#  predecessors 2 
X      .operation logic 13 ;
X        #	Expression 0
X        M9[0:0] = X72[0:0] ;
X        M9[1:1] = X71[0:0] ;
X        M9[2:2] = X70[0:0] ;
X        M9[3:3] = X69[0:0] ;
X        M9[4:4] = X68[0:0] ;
X        M9[5:5] = X67[0:0] ;
X        M9[6:6] = X66[0:0] ;
X        M9[7:7] = X65[0:0] ;
X        X65[0:0] = ( 0 +(V0_T1_0_0[0:0]  T16[7:7] ));
X        X66[0:0] = ( 0 +(V0_T1_0_0[0:0]  T16[6:6] ));
X        X67[0:0] = ( 0 +(V0_T1_0_0[0:0]  T16[5:5] ));
X        X68[0:0] = ( 0 +(V0_T1_0_0[0:0]  T16[4:4] ));
X        X69[0:0] = ( 0 +(V0_T1_0_0[0:0]  T16[3:3] ));
X        X70[0:0] = ( 0 +(V0_T1_0_0[0:0]  T16[2:2] ));
X        X71[0:0] = ( 0 +(V0_T1_0_0[0:0]  T16[1:1] ));
X        X72[0:0] = ( 0 +(V0_T1_0_0[0:0]  T16[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 20 operation;
X      .inputs M9[0:7] ;
X      .outputs v9[0:7] ;
X      .successors 34 ;	#  predecessors 19 
X      .attribute constraint delay 20 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 21 operation;
X      .inputs T1[0:0] T9[7:7] T9[6:6] T9[5:5] 
X	T9[4:4] T9[3:3] T9[2:2] T9[1:1] 
X	T9[0:0] ;
X      .outputs M10[0:0] M10[1:1] M10[2:2] M10[3:3] 
X	M10[4:4] M10[5:5] M10[6:6] M10[7:7] 
X	;
X      .successors 22 ;	#  predecessors 2 
X      .operation logic 14 ;
X        #	Expression 0
X        M10[0:0] = X80[0:0] ;
X        M10[1:1] = X79[0:0] ;
X        M10[2:2] = X78[0:0] ;
X        M10[3:3] = X77[0:0] ;
X        M10[4:4] = X76[0:0] ;
X        M10[5:5] = X75[0:0] ;
X        M10[6:6] = X74[0:0] ;
X        M10[7:7] = X73[0:0] ;
X        X73[0:0] = ( 0 +(V0_T1_0_0[0:0]  T9[7:7] ));
X        X74[0:0] = ( 0 +(V0_T1_0_0[0:0]  T9[6:6] ));
X        X75[0:0] = ( 0 +(V0_T1_0_0[0:0]  T9[5:5] ));
X        X76[0:0] = ( 0 +(V0_T1_0_0[0:0]  T9[4:4] ));
X        X77[0:0] = ( 0 +(V0_T1_0_0[0:0]  T9[3:3] ));
X        X78[0:0] = ( 0 +(V0_T1_0_0[0:0]  T9[2:2] ));
X        X79[0:0] = ( 0 +(V0_T1_0_0[0:0]  T9[1:1] ));
X        X80[0:0] = ( 0 +(V0_T1_0_0[0:0]  T9[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 22 operation;
X      .inputs M10[0:7] ;
X      .outputs v10[0:7] ;
X      .successors 34 ;	#  predecessors 21 
X      .attribute constraint delay 22 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 23 operation;
X      .inputs T1[0:0] T18[7:7] T18[6:6] T18[5:5] 
X	T18[4:4] T18[3:3] T18[2:2] T18[1:1] 
X	T18[0:0] ;
X      .outputs M11[0:0] M11[1:1] M11[2:2] M11[3:3] 
X	M11[4:4] M11[5:5] M11[6:6] M11[7:7] 
X	;
X      .successors 24 ;	#  predecessors 2 
X      .operation logic 15 ;
X        #	Expression 0
X        M11[0:0] = X88[0:0] ;
X        M11[1:1] = X87[0:0] ;
X        M11[2:2] = X86[0:0] ;
X        M11[3:3] = X85[0:0] ;
X        M11[4:4] = X84[0:0] ;
X        M11[5:5] = X83[0:0] ;
X        M11[6:6] = X82[0:0] ;
X        M11[7:7] = X81[0:0] ;
X        X81[0:0] = ( 0 +(V0_T1_0_0[0:0]  T18[7:7] ));
X        X82[0:0] = ( 0 +(V0_T1_0_0[0:0]  T18[6:6] ));
X        X83[0:0] = ( 0 +(V0_T1_0_0[0:0]  T18[5:5] ));
X        X84[0:0] = ( 0 +(V0_T1_0_0[0:0]  T18[4:4] ));
X        X85[0:0] = ( 0 +(V0_T1_0_0[0:0]  T18[3:3] ));
X        X86[0:0] = ( 0 +(V0_T1_0_0[0:0]  T18[2:2] ));
X        X87[0:0] = ( 0 +(V0_T1_0_0[0:0]  T18[1:1] ));
X        X88[0:0] = ( 0 +(V0_T1_0_0[0:0]  T18[0:0] ));
X        V0_T1_0_0[0:0] = T1[0:0]' ;
X        .attribute delay 2 level;
X        .attribute area 49 literal;
X      .endoperation;
X    .endnode;
X
X    .node 24 operation;
X      .inputs M11[0:7] ;
X      .outputs v11[0:7] ;
X      .successors 34 ;	#  predecessors 23 
X      .attribute constraint delay 24 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 25 operation;
X      .inputs X8[0:0] X7[0:0] X6[0:0] X5[0:0] 
X	X4[0:0] X3[0:0] X2[0:0] X1[0:0] 
X	;
X      .outputs M12[0:0] M12[1:1] M12[2:2] M12[3:3] 
X	M12[4:4] M12[5:5] M12[6:6] M12[7:7] 
X	;
X      .successors 26 ;	#  predecessors 2 
X      .operation logic 16 ;
X        #	Expression 0
X        M12[0:0] = X8[0:0] ;
X        M12[1:1] = X7[0:0] ;
X        M12[2:2] = X6[0:0] ;
X        M12[3:3] = X5[0:0] ;
X        M12[4:4] = X4[0:0] ;
X        M12[5:5] = X3[0:0] ;
X        M12[6:6] = X2[0:0] ;
X        M12[7:7] = X1[0:0] ;
X        .attribute delay 0 level;
X        .attribute area 8 literal;
X      .endoperation;
X    .endnode;
X
X    .node 26 operation;
X      .inputs M12[0:7] ;
X      .outputs v12[0:7] ;
X      .successors 34 ;	#  predecessors 25 
X      .attribute constraint delay 26 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 27 operation;
X      .inputs X24[0:0] X23[0:0] X22[0:0] X21[0:0] 
X	X20[0:0] X19[0:0] X18[0:0] X17[0:0] 
X	;
X      .outputs M13[0:0] M13[1:1] M13[2:2] M13[3:3] 
X	M13[4:4] M13[5:5] M13[6:6] M13[7:7] 
X	;
X      .successors 28 ;	#  predecessors 2 
X      .operation logic 17 ;
X        #	Expression 0
X        M13[0:0] = X24[0:0] ;
X        M13[1:1] = X23[0:0] ;
X        M13[2:2] = X22[0:0] ;
X        M13[3:3] = X21[0:0] ;
X        M13[4:4] = X20[0:0] ;
X        M13[5:5] = X19[0:0] ;
X        M13[6:6] = X18[0:0] ;
X        M13[7:7] = X17[0:0] ;
X        .attribute delay 0 level;
X        .attribute area 8 literal;
X      .endoperation;
X    .endnode;
X
X    .node 28 operation;
X      .inputs M13[0:7] ;
X      .outputs v13[0:7] ;
X      .successors 34 ;	#  predecessors 27 
X      .attribute constraint delay 28 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 29 operation;
X      .inputs X8[0:0] X7[0:0] X6[0:0] X5[0:0] 
X	X4[0:0] X3[0:0] X2[0:0] X1[0:0] 
X	;
X      .outputs M14[0:0] M14[1:1] M14[2:2] M14[3:3] 
X	M14[4:4] M14[5:5] M14[6:6] M14[7:7] 
X	;
X      .successors 30 ;	#  predecessors 2 
X      .operation logic 18 ;
X        #	Expression 0
X        M14[0:0] = X8[0:0] ;
X        M14[1:1] = X7[0:0] ;
X        M14[2:2] = X6[0:0] ;
X        M14[3:3] = X5[0:0] ;
X        M14[4:4] = X4[0:0] ;
X        M14[5:5] = X3[0:0] ;
X        M14[6:6] = X2[0:0] ;
X        M14[7:7] = X1[0:0] ;
X        .attribute delay 0 level;
X        .attribute area 8 literal;
X      .endoperation;
X    .endnode;
X
X    .node 30 operation;
X      .inputs M14[0:7] ;
X      .outputs v14[0:7] ;
X      .successors 34 ;	#  predecessors 29 
X      .attribute constraint delay 30 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 31 operation;
X      .inputs X16[0:0] X15[0:0] X14[0:0] X13[0:0] 
X	X12[0:0] X11[0:0] X10[0:0] X9[0:0] 
X	;
X      .outputs M15[0:0] M15[1:1] M15[2:2] M15[3:3] 
X	M15[4:4] M15[5:5] M15[6:6] M15[7:7] 
X	;
X      .successors 32 ;	#  predecessors 2 
X      .operation logic 19 ;
X        #	Expression 0
X        M15[0:0] = X16[0:0] ;
X        M15[1:1] = X15[0:0] ;
X        M15[2:2] = X14[0:0] ;
X        M15[3:3] = X13[0:0] ;
X        M15[4:4] = X12[0:0] ;
X        M15[5:5] = X11[0:0] ;
X        M15[6:6] = X10[0:0] ;
X        M15[7:7] = X9[0:0] ;
X        .attribute delay 0 level;
X        .attribute area 8 literal;
X      .endoperation;
X    .endnode;
X
X    .node 32 operation;
X      .inputs M15[0:7] ;
X      .outputs v15[0:7] ;
X      .successors 34 ;	#  predecessors 31 
X      .attribute constraint delay 32 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 33 operation;
X      .inputs 0b1 ;
X      .outputs ready[0:0] ;
X      .successors 34 ;	#  predecessors 2 
X      .attribute constraint delay 33 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 34 operation;
X      .inputs 0b0 ;
X      .outputs ready[0:0] ;
X      .successors 35 ;	#  predecessors 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 33 
X      .attribute constraint delay 34 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 35 nop;	#	sink node
X      .successors ;	#  predecessors 34 
X    .endnode;
X
X    .attribute constraint delay 4 1 cycles;
X    .attribute constraint delay 6 1 cycles;
X    .attribute constraint delay 8 1 cycles;
X    .attribute constraint delay 10 1 cycles;
X    .attribute constraint delay 12 1 cycles;
X    .attribute constraint delay 14 1 cycles;
X    .attribute constraint delay 16 1 cycles;
X    .attribute constraint delay 18 1 cycles;
X    .attribute constraint delay 20 1 cycles;
X    .attribute constraint delay 22 1 cycles;
X    .attribute constraint delay 24 1 cycles;
X    .attribute constraint delay 26 1 cycles;
X    .attribute constraint delay 28 1 cycles;
X    .attribute constraint delay 30 1 cycles;
X    .attribute constraint delay 32 1 cycles;
X    .attribute constraint delay 33 1 cycles;
X    .attribute constraint delay 34 1 cycles;
X    .endpolargraph;
X.endmodel tseng ;
END_OF_FILE
if test 27508 -ne `wc -c <'tseng/tseng.sif'`; then
    echo shar: \"'tseng/tseng.sif'\" unpacked with wrong size!
fi
# end of 'tseng/tseng.sif'
fi
if test -f 'tseng/tseng.out.gold' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'tseng/tseng.out.gold'\"
else
echo shar: Extracting \"'tseng/tseng.out.gold'\" \(7182 characters\)
sed "s/^X//" >'tseng/tseng.out.gold' <<'END_OF_FILE'
X122 ariadne extract
Xreset[0:0]
Xready[0:0]
XHEX v1_0 v1[0:0] v1[1:1] v1[2:2] v1[3:3]
XHEX v1_1 v1[4:4] v1[5:5] v1[6:6] v1[7:7]
XHEX v2_0 v2[0:0] v2[1:1] v2[2:2] v2[3:3]
XHEX v2_1 v2[4:4] v2[5:5] v2[6:6] v2[7:7]
XHEX v3_0 v3[0:0] v3[1:1] v3[2:2] v3[3:3]
XHEX v3_1 v3[4:4] v3[5:5] v3[6:6] v3[7:7]
XHEX v4_0 v4[0:0] v4[1:1] v4[2:2] v4[3:3]
XHEX v4_1 v4[4:4] v4[5:5] v4[6:6] v4[7:7]
XHEX v5_0 v5[0:0] v5[1:1] v5[2:2] v5[3:3]
XHEX v5_1 v5[4:4] v5[5:5] v5[6:6] v5[7:7]
XHEX v6_0 v6[0:0] v6[1:1] v6[2:2] v6[3:3]
XHEX v6_1 v6[4:4] v6[5:5] v6[6:6] v6[7:7]
XHEX v7_0 v7[0:0] v7[1:1] v7[2:2] v7[3:3]
XHEX v7_1 v7[4:4] v7[5:5] v7[6:6] v7[7:7]
XHEX v8_0 v8[0:0] v8[1:1] v8[2:2] v8[3:3]
XHEX v8_1 v8[4:4] v8[5:5] v8[6:6] v8[7:7]
XHEX v9_0 v9[0:0] v9[1:1] v9[2:2] v9[3:3]
XHEX v9_1 v9[4:4] v9[5:5] v9[6:6] v9[7:7]
XHEX v10_0 v10[0:0] v10[1:1] v10[2:2] v10[3:3]
XHEX v10_1 v10[4:4] v10[5:5] v10[6:6] v10[7:7]
XHEX v11_0 v11[0:0] v11[1:1] v11[2:2] v11[3:3]
XHEX v11_1 v11[4:4] v11[5:5] v11[6:6] v11[7:7]
XHEX v12_0 v12[0:0] v12[1:1] v12[2:2] v12[3:3]
XHEX v12_1 v12[4:4] v12[5:5] v12[6:6] v12[7:7]
XHEX v13_0 v13[0:0] v13[1:1] v13[2:2] v13[3:3]
XHEX v13_1 v13[4:4] v13[5:5] v13[6:6] v13[7:7]
XHEX v14_0 v14[0:0] v14[1:1] v14[2:2] v14[3:3]
XHEX v14_1 v14[4:4] v14[5:5] v14[6:6] v14[7:7]
XHEX v15_0 v15[0:0] v15[1:1] v15[2:2] v15[3:3]
XHEX v15_1 v15[4:4] v15[5:5] v15[6:6] v15[7:7]
X     0:00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X     2:10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X     4:00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X     9:01001100000001000010110000010100001100000000000000100000001100000000000000100000001100000000000000100000001100000000000000
X    10:00001100000001000010110000010100001100000000000000100000001100000000000000100000001100000000000000100000001100000000000000
X    11:00001100000001000010110000010100001100000000000000100000001100000000000000100000001100000000000000100000001100000000000000
X    13:00001100000001000010110000010100001100000000000000100000001100000000000000100000001100000000000000100000001100000000000000
X    14:00001100000001000010110000010100001100000000000000100000001100000000000000100000001100000000000000100000001100000000000000
X    15:01010000000100000000101000010100000101000000000000000000000111100001000000100000000000000001000000001010000100000001000000
X    16:00010000000100000000101000010100000101000000000000000000000111100001000000100000000000000001000000001010000100000001000000
X    17:00010000000100000000101000010100000101000000000000000000000111100001000000100000000000000001000000001010000100000001000000
X    18:01110100001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000
X    19:01110100001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000
X    20:00110100001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000
X    21:00110100001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000
X    22:00110100001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000
X    23:00110100001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000
X    24:00110100001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000
X    29:01100000001000101000001000101000001101000010100000000010101101100010001010101000000000000010000000000010001000000010001010
X    30:00100000001000101000001000101000001101000010100000000010101101100010001010101000000000000010000000000010001000000010001010
X    31:00100000001000101000001000101000001101000010100000000010101101100010001010101000000000000010000000000010001000000010001010
X    32:01111111000000001011000010010100100011101010011010100010101011110011011100011011000101010000111100100111001000110010110010
X    33:01111111000000001011000010010100100011101010011010100010101011110011011100011011000101010000111100100111001000110010110010
X    34:00111111000000001011000010010100100011101010011010100010101011110011011100011011000101010000111100100111001000110010110010
X    35:00111111000000001011000010010100100011101010011010100010101011110011011100011011000101010000111100100111001000110010110010
X    36:00111111000000001011000010010100100011101010011010100010101011110011011100011011000101010000111100100111001000110010110010
X    37:00111111000000001011000010010100100011101010011010100010101011110011011100011011000101010000111100100111001000110010110010
X    38:00111111000000001011000010010100100011101010011010100010101011110011011100011011000101010000111100100111001000110010110010
X    39:00111111000000001011000010010100100011101010011010100010101011110011011100011011000101010000111100100111001000110010110010
X   127:01000001001110011011111110010100101010110010011010111001000010110111100010011011001000000000000100111111100000010011100110
X   128:00000001001110011011111110010100101010110010011010111001000010110111100010011011001000000000000100111111100000010011100110
X   129:00000001001110011011111110010100101010110010011010111001000010110111100010011011001000000000000100111111100000010011100110
X   155:00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X   157:10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X   159:00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X   160:01110000000001000000110000110000000110000010110000111000001100000010100000000000000100000010000000001100000101000000000000
X   161:01110000000001000000110000110000000110000010110000111000001100000010100000000000000100000010000000001100000101000000000000
X   162:00110000000001000000110000110000000110000010110000111000001100000010100000000000000100000010000000001100000101000000000000
X   163:00110000000001000000110000110000000110000010110000111000001100000010100000000000000100000010000000001100000101000000000000
X   164:00110000000001000000110000110000000110000010110000111000001100000010100000000000000100000010000000001100000101000000000000
X   165:00110000000001000000110000110000000110000010110000111000001100000010100000000000000100000010000000001100000101000000000000
X   166:00110000000001000000110000110000000110000010110000111000001100000010100000000000000100000010000000001100000101000000000000
X   177:01010000001100100111010000110000000001000010110000111100011100100010001001000000000000000001000000110100000100000011001001
X   178:00010000001100100111010000110000000001000010110000111100011100100010001001000000000000000001000000110100000100000011001001
X   179:00010000001100100111010000110000000001000010110000111100011100100010001001000000000000000001000000110100000100000011001001
END_OF_FILE
if test 7182 -ne `wc -c <'tseng/tseng.out.gold'`; then
    echo shar: \"'tseng/tseng.out.gold'\" unpacked with wrong size!
fi
# end of 'tseng/tseng.out.gold'
fi
echo shar: End of shell archive.
exit 0


