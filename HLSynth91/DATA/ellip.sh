
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  elliptic/elliptic.hc elliptic/elliptic.pat
#   elliptic/elliptic.mon elliptic/add_16.sif elliptic/elliptic.sif
#   elliptic/smultiply_16.sif elliptic/subtract_16.sif
#   elliptic/elliptic.out.gold
# Wrapped by synthesis@sirius on Thu Jul 26 17:15:59 1990
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'elliptic/elliptic.hc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'elliptic/elliptic.hc'\"
else
echo shar: Extracting \"'elliptic/elliptic.hc'\" \(4440 characters\)
sed "s/^X//" >'elliptic/elliptic.hc' <<'END_OF_FILE'
X/*
X *
X *	5th Order Elliptic Filter
X *
X *	Rajesh Gupta
X *	nov 12, 1989
X *
X *	updated for HardwareC 2.0: R. Gupta 4/16/90
X *
X
X This example is translated from ISPS description supplied by
X Elizabeth Dirkes in a private communication. From the ISPS
X description the following changes have been done:
X
X	1. multiplications by constant 2 have been replaced by weights
X	   stored in eight internal registers.
X
X	2. infinite while loop removed (see below).
X
X
X Elliptic filters equations are analogous to Chebyshev Filters defined
X below:
X
X	10^(a/10) = 1 + e^2 cos^2 nu			(1a)
X	omega = cos u					(1b)
X
X	where u is the parametric variable and n is the degree. The equations
Xfor Elliptic filter are obtained by replacing cosines in (1) by the 
XJacobian cd elliptic functions.
X
XParameter selection:
X-------------------
X	one is usually given passband ripple, min stopband loss, elliptic
X	modulus and stopband-edge frequency. From these the degree 'n'
X	of the filter must be determined using the ``degree equation''.
X	For details the reader is referred to: 
X
X	H. J. Orchard, ``Adjusting the Parameters in Elliptic-Function Filters''
X	in IEEE Trans CAS, vol 37, no 5, May 1990.
X
X
XThis filter is composed entirely of adders and multipliers. Thus making this
Xa good example for study of effects of resource sharing in hilevel synthesis. 
XThere is not much explicit control except those dictated by hardware sequencing.
X"Process" declaration of this filter allows one to remove the outer infinite
Xloop since process semantincs in HardwareC already supports this operation.
X
X
X
X *
X */
X
X#include "../templates/library.hc"
X#define	SIZE		16
X#define	TRUE		1
X#define	FALSE		0
X
Xprocess elliptic(inp, sv2, sv13, sv18, sv26, sv33, sv38, sv39, reset, over)
X
X	/* State Variables */
X
X    inout port inp[SIZE];
X    inout port sv2[SIZE];
X    inout port sv13[SIZE];
X    inout port sv18[SIZE];
X    inout port sv26[SIZE];
X    inout port sv33[SIZE];
X    inout port sv38[SIZE];
X    inout port sv39[SIZE];
X    in port reset;
X    out port over;
X
X[
X	/* weight registers */
X
X	register rega[SIZE] ;
X	register regb[SIZE] ;
X	register regc[SIZE] ;
X	register regd[SIZE] ;
X	register rege[SIZE] ;
X	register regf[SIZE] ;
X	register regg[SIZE] ;
X	register regh[SIZE] ;
X
X	/* internal variables */
X	
X	boolean inpi[SIZE];
X	boolean outpi[SIZE];
X    	boolean sv2i[SIZE];
X    	boolean sv13i[SIZE];
X    	boolean sv18i[SIZE];
X    	boolean sv26i[SIZE];
X    	boolean sv33i[SIZE];
X    	boolean sv38i[SIZE];
X    	boolean sv39i[SIZE];
X
X	/* Temporary.Results */
X
X    boolean op3[SIZE];
X    boolean op32[SIZE];
X    boolean op12[SIZE];
X    boolean op20[SIZE];
X    boolean op25[SIZE];
X    boolean op21[SIZE];
X    boolean op24[SIZE];
X    boolean op19[SIZE];
X    boolean op27[SIZE];
X    boolean op11[SIZE];
X    boolean op22[SIZE];
X    boolean op29[SIZE];
X    boolean op9[SIZE];
X    boolean op30[SIZE];
X    boolean op8[SIZE];
X    boolean op31[SIZE];
X    boolean op7[SIZE];
X    boolean op10[SIZE];
X    boolean op28[SIZE];
X    boolean op41[SIZE];
X    boolean op6[SIZE];
X    boolean op15[SIZE];
X    boolean op35[SIZE];
X    boolean op40[SIZE];
X    boolean op4[SIZE];
X    boolean op16[SIZE];
X    boolean op36[SIZE];
X
X	/* instruction.Execution */
X
X	if (reset) {
X		load rega=2;
X		load regb=2;
X		load regc=2;
X		load regd=2;
X		load rege=2;
X		load regf=2;
X		load regg=2;
X		load regh=2;
X	} else {
X		inpi = read(inp);
X		sv2i = read(sv2);
X		op3 = inpi + sv2i;
X		sv33i = read(sv33);
X		sv39i = read(sv39);
X		op32 = sv33i + sv39i;
X		sv13i  = read(sv13);
X		op12 = op3 + sv13i;
X		sv26i = read(sv26);
X		op20 = op12 + sv26i;
X		op25 = op20 + op32;
X		op21 = op25 * rega;
X		op24 = op25 * regb;
X		op19 = op12 + op21;
X		op27 = op24 + op32;
X		op11 = op12 + op19;
X		op22 = op19 + op25;
X		op29 = op27 + op32;
X		op9 = op11 * regc;
X		sv26i = op22 + op27;
X		write sv26 = sv26i;
X		op30 = op29 * regd;
X		op8 = op3 + op9;
X		op31 = op30 + sv39i;
X		op7 = op3 + op8;
X		op10 = op8 + op19;
X		op28 = op27 + op31;
X		op41 = op31 + sv39i;
X		op6 = op7 * rege;
X		sv18i = read(sv18);
X		op15 = op10 + sv18i;
X		sv38i = read(sv38);
X		op35 = sv38i + op28;
X		outpi = op41 * regf; 
X		op4 = inpi + op6;
X		op16 = op15 * regg;
X		op36 = op35 * regh;
X		sv39i = op31 + outpi; 
X		write sv39 = sv39i;
X		sv2i = op4 + op8;
X		write sv2 = sv2i;
X		sv18i = op16 + sv18i;
X		write sv18 = sv18i;
X		sv38i = sv38i + op36;
X		write sv38 = sv38i;
X		sv13i = op15 + sv18i;
X		write sv13 = sv13i;
X		sv33i = sv38i + op35;
X		write sv33 = sv33i;
X	};
X	write over=1;
X	write over=0;
X]/*elliptic*/
END_OF_FILE
if test 4440 -ne `wc -c <'elliptic/elliptic.hc'`; then
    echo shar: \"'elliptic/elliptic.hc'\" unpacked with wrong size!
fi
# end of 'elliptic/elliptic.hc'
fi
if test -f 'elliptic/elliptic.pat' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'elliptic/elliptic.pat'\"
else
echo shar: Extracting \"'elliptic/elliptic.pat'\" \(19144 characters\)
sed "s/^X//" >'elliptic/elliptic.pat' <<'END_OF_FILE'
X# elliptic filter input patterns file
X#
X# we load following values into the 8 state registers
X#
X#	inp = 5 sv2 = 6 sv13 = 7 sv18 = 8 sv26 = 9 sv33 = 10 sv38 = 11 sv39 = 12
X#
X#SET #1
X#======
X#Starting values:
X#	(5 6 7 8 9 10 11 12)    (5 6 7 8 9 a b c)
X#End values:
X#	(5 864 1217 814 285 1292 865 912)	(5 360 4c1 32e 11d 50c 361 390)
X#
X#CONTINUED:
X#==========
X#Starting values:
X#	(5 864 1217 814 285 1292 865 912)       (5 360 4c1 32e 11d 50c 361 390)
X#End values:
X#	(5 84282 119503 79940 27165 121606 81359 85908) (5 1493a 1d2cf 13844 6a1d 1db06 13dcf 14f94)
X#
X#SET #2
X#======
X#Starting values:
X#        (13 14 15 16 17 18 19 20)       (d e f 10 11 12 13 14)
X#End values:
X#        (13 1816 2521 1686 565 2452 1641 1720)  (d 718 9d9 696 235 994 669 6b8)
X#
X#CONTINUED:
X#==========
X#Starting values:
X#(13 1816 2521 1686 565 2452 1641 1720)  (d 718 9d9 696 235 994 669 6b8)
X#End values:
X#(13 170402 241047 161260 53957 237870 159127 167708)    (d 299a2 3ad97 275ec d2c5 3a12e 26d97 28f1c)
X#
X.inputs CLK EN RESET reset[0:0] 
Xinp[0:0] inp[1:1] inp[2:2] inp[3:3] inp[4:4] inp[5:5] inp[6:6] inp[7:7] 
Xinp[8:8] inp[9:9] inp[10:10] inp[11:11] inp[12:12] inp[13:13] inp[14:14] inp[15:15] 
Xsv2[0:0] sv2[1:1] sv2[2:2] sv2[3:3] sv2[4:4] sv2[5:5] sv2[6:6] sv2[7:7] 
Xsv2[8:8] sv2[9:9] sv2[10:10] sv2[11:11] sv2[12:12] sv2[13:13] sv2[14:14] sv2[15:15] 
Xsv13[0:0] sv13[1:1] sv13[2:2] sv13[3:3] sv13[4:4] sv13[5:5] sv13[6:6] sv13[7:7] 
Xsv13[8:8] sv13[9:9] sv13[10:10] sv13[11:11] sv13[12:12] sv13[13:13] sv13[14:14] sv13[15:15] 
Xsv18[0:0] sv18[1:1] sv18[2:2] sv18[3:3] sv18[4:4] sv18[5:5] sv18[6:6] sv18[7:7] 
Xsv18[8:8] sv18[9:9] sv18[10:10] sv18[11:11] sv18[12:12] sv18[13:13] sv18[14:14] sv18[15:15] 
Xsv26[0:0] sv26[1:1] sv26[2:2] sv26[3:3] sv26[4:4] sv26[5:5] sv26[6:6] sv26[7:7] 
Xsv26[8:8] sv26[9:9] sv26[10:10] sv26[11:11] sv26[12:12] sv26[13:13] sv26[14:14] sv26[15:15] 
Xsv33[0:0] sv33[1:1] sv33[2:2] sv33[3:3] sv33[4:4] sv33[5:5] sv33[6:6] 
Xsv33[7:7] sv33[8:8] sv33[9:9] sv33[10:10] sv33[11:11] sv33[12:12] sv33[13:13] sv33[14:14] sv33[15:15] 
Xsv38[0:0] sv38[1:1] sv38[2:2] sv38[3:3] sv38[4:4] sv38[5:5] sv38[6:6] sv38[7:7] 
Xsv38[8:8] sv38[9:9] sv38[10:10] sv38[11:11] sv38[12:12] sv38[13:13] sv38[14:14] sv38[15:15] 
Xsv39[0:0] sv39[1:1] sv39[2:2] sv39[3:3] sv39[4:4] sv39[5:5] sv39[6:6] sv39[7:7] 
Xsv39[8:8] sv39[9:9] sv39[10:10] sv39[11:11] sv39[12:12] sv39[13:13] sv39[14:14] sv39[15:15] ;
X#
X# reset on
X1111 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 ;
X0111 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1111 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0111 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X# reset off
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 1010000000000000 0110000000000000 1110000000000000 0001000000000000 1001000000000000 0101000000000000 1101000000000000 0011000000000000 ;
X# load values; note that all value loads occur in parallel
X1100 1010000000000000 0110000000000000 1110000000000000 0001000000000000 1001000000000000 0101000000000000 1101000000000000 0011000000000000 ;
X0100 1010000000000000 0110000000000000 1110000000000000 0001000000000000 1001000000000000 0101000000000000 1101000000000000 0011000000000000 ;
X1100 1010000000000000 0110000000000000 1110000000000000 0001000000000000 1001000000000000 0101000000000000 1101000000000000 0011000000000000 ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X# SET #1 CONTINUED
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X# SET #2
X#        (13 14 15 16 17 18 19 20)       (d e f 10 11 12 13 14)
X1100 1011000000000000 0111000000000000 1111000000000000 0000100000000000 1000100000000000 0100100000000000 1100100000000000 0010100000000000 ;
X0100 1011000000000000 0111000000000000 1111000000000000 0000100000000000 1000100000000000 0100100000000000 1100100000000000 0010100000000000 ;
X1100 1011000000000000 0111000000000000 1111000000000000 0000100000000000 1000100000000000 0100100000000000 1100100000000000 0010100000000000 ;
X0100 1011000000000000 0111000000000000 1111000000000000 0000100000000000 1000100000000000 0100100000000000 1100100000000000 0010100000000000 ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X1100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
X0100 ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ;
END_OF_FILE
if test 19144 -ne `wc -c <'elliptic/elliptic.pat'`; then
    echo shar: \"'elliptic/elliptic.pat'\" unpacked with wrong size!
fi
# end of 'elliptic/elliptic.pat'
fi
if test -f 'elliptic/elliptic.mon' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'elliptic/elliptic.mon'\"
else
echo shar: Extracting \"'elliptic/elliptic.mon'\" \(1705 characters\)
sed "s/^X//" >'elliptic/elliptic.mon' <<'END_OF_FILE'
Xreset[0:0]
Xover[0:0]
XHEX INP0 inp[0:0] inp[1:1] inp[2:2] inp[3:3]
XHEX INP1 inp[4:4] inp[5:5] inp[6:6] inp[7:7]
XHEX INP2 inp[8:8] inp[9:9] inp[10:10] inp[11:11]
XHEX INP3 inp[12:12] inp[13:13] inp[14:14] inp[15:15]
XHEX SV2_0 sv2[0:0] sv2[1:1] sv2[2:2] sv2[3:3]
XHEX SV2_1 sv2[4:4] sv2[5:5] sv2[6:6] sv2[7:7]
XHEX SV2_2 sv2[8:8] sv2[9:9] sv2[10:10] sv2[11:11]
XHEX SV2_3 sv2[12:12] sv2[13:13] sv2[14:14] sv2[15:15]
XHEX SV13_0 sv13[0:0] sv13[1:1] sv13[2:2] sv13[3:3]
XHEX SV13_1 sv13[4:4] sv13[5:5] sv13[6:6] sv13[7:7]
XHEX SV13_2 sv13[8:8] sv13[9:9] sv13[10:10] sv13[11:11]
XHEX SV13_3 sv13[12:12] sv13[13:13] sv13[14:14] sv13[15:15]
XHEX SV18_0 sv18[0:0] sv18[1:1] sv18[2:2] sv18[3:3]
XHEX SV18_1 sv18[4:4] sv18[5:5] sv18[6:6] sv18[7:7]
XHEX SV18_2 sv18[8:8] sv18[9:9] sv18[10:10] sv18[11:11]
XHEX SV18_3 sv18[12:12] sv18[13:13] sv18[14:14] sv18[15:15]
XHEX SV26_0 sv26[0:0] sv26[1:1] sv26[2:2] sv26[3:3]
XHEX SV26_1 sv26[4:4] sv26[5:5] sv26[6:6] sv26[7:7]
XHEX SV26_2 sv26[8:8] sv26[9:9] sv26[10:10] sv26[11:11]
XHEX SV26_3 sv26[12:12] sv26[13:13] sv26[14:14] sv26[15:15]
XHEX SV33_0 sv33[0:0] sv33[1:1] sv33[2:2] sv33[3:3]
XHEX SV33_1 sv33[4:4] sv33[5:5] sv33[6:6] sv33[7:7]
XHEX SV33_2 sv33[8:8] sv33[9:9] sv33[10:10] sv33[11:11]
XHEX SV33_3 sv33[12:12] sv33[13:13] sv33[14:14] sv33[15:15]
XHEX SV38_0 sv38[0:0] sv38[1:1] sv38[2:2] sv38[3:3]
XHEX SV38_1 sv38[4:4] sv38[5:5] sv38[6:6] sv38[7:7]
XHEX SV38_2 sv38[8:8] sv38[9:9] sv38[10:10] sv38[11:11]
XHEX SV38_3 sv38[12:12] sv38[13:13] sv38[14:14] sv38[15:15]
XHEX SV39_0 sv39[0:0] sv39[1:1] sv39[2:2] sv39[3:3]
XHEX SV39_1 sv39[4:4] sv39[5:5] sv39[6:6] sv39[7:7]
XHEX SV39_2 sv39[8:8] sv39[9:9] sv39[10:10] sv39[11:11]
XHEX SV39_3 sv39[12:12] sv39[13:13] sv39[14:14] sv39[15:15]
END_OF_FILE
if test 1705 -ne `wc -c <'elliptic/elliptic.mon'`; then
    echo shar: \"'elliptic/elliptic.mon'\" unpacked with wrong size!
fi
# end of 'elliptic/elliptic.mon'
fi
if test -f 'elliptic/add_16.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'elliptic/add_16.sif'\"
else
echo shar: Extracting \"'elliptic/add_16.sif'\" \(7125 characters\)
sed "s/^X//" >'elliptic/add_16.sif' <<'END_OF_FILE'
X#
X#	Sif model add_16	Printed Tue Jul 24 15:00:52 1990
X#
X.model add_16 sequencing ; 
X  .inputs op1[16] op2[16] ;
X  .outputs return_value[17] ;
X    #	Index 1
X    .polargraph 1 3;
X    .variable T92 T88 T82 T76 
X	T70 T64 T58 T52 
X	T46 T40 T34 T28 
X	T22 T16 T10 T4 
X	T1 ;
X    #	3 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op1[0:0] op2[0:0] op1[1:1] op2[1:1] 
X	op1[2:2] op2[2:2] op1[3:3] op2[3:3] 
X	op1[4:4] op2[4:4] op1[5:5] op2[5:5] 
X	op1[6:6] op2[6:6] op1[7:7] op2[7:7] 
X	op1[8:8] op2[8:8] op1[9:9] op2[9:9] 
X	op1[10:10] op2[10:10] op1[11:11] op2[11:11] 
X	op1[12:12] op2[12:12] op1[13:13] op2[13:13] 
X	op1[14:14] op2[14:14] op1[15:15] op2[15:15] 
X	;
X      .outputs T1[0:0] T4[0:0] T10[0:0] T16[0:0] 
X	T22[0:0] T28[0:0] T34[0:0] T40[0:0] 
X	T46[0:0] T52[0:0] T58[0:0] T64[0:0] 
X	T70[0:0] T76[0:0] T82[0:0] T88[0:0] 
X	T92[0:0] ;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        T1[0:0] = ((op1[0:0]  op2[0:0]' )+(op1[0:0]'  op2[0:0] ));
X        T2[0:0] = (op1[0:0]  op2[0:0] );
X        T3[0:0] = ((op1[1:1]  op2[1:1]' )+(op1[1:1]'  op2[1:1] ));
X        T4[0:0] = ((T3[0:0]  T2[0:0]' )+(T3[0:0]'  T2[0:0] ));
X        T5[0:0] = (op1[1:1]  op2[1:1] );
X        T6[0:0] = (op1[1:1] +op2[1:1] );
X        T7[0:0] = (T2[0:0]  T6[0:0] );
X        T8[0:0] = (T5[0:0] +T7[0:0] );
X        T9[0:0] = ((op1[2:2]  op2[2:2]' )+(op1[2:2]'  op2[2:2] ));
X        T10[0:0] = ((T9[0:0]  T8[0:0]' )+(T9[0:0]'  T8[0:0] ));
X        T11[0:0] = (op1[2:2]  op2[2:2] );
X        T12[0:0] = (op1[2:2] +op2[2:2] );
X        T13[0:0] = (T8[0:0]  T12[0:0] );
X        T14[0:0] = (T11[0:0] +T13[0:0] );
X        T15[0:0] = ((op1[3:3]  op2[3:3]' )+(op1[3:3]'  op2[3:3] ));
X        T16[0:0] = ((T15[0:0]  T14[0:0]' )+(T15[0:0]'  T14[0:0] ));
X        T17[0:0] = (op1[3:3]  op2[3:3] );
X        T18[0:0] = (op1[3:3] +op2[3:3] );
X        T19[0:0] = (T14[0:0]  T18[0:0] );
X        T20[0:0] = (T17[0:0] +T19[0:0] );
X        T21[0:0] = ((op1[4:4]  op2[4:4]' )+(op1[4:4]'  op2[4:4] ));
X        T22[0:0] = ((T21[0:0]  T20[0:0]' )+(T21[0:0]'  T20[0:0] ));
X        T23[0:0] = (op1[4:4]  op2[4:4] );
X        T24[0:0] = (op1[4:4] +op2[4:4] );
X        T25[0:0] = (T20[0:0]  T24[0:0] );
X        T26[0:0] = (T23[0:0] +T25[0:0] );
X        T27[0:0] = ((op1[5:5]  op2[5:5]' )+(op1[5:5]'  op2[5:5] ));
X        T28[0:0] = ((T27[0:0]  T26[0:0]' )+(T27[0:0]'  T26[0:0] ));
X        T29[0:0] = (op1[5:5]  op2[5:5] );
X        T30[0:0] = (op1[5:5] +op2[5:5] );
X        T31[0:0] = (T26[0:0]  T30[0:0] );
X        T32[0:0] = (T29[0:0] +T31[0:0] );
X        T33[0:0] = ((op1[6:6]  op2[6:6]' )+(op1[6:6]'  op2[6:6] ));
X        T34[0:0] = ((T33[0:0]  T32[0:0]' )+(T33[0:0]'  T32[0:0] ));
X        T35[0:0] = (op1[6:6]  op2[6:6] );
X        T36[0:0] = (op1[6:6] +op2[6:6] );
X        T37[0:0] = (T32[0:0]  T36[0:0] );
X        T38[0:0] = (T35[0:0] +T37[0:0] );
X        T39[0:0] = ((op1[7:7]  op2[7:7]' )+(op1[7:7]'  op2[7:7] ));
X        T40[0:0] = ((T39[0:0]  T38[0:0]' )+(T39[0:0]'  T38[0:0] ));
X        T41[0:0] = (op1[7:7]  op2[7:7] );
X        T42[0:0] = (op1[7:7] +op2[7:7] );
X        T43[0:0] = (T38[0:0]  T42[0:0] );
X        T44[0:0] = (T41[0:0] +T43[0:0] );
X        T45[0:0] = ((op1[8:8]  op2[8:8]' )+(op1[8:8]'  op2[8:8] ));
X        T46[0:0] = ((T45[0:0]  T44[0:0]' )+(T45[0:0]'  T44[0:0] ));
X        T47[0:0] = (op1[8:8]  op2[8:8] );
X        T48[0:0] = (op1[8:8] +op2[8:8] );
X        T49[0:0] = (T44[0:0]  T48[0:0] );
X        T50[0:0] = (T47[0:0] +T49[0:0] );
X        T51[0:0] = ((op1[9:9]  op2[9:9]' )+(op1[9:9]'  op2[9:9] ));
X        T52[0:0] = ((T51[0:0]  T50[0:0]' )+(T51[0:0]'  T50[0:0] ));
X        T53[0:0] = (op1[9:9]  op2[9:9] );
X        T54[0:0] = (op1[9:9] +op2[9:9] );
X        T55[0:0] = (T50[0:0]  T54[0:0] );
X        T56[0:0] = (T53[0:0] +T55[0:0] );
X        T57[0:0] = ((op1[10:10]  op2[10:10]' )+(op1[10:10]'  op2[10:10] ));
X        T58[0:0] = ((T57[0:0]  T56[0:0]' )+(T57[0:0]'  T56[0:0] ));
X        T59[0:0] = (op1[10:10]  op2[10:10] );
X        T60[0:0] = (op1[10:10] +op2[10:10] );
X        T61[0:0] = (T56[0:0]  T60[0:0] );
X        T62[0:0] = (T59[0:0] +T61[0:0] );
X        T63[0:0] = ((op1[11:11]  op2[11:11]' )+(op1[11:11]'  op2[11:11] ));
X        T64[0:0] = ((T63[0:0]  T62[0:0]' )+(T63[0:0]'  T62[0:0] ));
X        T65[0:0] = (op1[11:11]  op2[11:11] );
X        T66[0:0] = (op1[11:11] +op2[11:11] );
X        T67[0:0] = (T62[0:0]  T66[0:0] );
X        T68[0:0] = (T65[0:0] +T67[0:0] );
X        T69[0:0] = ((op1[12:12]  op2[12:12]' )+(op1[12:12]'  op2[12:12] ));
X        T70[0:0] = ((T69[0:0]  T68[0:0]' )+(T69[0:0]'  T68[0:0] ));
X        T71[0:0] = (op1[12:12]  op2[12:12] );
X        T72[0:0] = (op1[12:12] +op2[12:12] );
X        T73[0:0] = (T68[0:0]  T72[0:0] );
X        T74[0:0] = (T71[0:0] +T73[0:0] );
X        T75[0:0] = ((op1[13:13]  op2[13:13]' )+(op1[13:13]'  op2[13:13] ));
X        T76[0:0] = ((T75[0:0]  T74[0:0]' )+(T75[0:0]'  T74[0:0] ));
X        T77[0:0] = (op1[13:13]  op2[13:13] );
X        T78[0:0] = (op1[13:13] +op2[13:13] );
X        T79[0:0] = (T74[0:0]  T78[0:0] );
X        T80[0:0] = (T77[0:0] +T79[0:0] );
X        T81[0:0] = ((op1[14:14]  op2[14:14]' )+(op1[14:14]'  op2[14:14] ));
X        T82[0:0] = ((T81[0:0]  T80[0:0]' )+(T81[0:0]'  T80[0:0] ));
X        T83[0:0] = (op1[14:14]  op2[14:14] );
X        T84[0:0] = (op1[14:14] +op2[14:14] );
X        T85[0:0] = (T80[0:0]  T84[0:0] );
X        T86[0:0] = (T83[0:0] +T85[0:0] );
X        T87[0:0] = ((op1[15:15]  op2[15:15]' )+(op1[15:15]'  op2[15:15] ));
X        T88[0:0] = ((T87[0:0]  T86[0:0]' )+(T87[0:0]'  T86[0:0] ));
X        T89[0:0] = (op1[15:15]  op2[15:15] );
X        T90[0:0] = (op1[15:15] +op2[15:15] );
X        T91[0:0] = (T86[0:0]  T90[0:0] );
X        T92[0:0] = (T89[0:0] +T91[0:0] );
X        .attribute delay 31 level;
X        .attribute area 400 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 nop;	#	sink node
X      .successors ;	#  predecessors 2 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] T1[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] T4[0:0] ;
X    .attribute hercules direct_connect return_value[2:2] T10[0:0] ;
X    .attribute hercules direct_connect return_value[3:3] T16[0:0] ;
X    .attribute hercules direct_connect return_value[4:4] T22[0:0] ;
X    .attribute hercules direct_connect return_value[5:5] T28[0:0] ;
X    .attribute hercules direct_connect return_value[6:6] T34[0:0] ;
X    .attribute hercules direct_connect return_value[7:7] T40[0:0] ;
X    .attribute hercules direct_connect return_value[8:8] T46[0:0] ;
X    .attribute hercules direct_connect return_value[9:9] T52[0:0] ;
X    .attribute hercules direct_connect return_value[10:10] T58[0:0] ;
X    .attribute hercules direct_connect return_value[11:11] T64[0:0] ;
X    .attribute hercules direct_connect return_value[12:12] T70[0:0] ;
X    .attribute hercules direct_connect return_value[13:13] T76[0:0] ;
X    .attribute hercules direct_connect return_value[14:14] T82[0:0] ;
X    .attribute hercules direct_connect return_value[15:15] T88[0:0] ;
X    .attribute hercules direct_connect return_value[16:16] T92[0:0] ;
X    .endpolargraph;
X.endmodel add_16 ;
END_OF_FILE
if test 7125 -ne `wc -c <'elliptic/add_16.sif'`; then
    echo shar: \"'elliptic/add_16.sif'\" unpacked with wrong size!
fi
# end of 'elliptic/add_16.sif'
fi
if test -f 'elliptic/elliptic.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'elliptic/elliptic.sif'\"
else
echo shar: Extracting \"'elliptic/elliptic.sif'\" \(15447 characters\)
sed "s/^X//" >'elliptic/elliptic.sif' <<'END_OF_FILE'
X#
X#	Sif model elliptic	Printed Tue Jul 24 15:02:41 1990
X#
X.model elliptic sequencing process; 
X  .inputs port reset ;
X  .outputs port over ;
X  .inouts port inp[16] port sv2[16] port sv13[16] port sv18[16] 
X	port sv26[16] port sv33[16] port sv38[16] port sv39[16] 
X	;
X    #	Index 1
X    .polargraph 1 5;
X    .variable T42[17] T41[17] T40[17] T36[32] 
X	T39[17] T35[32] T38[17] T34[17] 
X	T37[17] T33[32] T32[17] T30[17] 
X	T28[32] T27[17] T26[17] T31[16] 
X	T29[16] T25[17] T24[17] T23[17] 
X	T22[17] T21[32] T19[32] T18[17] 
X	T20[17] T17[17] T16[17] T15[17] 
X	T14[17] T13[32] T12[32] T11[17] 
X	T6[17] T10[17] T9[16] T8[17] 
X	T7[16] T3[17] T5[16] T4[16] 
X	T2[16] T1[16] ;
X    .variable register regh[16] register regg[16] register regf[16] register rege[16] 
X	register regd[16] register regc[16] register regb[16] register rega[16] 
X	;
X    #	5 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 cond;
X      .successors 3 ;	#  predecessors 1 
X      .cond reset[0:0] ;	#	Latched
X      .case 1 ;
X        #	Index 2
X        .polargraph 1 10;
X        #	10 nodes
X        .node 1 nop;	#	source node
X          .successors 2 3 4 5 6 7 8 9 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs 0b0100000000000000 ;
X          .outputs rega[0:15] ;
X          .successors 10 ;	#  predecessors 1 
X          .attribute constraint delay 2 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 3 operation;
X          .inputs 0b0100000000000000 ;
X          .outputs regb[0:15] ;
X          .successors 10 ;	#  predecessors 1 
X          .attribute constraint delay 3 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 4 operation;
X          .inputs 0b0100000000000000 ;
X          .outputs regc[0:15] ;
X          .successors 10 ;	#  predecessors 1 
X          .attribute constraint delay 4 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 5 operation;
X          .inputs 0b0100000000000000 ;
X          .outputs regd[0:15] ;
X          .successors 10 ;	#  predecessors 1 
X          .attribute constraint delay 5 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 6 operation;
X          .inputs 0b0100000000000000 ;
X          .outputs rege[0:15] ;
X          .successors 10 ;	#  predecessors 1 
X          .attribute constraint delay 6 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 7 operation;
X          .inputs 0b0100000000000000 ;
X          .outputs regf[0:15] ;
X          .successors 10 ;	#  predecessors 1 
X          .attribute constraint delay 7 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 8 operation;
X          .inputs 0b0100000000000000 ;
X          .outputs regg[0:15] ;
X          .successors 10 ;	#  predecessors 1 
X          .attribute constraint delay 8 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 9 operation;
X          .inputs 0b0100000000000000 ;
X          .outputs regh[0:15] ;
X          .successors 10 ;	#  predecessors 1 
X          .attribute constraint delay 9 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 10 nop;	#	sink node
X          .successors ;	#  predecessors 2 3 4 5 6 7 8 9 
X        .endnode;
X
X        .attribute constraint delay 2 1 cycles;
X        .attribute constraint delay 3 1 cycles;
X        .attribute constraint delay 4 1 cycles;
X        .attribute constraint delay 5 1 cycles;
X        .attribute constraint delay 6 1 cycles;
X        .attribute constraint delay 7 1 cycles;
X        .attribute constraint delay 8 1 cycles;
X        .attribute constraint delay 9 1 cycles;
X        .endpolargraph;
X      .endcase;
X      .case 0 ;
X        #	Index 3
X        .polargraph 1 51;
X        #	51 nodes
X        .node 1 nop;	#	source node
X          .successors 2 3 5 6 8 10 31 33 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs inp[0:15] ;
X          .outputs T1[0:15] ;
X          .successors 4 ;	#  predecessors 1 
X          .attribute constraint delay 2 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 3 operation;
X          .inputs sv2[0:15] ;
X          .outputs T2[0:15] ;
X          .successors 4 ;	#  predecessors 1 
X          .attribute constraint delay 3 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 4 proc;
X          .inputs T1[0:15] T2[0:15] ;
X          .outputs T3[0:16] ;
X          .successors 9 ;	#  predecessors 2 3 
X          .proc add with (16);
X        .endnode;
X
X        .node 5 operation;
X          .inputs sv33[0:15] ;
X          .outputs T4[0:15] ;
X          .successors 7 ;	#  predecessors 1 
X          .attribute constraint delay 5 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 6 operation;
X          .inputs sv39[0:15] ;
X          .outputs T5[0:15] ;
X          .successors 7 ;	#  predecessors 1 
X          .attribute constraint delay 6 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 7 proc;
X          .inputs T4[0:15] T5[0:15] ;
X          .outputs T6[0:16] ;
X          .successors 12 ;	#  predecessors 5 6 
X          .proc add with (16);
X        .endnode;
X
X        .node 8 operation;
X          .inputs sv13[0:15] ;
X          .outputs T7[0:15] ;
X          .successors 9 ;	#  predecessors 1 
X          .attribute constraint delay 8 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 9 proc;
X          .inputs T3[0:15] T7[0:15] ;
X          .outputs T8[0:16] ;
X          .successors 11 ;	#  predecessors 4 8 
X          .proc add with (16);
X        .endnode;
X
X        .node 10 operation;
X          .inputs sv26[0:15] ;
X          .outputs T9[0:15] ;
X          .successors 11 ;	#  predecessors 1 
X          .attribute constraint delay 10 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 11 proc;
X          .inputs T8[0:15] T9[0:15] ;
X          .outputs T10[0:16] ;
X          .successors 12 ;	#  predecessors 9 10 
X          .proc add with (16);
X        .endnode;
X
X        .node 12 proc;
X          .inputs T10[0:15] T6[0:15] ;
X          .outputs T11[0:16] ;
X          .successors 14 13 ;	#  predecessors 7 11 
X          .proc add with (16);
X        .endnode;
X
X        .node 13 proc;
X          .inputs T11[0:15] rega[0:15] ;
X          .outputs T12[0:31] ;
X          .successors 15 ;	#  predecessors 12 
X          .proc smultiply with (16);
X        .endnode;
X
X        .node 14 proc;
X          .inputs T11[0:15] regb[0:15] ;
X          .outputs T13[0:31] ;
X          .successors 16 ;	#  predecessors 12 
X          .proc smultiply with (16);
X        .endnode;
X
X        .node 15 proc;
X          .inputs T8[0:15] T12[0:15] ;
X          .outputs T14[0:16] ;
X          .successors 18 17 ;	#  predecessors 13 
X          .proc add with (16);
X        .endnode;
X
X        .node 16 proc;
X          .inputs T13[0:15] T6[0:15] ;
X          .outputs T15[0:16] ;
X          .successors 21 19 ;	#  predecessors 14 
X          .proc add with (16);
X        .endnode;
X
X        .node 17 proc;
X          .inputs T8[0:15] T14[0:15] ;
X          .outputs T16[0:16] ;
X          .successors 20 ;	#  predecessors 15 
X          .proc add with (16);
X        .endnode;
X
X        .node 18 proc;
X          .inputs T14[0:15] T11[0:15] ;
X          .outputs T17[0:16] ;
X          .successors 21 ;	#  predecessors 15 
X          .proc add with (16);
X        .endnode;
X
X        .node 19 proc;
X          .inputs T15[0:15] T6[0:15] ;
X          .outputs T18[0:16] ;
X          .successors 23 ;	#  predecessors 16 
X          .proc add with (16);
X        .endnode;
X
X        .node 20 proc;
X          .inputs T16[0:15] regc[0:15] ;
X          .outputs T19[0:31] ;
X          .successors 24 ;	#  predecessors 17 
X          .proc smultiply with (16);
X        .endnode;
X
X        .node 21 proc;
X          .inputs T17[0:15] T15[0:15] ;
X          .outputs T20[0:16] ;
X          .successors 22 ;	#  predecessors 16 18 
X          .proc add with (16);
X        .endnode;
X
X        .node 22 operation;
X          .inputs T20[0:15] ;
X          .outputs sv26[0:15] ;
X          .successors 51 ;	#  predecessors 21 
X          .attribute constraint delay 22 1 cycles;
X          .operation write;
X        .endnode;
X
X        .node 23 proc;
X          .inputs T18[0:15] regd[0:15] ;
X          .outputs T21[0:31] ;
X          .successors 25 ;	#  predecessors 19 
X          .proc smultiply with (16);
X        .endnode;
X
X        .node 24 proc;
X          .inputs T3[0:15] T19[0:15] ;
X          .outputs T22[0:16] ;
X          .successors 27 26 ;	#  predecessors 20 
X          .proc add with (16);
X        .endnode;
X
X        .node 25 proc;
X          .inputs T21[0:15] T5[0:15] ;
X          .outputs T23[0:16] ;
X          .successors 29 28 ;	#  predecessors 23 
X          .proc add with (16);
X        .endnode;
X
X        .node 26 proc;
X          .inputs T3[0:15] T22[0:15] ;
X          .outputs T24[0:16] ;
X          .successors 30 ;	#  predecessors 24 
X          .proc add with (16);
X        .endnode;
X
X        .node 27 proc;
X          .inputs T22[0:15] T14[0:15] ;
X          .outputs T25[0:16] ;
X          .successors 32 ;	#  predecessors 24 
X          .proc add with (16);
X        .endnode;
X
X        .node 28 proc;
X          .inputs T15[0:15] T23[0:15] ;
X          .outputs T26[0:16] ;
X          .successors 34 ;	#  predecessors 25 
X          .proc add with (16);
X        .endnode;
X
X        .node 29 proc;
X          .inputs T23[0:15] T5[0:15] ;
X          .outputs T27[0:16] ;
X          .successors 35 ;	#  predecessors 25 
X          .proc add with (16);
X        .endnode;
X
X        .node 30 proc;
X          .inputs T24[0:15] rege[0:15] ;
X          .outputs T28[0:31] ;
X          .successors 36 ;	#  predecessors 26 
X          .proc smultiply with (16);
X        .endnode;
X
X        .node 31 operation;
X          .inputs sv18[0:15] ;
X          .outputs T29[0:15] ;
X          .successors 32 ;	#  predecessors 1 
X          .attribute constraint delay 31 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 32 proc;
X          .inputs T25[0:15] T29[0:15] ;
X          .outputs T30[0:16] ;
X          .successors 37 ;	#  predecessors 27 31 
X          .proc add with (16);
X        .endnode;
X
X        .node 33 operation;
X          .inputs sv38[0:15] ;
X          .outputs T31[0:15] ;
X          .successors 34 ;	#  predecessors 1 
X          .attribute constraint delay 33 1 cycles;
X          .operation read;
X        .endnode;
X
X        .node 34 proc;
X          .inputs T31[0:15] T26[0:15] ;
X          .outputs T32[0:16] ;
X          .successors 38 ;	#  predecessors 28 33 
X          .proc add with (16);
X        .endnode;
X
X        .node 35 proc;
X          .inputs T27[0:15] regf[0:15] ;
X          .outputs T33[0:31] ;
X          .successors 39 ;	#  predecessors 29 
X          .proc smultiply with (16);
X        .endnode;
X
X        .node 36 proc;
X          .inputs T1[0:15] T28[0:15] ;
X          .outputs T34[0:16] ;
X          .successors 41 ;	#  predecessors 30 
X          .proc add with (16);
X        .endnode;
X
X        .node 37 proc;
X          .inputs T30[0:15] regg[0:15] ;
X          .outputs T35[0:31] ;
X          .successors 43 ;	#  predecessors 32 
X          .proc smultiply with (16);
X        .endnode;
X
X        .node 38 proc;
X          .inputs T32[0:15] regh[0:15] ;
X          .outputs T36[0:31] ;
X          .successors 45 ;	#  predecessors 34 
X          .proc smultiply with (16);
X        .endnode;
X
X        .node 39 proc;
X          .inputs T23[0:15] T33[0:15] ;
X          .outputs T37[0:16] ;
X          .successors 40 ;	#  predecessors 35 
X          .proc add with (16);
X        .endnode;
X
X        .node 40 operation;
X          .inputs T37[0:15] ;
X          .outputs sv39[0:15] ;
X          .successors 51 ;	#  predecessors 39 
X          .attribute constraint delay 40 1 cycles;
X          .operation write;
X        .endnode;
X
X        .node 41 proc;
X          .inputs T34[0:15] T22[0:15] ;
X          .outputs T38[0:16] ;
X          .successors 42 ;	#  predecessors 36 
X          .proc add with (16);
X        .endnode;
X
X        .node 42 operation;
X          .inputs T38[0:15] ;
X          .outputs sv2[0:15] ;
X          .successors 51 ;	#  predecessors 41 
X          .attribute constraint delay 42 1 cycles;
X          .operation write;
X        .endnode;
X
X        .node 43 proc;
X          .inputs T35[0:15] T29[0:15] ;
X          .outputs T39[0:16] ;
X          .successors 47 44 ;	#  predecessors 37 
X          .proc add with (16);
X        .endnode;
X
X        .node 44 operation;
X          .inputs T39[0:15] ;
X          .outputs sv18[0:15] ;
X          .successors 51 ;	#  predecessors 43 
X          .attribute constraint delay 44 1 cycles;
X          .operation write;
X        .endnode;
X
X        .node 45 proc;
X          .inputs T31[0:15] T36[0:15] ;
X          .outputs T40[0:16] ;
X          .successors 49 46 ;	#  predecessors 38 
X          .proc add with (16);
X        .endnode;
X
X        .node 46 operation;
X          .inputs T40[0:15] ;
X          .outputs sv38[0:15] ;
X          .successors 51 ;	#  predecessors 45 
X          .attribute constraint delay 46 1 cycles;
X          .operation write;
X        .endnode;
X
X        .node 47 proc;
X          .inputs T30[0:15] T39[0:15] ;
X          .outputs T41[0:16] ;
X          .successors 48 ;	#  predecessors 43 
X          .proc add with (16);
X        .endnode;
X
X        .node 48 operation;
X          .inputs T41[0:15] ;
X          .outputs sv13[0:15] ;
X          .successors 51 ;	#  predecessors 47 
X          .attribute constraint delay 48 1 cycles;
X          .operation write;
X        .endnode;
X
X        .node 49 proc;
X          .inputs T40[0:15] T32[0:15] ;
X          .outputs T42[0:16] ;
X          .successors 50 ;	#  predecessors 45 
X          .proc add with (16);
X        .endnode;
X
X        .node 50 operation;
X          .inputs T42[0:15] ;
X          .outputs sv33[0:15] ;
X          .successors 51 ;	#  predecessors 49 
X          .attribute constraint delay 50 1 cycles;
X          .operation write;
X        .endnode;
X
X        .node 51 nop;	#	sink node
X          .successors ;	#  predecessors 22 40 42 44 46 48 50 
X        .endnode;
X
X        .attribute constraint delay 2 1 cycles;
X        .attribute constraint delay 3 1 cycles;
X        .attribute constraint delay 5 1 cycles;
X        .attribute constraint delay 6 1 cycles;
X        .attribute constraint delay 8 1 cycles;
X        .attribute constraint delay 10 1 cycles;
X        .attribute constraint delay 22 1 cycles;
X        .attribute constraint delay 31 1 cycles;
X        .attribute constraint delay 33 1 cycles;
X        .attribute constraint delay 40 1 cycles;
X        .attribute constraint delay 42 1 cycles;
X        .attribute constraint delay 44 1 cycles;
X        .attribute constraint delay 46 1 cycles;
X        .attribute constraint delay 48 1 cycles;
X        .attribute constraint delay 50 1 cycles;
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 3 operation;
X      .inputs 0b1 ;
X      .outputs over[0:0] ;
X      .successors 4 ;	#  predecessors 2 
X      .attribute constraint delay 3 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 4 operation;
X      .inputs 0b0 ;
X      .outputs over[0:0] ;
X      .successors 5 ;	#  predecessors 3 
X      .attribute constraint delay 4 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 5 nop;	#	sink node
X      .successors ;	#  predecessors 4 
X    .endnode;
X
X    .attribute constraint delay 3 1 cycles;
X    .attribute constraint delay 4 1 cycles;
X    .endpolargraph;
X.endmodel elliptic ;
END_OF_FILE
if test 15447 -ne `wc -c <'elliptic/elliptic.sif'`; then
    echo shar: \"'elliptic/elliptic.sif'\" unpacked with wrong size!
fi
# end of 'elliptic/elliptic.sif'
fi
if test -f 'elliptic/smultiply_16.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'elliptic/smultiply_16.sif'\"
else
echo shar: Extracting \"'elliptic/smultiply_16.sif'\" \(24084 characters\)
sed "s/^X//" >'elliptic/smultiply_16.sif' <<'END_OF_FILE'
X#
X#	Sif model smultiply_16	Printed Tue Jul 24 15:03:15 1990
X#
X.model smultiply_16 sequencing ; 
X  .inputs op1[16] op2[16] ;
X  .outputs return_value[16] ;
X    #	Index 1
X    .polargraph 1 5;
X    .variable M1[16] T4[17] T3[17] T6 
X	T2 T1 ;
X    .variable register tmp[16] register count[16] ;
X    #	5 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	op2[8:8] op2[9:9] op2[10:10] op2[11:11] 
X	op2[12:12] op2[13:13] op2[14:14] op2[15:15] 
X	;
X      .outputs T1[0:0] ;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        c_0_T1[0:0] =  0 ;
X        d_0_T1[0:0] =  1 ;
X        c_1_T1[0:0] = ((c_0_T1[0:0]  (op2[0:0] + 0' ))+(d_0_T1[0:0]  (op2[0:0]   0' )));
X        d_1_T1[0:0] = ((c_0_T1[0:0]  (op2[0:0]'   0 ))+(d_0_T1[0:0]  (op2[0:0]' + 0 )));
X        c_2_T1[0:0] = ((c_1_T1[0:0]  (op2[1:1] + 0' ))+(d_1_T1[0:0]  (op2[1:1]   0' )));
X        d_2_T1[0:0] = ((c_1_T1[0:0]  (op2[1:1]'   0 ))+(d_1_T1[0:0]  (op2[1:1]' + 0 )));
X        c_3_T1[0:0] = ((c_2_T1[0:0]  (op2[2:2] + 0' ))+(d_2_T1[0:0]  (op2[2:2]   0' )));
X        d_3_T1[0:0] = ((c_2_T1[0:0]  (op2[2:2]'   0 ))+(d_2_T1[0:0]  (op2[2:2]' + 0 )));
X        c_4_T1[0:0] = ((c_3_T1[0:0]  (op2[3:3] + 0' ))+(d_3_T1[0:0]  (op2[3:3]   0' )));
X        d_4_T1[0:0] = ((c_3_T1[0:0]  (op2[3:3]'   0 ))+(d_3_T1[0:0]  (op2[3:3]' + 0 )));
X        c_5_T1[0:0] = ((c_4_T1[0:0]  (op2[4:4] + 0' ))+(d_4_T1[0:0]  (op2[4:4]   0' )));
X        d_5_T1[0:0] = ((c_4_T1[0:0]  (op2[4:4]'   0 ))+(d_4_T1[0:0]  (op2[4:4]' + 0 )));
X        c_6_T1[0:0] = ((c_5_T1[0:0]  (op2[5:5] + 0' ))+(d_5_T1[0:0]  (op2[5:5]   0' )));
X        d_6_T1[0:0] = ((c_5_T1[0:0]  (op2[5:5]'   0 ))+(d_5_T1[0:0]  (op2[5:5]' + 0 )));
X        c_7_T1[0:0] = ((c_6_T1[0:0]  (op2[6:6] + 0' ))+(d_6_T1[0:0]  (op2[6:6]   0' )));
X        d_7_T1[0:0] = ((c_6_T1[0:0]  (op2[6:6]'   0 ))+(d_6_T1[0:0]  (op2[6:6]' + 0 )));
X        c_8_T1[0:0] = ((c_7_T1[0:0]  (op2[7:7] + 0' ))+(d_7_T1[0:0]  (op2[7:7]   0' )));
X        d_8_T1[0:0] = ((c_7_T1[0:0]  (op2[7:7]'   0 ))+(d_7_T1[0:0]  (op2[7:7]' + 0 )));
X        c_9_T1[0:0] = ((c_8_T1[0:0]  (op2[8:8] + 0' ))+(d_8_T1[0:0]  (op2[8:8]   0' )));
X        d_9_T1[0:0] = ((c_8_T1[0:0]  (op2[8:8]'   0 ))+(d_8_T1[0:0]  (op2[8:8]' + 0 )));
X        c_10_T1[0:0] = ((c_9_T1[0:0]  (op2[9:9] + 0' ))+(d_9_T1[0:0]  (op2[9:9]   0' )));
X        d_10_T1[0:0] = ((c_9_T1[0:0]  (op2[9:9]'   0 ))+(d_9_T1[0:0]  (op2[9:9]' + 0 )));
X        c_11_T1[0:0] = ((c_10_T1[0:0]  (op2[10:10] + 0' ))+(d_10_T1[0:0]  (op2[10:10]   0' )));
X        d_11_T1[0:0] = ((c_10_T1[0:0]  (op2[10:10]'   0 ))+(d_10_T1[0:0]  (op2[10:10]' + 0 )));
X        c_12_T1[0:0] = ((c_11_T1[0:0]  (op2[11:11] + 0' ))+(d_11_T1[0:0]  (op2[11:11]   0' )));
X        d_12_T1[0:0] = ((c_11_T1[0:0]  (op2[11:11]'   0 ))+(d_11_T1[0:0]  (op2[11:11]' + 0 )));
X        c_13_T1[0:0] = ((c_12_T1[0:0]  (op2[12:12] + 0' ))+(d_12_T1[0:0]  (op2[12:12]   0' )));
X        d_13_T1[0:0] = ((c_12_T1[0:0]  (op2[12:12]'   0 ))+(d_12_T1[0:0]  (op2[12:12]' + 0 )));
X        c_14_T1[0:0] = ((c_13_T1[0:0]  (op2[13:13] + 0' ))+(d_13_T1[0:0]  (op2[13:13]   0' )));
X        d_14_T1[0:0] = ((c_13_T1[0:0]  (op2[13:13]'   0 ))+(d_13_T1[0:0]  (op2[13:13]' + 0 )));
X        c_15_T1[0:0] = ((c_14_T1[0:0]  (op2[14:14] + 0' ))+(d_14_T1[0:0]  (op2[14:14]   0' )));
X        d_15_T1[0:0] = ((c_14_T1[0:0]  (op2[14:14]'   0 ))+(d_14_T1[0:0]  (op2[14:14]' + 0 )));
X        c_16_T1[0:0] = ((c_15_T1[0:0]  (op2[15:15] + 0' ))+(d_15_T1[0:0]  (op2[15:15]   0' )));
X        d_16_T1[0:0] = ((c_15_T1[0:0]  (op2[15:15]'   0 ))+(d_15_T1[0:0]  (op2[15:15]' + 0 )));
X        T1[0:0] = c_16_T1[0:0] ;
X        .attribute delay 33 level;
X        .attribute area 355 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 cond;
X      .successors 4 ;	#  predecessors 2 
X      .cond T1[0:0] T2[0:0] ;	#	Latched
X      .case 1 ;
X        #	Index 2
X        .polargraph 1 4;
X        #	4 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs 0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	0b0 0b0 0b0 0b0 
X	op2[15:15] op2[14:14] op2[13:13] op2[12:12] 
X	op2[11:11] op2[10:10] op2[9:9] op2[8:8] 
X	op2[7:7] op2[6:6] op2[5:5] op2[4:4] 
X	op2[3:3] op2[2:2] op2[1:1] op2[0:0] 
X	;
X          .outputs tmp[15:15] tmp[14:14] tmp[13:13] tmp[12:12] 
X	tmp[11:11] tmp[10:10] tmp[9:9] tmp[8:8] 
X	tmp[7:7] tmp[6:6] tmp[5:5] tmp[4:4] 
X	tmp[3:3] tmp[2:2] tmp[1:1] tmp[0:0] 
X	count[15:15] count[14:14] count[13:13] count[12:12] 
X	count[11:11] count[10:10] count[9:9] count[8:8] 
X	count[7:7] count[6:6] count[5:5] count[4:4] 
X	count[3:3] count[2:2] count[1:1] count[0:0] 
X	;
X          .successors 3 ;	#  predecessors 1 
X          .attribute constraint delay 2 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 3 loop;
X          .successors 4 ;	#  predecessors 2 
X          .loop T6[0:0] ;	#	
X            #	Index 3
X            .polargraph 1 3;
X            #	3 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 operation;
X              .inputs tmp[0:0] tmp[1:1] tmp[2:2] tmp[3:3] 
X	tmp[4:4] tmp[5:5] tmp[6:6] tmp[7:7] 
X	tmp[8:8] tmp[9:9] tmp[10:10] tmp[11:11] 
X	tmp[12:12] tmp[13:13] tmp[14:14] tmp[15:15] 
X	op1[0:0] op1[1:1] op1[2:2] op1[3:3] 
X	op1[4:4] op1[5:5] op1[6:6] op1[7:7] 
X	op1[8:8] op1[9:9] op1[10:10] op1[11:11] 
X	op1[12:12] op1[13:13] op1[14:14] op1[15:15] 
X	count[0:0] count[1:1] count[2:2] count[3:3] 
X	count[4:4] count[5:5] count[6:6] count[7:7] 
X	count[8:8] count[9:9] count[10:10] count[11:11] 
X	count[12:12] count[13:13] count[14:14] count[15:15] 
X	;
X              .outputs T3[0:0] T3[1:1] T3[2:2] T3[3:3] 
X	T3[4:4] T3[5:5] T3[6:6] T3[7:7] 
X	T3[8:8] T3[9:9] T3[10:10] T3[11:11] 
X	T3[12:12] T3[13:13] T3[14:14] T3[15:15] 
X	T4[0:0] T4[1:1] T4[2:2] T4[3:3] 
X	T4[4:4] T4[5:5] T4[6:6] T4[7:7] 
X	T4[8:8] T4[9:9] T4[10:10] T4[11:11] 
X	T4[12:12] T4[13:13] T4[14:14] T4[15:15] 
X	T6[0:0] ;
X              .successors 3 ;	#  predecessors 1 
X              .operation logic 2 ;
X                #	Expression 0
X                c_T3[0:0] =  0 ;
X                T3[0:0] = (((((tmp[0:0]'  op1[0:0] ) c_T3[0:0]' )+((tmp[0:0]  op1[0:0]' ) c_T3[0:0]' ))+((tmp[0:0]'  op1[0:0]' ) c_T3[0:0] ))+((tmp[0:0]  op1[0:0] ) c_T3[0:0] ));
X                c_T3[1:1] = ((tmp[0:0]  op1[0:0] )+(c_T3[0:0]  (tmp[0:0] +op1[0:0] )));
X                T3[1:1] = (((((tmp[1:1]'  op1[1:1] ) c_T3[1:1]' )+((tmp[1:1]  op1[1:1]' ) c_T3[1:1]' ))+((tmp[1:1]'  op1[1:1]' ) c_T3[1:1] ))+((tmp[1:1]  op1[1:1] ) c_T3[1:1] ));
X                c_T3[2:2] = ((tmp[1:1]  op1[1:1] )+(c_T3[1:1]  (tmp[1:1] +op1[1:1] )));
X                T3[2:2] = (((((tmp[2:2]'  op1[2:2] ) c_T3[2:2]' )+((tmp[2:2]  op1[2:2]' ) c_T3[2:2]' ))+((tmp[2:2]'  op1[2:2]' ) c_T3[2:2] ))+((tmp[2:2]  op1[2:2] ) c_T3[2:2] ));
X                c_T3[3:3] = ((tmp[2:2]  op1[2:2] )+(c_T3[2:2]  (tmp[2:2] +op1[2:2] )));
X                T3[3:3] = (((((tmp[3:3]'  op1[3:3] ) c_T3[3:3]' )+((tmp[3:3]  op1[3:3]' ) c_T3[3:3]' ))+((tmp[3:3]'  op1[3:3]' ) c_T3[3:3] ))+((tmp[3:3]  op1[3:3] ) c_T3[3:3] ));
X                c_T3[4:4] = ((tmp[3:3]  op1[3:3] )+(c_T3[3:3]  (tmp[3:3] +op1[3:3] )));
X                T3[4:4] = (((((tmp[4:4]'  op1[4:4] ) c_T3[4:4]' )+((tmp[4:4]  op1[4:4]' ) c_T3[4:4]' ))+((tmp[4:4]'  op1[4:4]' ) c_T3[4:4] ))+((tmp[4:4]  op1[4:4] ) c_T3[4:4] ));
X                c_T3[5:5] = ((tmp[4:4]  op1[4:4] )+(c_T3[4:4]  (tmp[4:4] +op1[4:4] )));
X                T3[5:5] = (((((tmp[5:5]'  op1[5:5] ) c_T3[5:5]' )+((tmp[5:5]  op1[5:5]' ) c_T3[5:5]' ))+((tmp[5:5]'  op1[5:5]' ) c_T3[5:5] ))+((tmp[5:5]  op1[5:5] ) c_T3[5:5] ));
X                c_T3[6:6] = ((tmp[5:5]  op1[5:5] )+(c_T3[5:5]  (tmp[5:5] +op1[5:5] )));
X                T3[6:6] = (((((tmp[6:6]'  op1[6:6] ) c_T3[6:6]' )+((tmp[6:6]  op1[6:6]' ) c_T3[6:6]' ))+((tmp[6:6]'  op1[6:6]' ) c_T3[6:6] ))+((tmp[6:6]  op1[6:6] ) c_T3[6:6] ));
X                c_T3[7:7] = ((tmp[6:6]  op1[6:6] )+(c_T3[6:6]  (tmp[6:6] +op1[6:6] )));
X                T3[7:7] = (((((tmp[7:7]'  op1[7:7] ) c_T3[7:7]' )+((tmp[7:7]  op1[7:7]' ) c_T3[7:7]' ))+((tmp[7:7]'  op1[7:7]' ) c_T3[7:7] ))+((tmp[7:7]  op1[7:7] ) c_T3[7:7] ));
X                c_T3[8:8] = ((tmp[7:7]  op1[7:7] )+(c_T3[7:7]  (tmp[7:7] +op1[7:7] )));
X                T3[8:8] = (((((tmp[8:8]'  op1[8:8] ) c_T3[8:8]' )+((tmp[8:8]  op1[8:8]' ) c_T3[8:8]' ))+((tmp[8:8]'  op1[8:8]' ) c_T3[8:8] ))+((tmp[8:8]  op1[8:8] ) c_T3[8:8] ));
X                c_T3[9:9] = ((tmp[8:8]  op1[8:8] )+(c_T3[8:8]  (tmp[8:8] +op1[8:8] )));
X                T3[9:9] = (((((tmp[9:9]'  op1[9:9] ) c_T3[9:9]' )+((tmp[9:9]  op1[9:9]' ) c_T3[9:9]' ))+((tmp[9:9]'  op1[9:9]' ) c_T3[9:9] ))+((tmp[9:9]  op1[9:9] ) c_T3[9:9] ));
X                c_T3[10:10] = ((tmp[9:9]  op1[9:9] )+(c_T3[9:9]  (tmp[9:9] +op1[9:9] )));
X                T3[10:10] = (((((tmp[10:10]'  op1[10:10] ) c_T3[10:10]' )+((tmp[10:10]  op1[10:10]' ) c_T3[10:10]' ))+((tmp[10:10]'  op1[10:10]' ) c_T3[10:10] ))+((tmp[10:10]  op1[10:10] ) c_T3[10:10] ));
X                c_T3[11:11] = ((tmp[10:10]  op1[10:10] )+(c_T3[10:10]  (tmp[10:10] +op1[10:10] )));
X                T3[11:11] = (((((tmp[11:11]'  op1[11:11] ) c_T3[11:11]' )+((tmp[11:11]  op1[11:11]' ) c_T3[11:11]' ))+((tmp[11:11]'  op1[11:11]' ) c_T3[11:11] ))+((tmp[11:11]  op1[11:11] ) c_T3[11:11] ));
X                c_T3[12:12] = ((tmp[11:11]  op1[11:11] )+(c_T3[11:11]  (tmp[11:11] +op1[11:11] )));
X                T3[12:12] = (((((tmp[12:12]'  op1[12:12] ) c_T3[12:12]' )+((tmp[12:12]  op1[12:12]' ) c_T3[12:12]' ))+((tmp[12:12]'  op1[12:12]' ) c_T3[12:12] ))+((tmp[12:12]  op1[12:12] ) c_T3[12:12] ));
X                c_T3[13:13] = ((tmp[12:12]  op1[12:12] )+(c_T3[12:12]  (tmp[12:12] +op1[12:12] )));
X                T3[13:13] = (((((tmp[13:13]'  op1[13:13] ) c_T3[13:13]' )+((tmp[13:13]  op1[13:13]' ) c_T3[13:13]' ))+((tmp[13:13]'  op1[13:13]' ) c_T3[13:13] ))+((tmp[13:13]  op1[13:13] ) c_T3[13:13] ));
X                c_T3[14:14] = ((tmp[13:13]  op1[13:13] )+(c_T3[13:13]  (tmp[13:13] +op1[13:13] )));
X                T3[14:14] = (((((tmp[14:14]'  op1[14:14] ) c_T3[14:14]' )+((tmp[14:14]  op1[14:14]' ) c_T3[14:14]' ))+((tmp[14:14]'  op1[14:14]' ) c_T3[14:14] ))+((tmp[14:14]  op1[14:14] ) c_T3[14:14] ));
X                c_T3[15:15] = ((tmp[14:14]  op1[14:14] )+(c_T3[14:14]  (tmp[14:14] +op1[14:14] )));
X                T3[15:15] = (((((tmp[15:15]'  op1[15:15] ) c_T3[15:15]' )+((tmp[15:15]  op1[15:15]' ) c_T3[15:15]' ))+((tmp[15:15]'  op1[15:15]' ) c_T3[15:15] ))+((tmp[15:15]  op1[15:15] ) c_T3[15:15] ));
X                c_T3[16:16] = ((tmp[15:15]  op1[15:15] )+(c_T3[15:15]  (tmp[15:15] +op1[15:15] )));
X                T3[16:16] = c_T3[15:15] ;
X                c_T4[0:0] =  1 ;
X                T4[0:0] = (((((count[0:0]'   1' ) c_T4[0:0]' )+((count[0:0]   1 ) c_T4[0:0]' ))+((count[0:0]'   1 ) c_T4[0:0] ))+((count[0:0]   1' ) c_T4[0:0] ));
X                c_T4[1:1] = ((count[0:0]   1' )+(c_T4[0:0]  (count[0:0] + 1' )));
X                T4[1:1] = (((((count[1:1]'   0' ) c_T4[1:1]' )+((count[1:1]   0 ) c_T4[1:1]' ))+((count[1:1]'   0 ) c_T4[1:1] ))+((count[1:1]   0' ) c_T4[1:1] ));
X                c_T4[2:2] = ((count[1:1]   0' )+(c_T4[1:1]  (count[1:1] + 0' )));
X                T4[2:2] = (((((count[2:2]'   0' ) c_T4[2:2]' )+((count[2:2]   0 ) c_T4[2:2]' ))+((count[2:2]'   0 ) c_T4[2:2] ))+((count[2:2]   0' ) c_T4[2:2] ));
X                c_T4[3:3] = ((count[2:2]   0' )+(c_T4[2:2]  (count[2:2] + 0' )));
X                T4[3:3] = (((((count[3:3]'   0' ) c_T4[3:3]' )+((count[3:3]   0 ) c_T4[3:3]' ))+((count[3:3]'   0 ) c_T4[3:3] ))+((count[3:3]   0' ) c_T4[3:3] ));
X                c_T4[4:4] = ((count[3:3]   0' )+(c_T4[3:3]  (count[3:3] + 0' )));
X                T4[4:4] = (((((count[4:4]'   0' ) c_T4[4:4]' )+((count[4:4]   0 ) c_T4[4:4]' ))+((count[4:4]'   0 ) c_T4[4:4] ))+((count[4:4]   0' ) c_T4[4:4] ));
X                c_T4[5:5] = ((count[4:4]   0' )+(c_T4[4:4]  (count[4:4] + 0' )));
X                T4[5:5] = (((((count[5:5]'   0' ) c_T4[5:5]' )+((count[5:5]   0 ) c_T4[5:5]' ))+((count[5:5]'   0 ) c_T4[5:5] ))+((count[5:5]   0' ) c_T4[5:5] ));
X                c_T4[6:6] = ((count[5:5]   0' )+(c_T4[5:5]  (count[5:5] + 0' )));
X                T4[6:6] = (((((count[6:6]'   0' ) c_T4[6:6]' )+((count[6:6]   0 ) c_T4[6:6]' ))+((count[6:6]'   0 ) c_T4[6:6] ))+((count[6:6]   0' ) c_T4[6:6] ));
X                c_T4[7:7] = ((count[6:6]   0' )+(c_T4[6:6]  (count[6:6] + 0' )));
X                T4[7:7] = (((((count[7:7]'   0' ) c_T4[7:7]' )+((count[7:7]   0 ) c_T4[7:7]' ))+((count[7:7]'   0 ) c_T4[7:7] ))+((count[7:7]   0' ) c_T4[7:7] ));
X                c_T4[8:8] = ((count[7:7]   0' )+(c_T4[7:7]  (count[7:7] + 0' )));
X                T4[8:8] = (((((count[8:8]'   0' ) c_T4[8:8]' )+((count[8:8]   0 ) c_T4[8:8]' ))+((count[8:8]'   0 ) c_T4[8:8] ))+((count[8:8]   0' ) c_T4[8:8] ));
X                c_T4[9:9] = ((count[8:8]   0' )+(c_T4[8:8]  (count[8:8] + 0' )));
X                T4[9:9] = (((((count[9:9]'   0' ) c_T4[9:9]' )+((count[9:9]   0 ) c_T4[9:9]' ))+((count[9:9]'   0 ) c_T4[9:9] ))+((count[9:9]   0' ) c_T4[9:9] ));
X                c_T4[10:10] = ((count[9:9]   0' )+(c_T4[9:9]  (count[9:9] + 0' )));
X                T4[10:10] = (((((count[10:10]'   0' ) c_T4[10:10]' )+((count[10:10]   0 ) c_T4[10:10]' ))+((count[10:10]'   0 ) c_T4[10:10] ))+((count[10:10]   0' ) c_T4[10:10] ));
X                c_T4[11:11] = ((count[10:10]   0' )+(c_T4[10:10]  (count[10:10] + 0' )));
X                T4[11:11] = (((((count[11:11]'   0' ) c_T4[11:11]' )+((count[11:11]   0 ) c_T4[11:11]' ))+((count[11:11]'   0 ) c_T4[11:11] ))+((count[11:11]   0' ) c_T4[11:11] ));
X                c_T4[12:12] = ((count[11:11]   0' )+(c_T4[11:11]  (count[11:11] + 0' )));
X                T4[12:12] = (((((count[12:12]'   0' ) c_T4[12:12]' )+((count[12:12]   0 ) c_T4[12:12]' ))+((count[12:12]'   0 ) c_T4[12:12] ))+((count[12:12]   0' ) c_T4[12:12] ));
X                c_T4[13:13] = ((count[12:12]   0' )+(c_T4[12:12]  (count[12:12] + 0' )));
X                T4[13:13] = (((((count[13:13]'   0' ) c_T4[13:13]' )+((count[13:13]   0 ) c_T4[13:13]' ))+((count[13:13]'   0 ) c_T4[13:13] ))+((count[13:13]   0' ) c_T4[13:13] ));
X                c_T4[14:14] = ((count[13:13]   0' )+(c_T4[13:13]  (count[13:13] + 0' )));
X                T4[14:14] = (((((count[14:14]'   0' ) c_T4[14:14]' )+((count[14:14]   0 ) c_T4[14:14]' ))+((count[14:14]'   0 ) c_T4[14:14] ))+((count[14:14]   0' ) c_T4[14:14] ));
X                c_T4[15:15] = ((count[14:14]   0' )+(c_T4[14:14]  (count[14:14] + 0' )));
X                T4[15:15] = (((((count[15:15]'   0' ) c_T4[15:15]' )+((count[15:15]   0 ) c_T4[15:15]' ))+((count[15:15]'   0 ) c_T4[15:15] ))+((count[15:15]   0' ) c_T4[15:15] ));
X                c_T4[16:16] = ((count[15:15]   0' )+(c_T4[15:15]  (count[15:15] + 0' )));
X                T4[16:16] = c_T4[15:15] ;
X                c_0_T5[0:0] =  0 ;
X                d_0_T5[0:0] =  1 ;
X                c_1_T5[0:0] = ((c_0_T5[0:0]  (T4[0:0] + 0' ))+(d_0_T5[0:0]  (T4[0:0]   0' )));
X                d_1_T5[0:0] = ((c_0_T5[0:0]  (T4[0:0]'   0 ))+(d_0_T5[0:0]  (T4[0:0]' + 0 )));
X                c_2_T5[0:0] = ((c_1_T5[0:0]  (T4[1:1] + 0' ))+(d_1_T5[0:0]  (T4[1:1]   0' )));
X                d_2_T5[0:0] = ((c_1_T5[0:0]  (T4[1:1]'   0 ))+(d_1_T5[0:0]  (T4[1:1]' + 0 )));
X                c_3_T5[0:0] = ((c_2_T5[0:0]  (T4[2:2] + 0' ))+(d_2_T5[0:0]  (T4[2:2]   0' )));
X                d_3_T5[0:0] = ((c_2_T5[0:0]  (T4[2:2]'   0 ))+(d_2_T5[0:0]  (T4[2:2]' + 0 )));
X                c_4_T5[0:0] = ((c_3_T5[0:0]  (T4[3:3] + 0' ))+(d_3_T5[0:0]  (T4[3:3]   0' )));
X                d_4_T5[0:0] = ((c_3_T5[0:0]  (T4[3:3]'   0 ))+(d_3_T5[0:0]  (T4[3:3]' + 0 )));
X                c_5_T5[0:0] = ((c_4_T5[0:0]  (T4[4:4] + 0' ))+(d_4_T5[0:0]  (T4[4:4]   0' )));
X                d_5_T5[0:0] = ((c_4_T5[0:0]  (T4[4:4]'   0 ))+(d_4_T5[0:0]  (T4[4:4]' + 0 )));
X                c_6_T5[0:0] = ((c_5_T5[0:0]  (T4[5:5] + 0' ))+(d_5_T5[0:0]  (T4[5:5]   0' )));
X                d_6_T5[0:0] = ((c_5_T5[0:0]  (T4[5:5]'   0 ))+(d_5_T5[0:0]  (T4[5:5]' + 0 )));
X                c_7_T5[0:0] = ((c_6_T5[0:0]  (T4[6:6] + 0' ))+(d_6_T5[0:0]  (T4[6:6]   0' )));
X                d_7_T5[0:0] = ((c_6_T5[0:0]  (T4[6:6]'   0 ))+(d_6_T5[0:0]  (T4[6:6]' + 0 )));
X                c_8_T5[0:0] = ((c_7_T5[0:0]  (T4[7:7] + 0' ))+(d_7_T5[0:0]  (T4[7:7]   0' )));
X                d_8_T5[0:0] = ((c_7_T5[0:0]  (T4[7:7]'   0 ))+(d_7_T5[0:0]  (T4[7:7]' + 0 )));
X                c_9_T5[0:0] = ((c_8_T5[0:0]  (T4[8:8] + 0' ))+(d_8_T5[0:0]  (T4[8:8]   0' )));
X                d_9_T5[0:0] = ((c_8_T5[0:0]  (T4[8:8]'   0 ))+(d_8_T5[0:0]  (T4[8:8]' + 0 )));
X                c_10_T5[0:0] = ((c_9_T5[0:0]  (T4[9:9] + 0' ))+(d_9_T5[0:0]  (T4[9:9]   0' )));
X                d_10_T5[0:0] = ((c_9_T5[0:0]  (T4[9:9]'   0 ))+(d_9_T5[0:0]  (T4[9:9]' + 0 )));
X                c_11_T5[0:0] = ((c_10_T5[0:0]  (T4[10:10] + 0' ))+(d_10_T5[0:0]  (T4[10:10]   0' )));
X                d_11_T5[0:0] = ((c_10_T5[0:0]  (T4[10:10]'   0 ))+(d_10_T5[0:0]  (T4[10:10]' + 0 )));
X                c_12_T5[0:0] = ((c_11_T5[0:0]  (T4[11:11] + 0' ))+(d_11_T5[0:0]  (T4[11:11]   0' )));
X                d_12_T5[0:0] = ((c_11_T5[0:0]  (T4[11:11]'   0 ))+(d_11_T5[0:0]  (T4[11:11]' + 0 )));
X                c_13_T5[0:0] = ((c_12_T5[0:0]  (T4[12:12] + 0' ))+(d_12_T5[0:0]  (T4[12:12]   0' )));
X                d_13_T5[0:0] = ((c_12_T5[0:0]  (T4[12:12]'   0 ))+(d_12_T5[0:0]  (T4[12:12]' + 0 )));
X                c_14_T5[0:0] = ((c_13_T5[0:0]  (T4[13:13] + 0' ))+(d_13_T5[0:0]  (T4[13:13]   0' )));
X                d_14_T5[0:0] = ((c_13_T5[0:0]  (T4[13:13]'   0 ))+(d_13_T5[0:0]  (T4[13:13]' + 0 )));
X                c_15_T5[0:0] = ((c_14_T5[0:0]  (T4[14:14] + 0' ))+(d_14_T5[0:0]  (T4[14:14]   0' )));
X                d_15_T5[0:0] = ((c_14_T5[0:0]  (T4[14:14]'   0 ))+(d_14_T5[0:0]  (T4[14:14]' + 0 )));
X                c_16_T5[0:0] = ((c_15_T5[0:0]  (T4[15:15] + 0' ))+(d_15_T5[0:0]  (T4[15:15]   0' )));
X                d_16_T5[0:0] = ((c_15_T5[0:0]  (T4[15:15]'   0 ))+(d_15_T5[0:0]  (T4[15:15]' + 0 )));
X                T5[0:0] = c_16_T5[0:0] ;
X                T6[0:0] = T5[0:0]' ;
X                .attribute delay 38 level;
X                .attribute area 1384 literal;
X              .endoperation;
X            .endnode;
X
X            .node 3 nop;	#	sink node
X              .successors ;	#  predecessors 2 
X            .endnode;
X
X            .endpolargraph;
X          .attribute hercules loop_load tmp[15:15] T3[15:15] ;
X          .attribute hercules loop_load tmp[14:14] T3[14:14] ;
X          .attribute hercules loop_load tmp[13:13] T3[13:13] ;
X          .attribute hercules loop_load tmp[12:12] T3[12:12] ;
X          .attribute hercules loop_load tmp[11:11] T3[11:11] ;
X          .attribute hercules loop_load tmp[10:10] T3[10:10] ;
X          .attribute hercules loop_load tmp[9:9] T3[9:9] ;
X          .attribute hercules loop_load tmp[8:8] T3[8:8] ;
X          .attribute hercules loop_load tmp[7:7] T3[7:7] ;
X          .attribute hercules loop_load tmp[6:6] T3[6:6] ;
X          .attribute hercules loop_load tmp[5:5] T3[5:5] ;
X          .attribute hercules loop_load tmp[4:4] T3[4:4] ;
X          .attribute hercules loop_load tmp[3:3] T3[3:3] ;
X          .attribute hercules loop_load tmp[2:2] T3[2:2] ;
X          .attribute hercules loop_load tmp[1:1] T3[1:1] ;
X          .attribute hercules loop_load tmp[0:0] T3[0:0] ;
X          .attribute hercules loop_load count[15:15] T4[15:15] ;
X          .attribute hercules loop_load count[14:14] T4[14:14] ;
X          .attribute hercules loop_load count[13:13] T4[13:13] ;
X          .attribute hercules loop_load count[12:12] T4[12:12] ;
X          .attribute hercules loop_load count[11:11] T4[11:11] ;
X          .attribute hercules loop_load count[10:10] T4[10:10] ;
X          .attribute hercules loop_load count[9:9] T4[9:9] ;
X          .attribute hercules loop_load count[8:8] T4[8:8] ;
X          .attribute hercules loop_load count[7:7] T4[7:7] ;
X          .attribute hercules loop_load count[6:6] T4[6:6] ;
X          .attribute hercules loop_load count[5:5] T4[5:5] ;
X          .attribute hercules loop_load count[4:4] T4[4:4] ;
X          .attribute hercules loop_load count[3:3] T4[3:3] ;
X          .attribute hercules loop_load count[2:2] T4[2:2] ;
X          .attribute hercules loop_load count[1:1] T4[1:1] ;
X          .attribute hercules loop_load count[0:0] T4[0:0] ;
X          .endloop;
X        .endnode;
X
X        .node 4 nop;	#	sink node
X          .successors ;	#  predecessors 3 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .case 0 ;
X        #	Index 4
X        .polargraph 1 2;
X        #	2 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 nop;	#	sink node
X          .successors ;	#  predecessors 1 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 4 operation;
X      .inputs T2[0:0] tmp[15:15] tmp[14:14] tmp[13:13] 
X	tmp[12:12] tmp[11:11] tmp[10:10] tmp[9:9] 
X	tmp[8:8] tmp[7:7] tmp[6:6] tmp[5:5] 
X	tmp[4:4] tmp[3:3] tmp[2:2] tmp[1:1] 
X	tmp[0:0] ;
X      .outputs M1[0:0] M1[1:1] M1[2:2] M1[3:3] 
X	M1[4:4] M1[5:5] M1[6:6] M1[7:7] 
X	M1[8:8] M1[9:9] M1[10:10] M1[11:11] 
X	M1[12:12] M1[13:13] M1[14:14] M1[15:15] 
X	;
X      .successors 5 ;	#  predecessors 3 
X      .operation logic 3 ;
X        #	Expression 0
X        M1[0:0] = X16[0:0] ;
X        M1[1:1] = X15[0:0] ;
X        M1[2:2] = X14[0:0] ;
X        M1[3:3] = X13[0:0] ;
X        M1[4:4] = X12[0:0] ;
X        M1[5:5] = X11[0:0] ;
X        M1[6:6] = X10[0:0] ;
X        M1[7:7] = X9[0:0] ;
X        M1[8:8] = X8[0:0] ;
X        M1[9:9] = X7[0:0] ;
X        M1[10:10] = X6[0:0] ;
X        M1[11:11] = X5[0:0] ;
X        M1[12:12] = X4[0:0] ;
X        M1[13:13] = X3[0:0] ;
X        M1[14:14] = X2[0:0] ;
X        M1[15:15] = X1[0:0] ;
X        X1[0:0] = ((V1_T2_0_0[0:0]  tmp[15:15] )+ 0 );
X        X2[0:0] = ((V1_T2_0_0[0:0]  tmp[14:14] )+ 0 );
X        X3[0:0] = ((V1_T2_0_0[0:0]  tmp[13:13] )+ 0 );
X        X4[0:0] = ((V1_T2_0_0[0:0]  tmp[12:12] )+ 0 );
X        X5[0:0] = ((V1_T2_0_0[0:0]  tmp[11:11] )+ 0 );
X        X6[0:0] = ((V1_T2_0_0[0:0]  tmp[10:10] )+ 0 );
X        X7[0:0] = ((V1_T2_0_0[0:0]  tmp[9:9] )+ 0 );
X        X8[0:0] = ((V1_T2_0_0[0:0]  tmp[8:8] )+ 0 );
X        X9[0:0] = ((V1_T2_0_0[0:0]  tmp[7:7] )+ 0 );
X        X10[0:0] = ((V1_T2_0_0[0:0]  tmp[6:6] )+ 0 );
X        X11[0:0] = ((V1_T2_0_0[0:0]  tmp[5:5] )+ 0 );
X        X12[0:0] = ((V1_T2_0_0[0:0]  tmp[4:4] )+ 0 );
X        X13[0:0] = ((V1_T2_0_0[0:0]  tmp[3:3] )+ 0 );
X        X14[0:0] = ((V1_T2_0_0[0:0]  tmp[2:2] )+ 0 );
X        X15[0:0] = ((V1_T2_0_0[0:0]  tmp[1:1] )+ 0 );
X        X16[0:0] = ((V1_T2_0_0[0:0]  tmp[0:0] )+ 0 );
X        V1_T2_0_0[0:0] = T2[0:0] ;
X        .attribute delay 2 level;
X        .attribute area 97 literal;
X      .endoperation;
X    .endnode;
X
X    .node 5 nop;	#	sink node
X      .successors ;	#  predecessors 4 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] M1[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] M1[1:1] ;
X    .attribute hercules direct_connect return_value[2:2] M1[2:2] ;
X    .attribute hercules direct_connect return_value[3:3] M1[3:3] ;
X    .attribute hercules direct_connect return_value[4:4] M1[4:4] ;
X    .attribute hercules direct_connect return_value[5:5] M1[5:5] ;
X    .attribute hercules direct_connect return_value[6:6] M1[6:6] ;
X    .attribute hercules direct_connect return_value[7:7] M1[7:7] ;
X    .attribute hercules direct_connect return_value[8:8] M1[8:8] ;
X    .attribute hercules direct_connect return_value[9:9] M1[9:9] ;
X    .attribute hercules direct_connect return_value[10:10] M1[10:10] ;
X    .attribute hercules direct_connect return_value[11:11] M1[11:11] ;
X    .attribute hercules direct_connect return_value[12:12] M1[12:12] ;
X    .attribute hercules direct_connect return_value[13:13] M1[13:13] ;
X    .attribute hercules direct_connect return_value[14:14] M1[14:14] ;
X    .attribute hercules direct_connect return_value[15:15] M1[15:15] ;
X    .endpolargraph;
X.endmodel smultiply_16 ;
END_OF_FILE
if test 24084 -ne `wc -c <'elliptic/smultiply_16.sif'`; then
    echo shar: \"'elliptic/smultiply_16.sif'\" unpacked with wrong size!
fi
# end of 'elliptic/smultiply_16.sif'
fi
if test -f 'elliptic/subtract_16.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'elliptic/subtract_16.sif'\"
else
echo shar: Extracting \"'elliptic/subtract_16.sif'\" \(6011 characters\)
sed "s/^X//" >'elliptic/subtract_16.sif' <<'END_OF_FILE'
X#
X#	Sif model subtract_16	Printed Tue Jul 24 15:03:22 1990
X#
X.model subtract_16 sequencing ; 
X  .inputs op1[16] op2[16] ;
X  .outputs return_value[17] ;
X    #	Index 1
X    .polargraph 1 4;
X    .variable T2[17] T1[17] ;
X    #	4 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs op2[0:0] op2[1:1] op2[2:2] op2[3:3] 
X	op2[4:4] op2[5:5] op2[6:6] op2[7:7] 
X	op2[8:8] op2[9:9] op2[10:10] op2[11:11] 
X	op2[12:12] op2[13:13] op2[14:14] op2[15:15] 
X	;
X      .outputs T1[0:0] T1[1:1] T1[2:2] T1[3:3] 
X	T1[4:4] T1[5:5] T1[6:6] T1[7:7] 
X	T1[8:8] T1[9:9] T1[10:10] T1[11:11] 
X	T1[12:12] T1[13:13] T1[14:14] T1[15:15] 
X	;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        c_T1[0:0] =  1 ;
X        T1[0:0] = ((((( 0'  op2[0:0]' ) c_T1[0:0]' )+(( 0  op2[0:0] ) c_T1[0:0]' ))+(( 0'  op2[0:0] ) c_T1[0:0] ))+(( 0  op2[0:0]' ) c_T1[0:0] ));
X        c_T1[1:1] = (( 0  op2[0:0]' )+(c_T1[0:0]  ( 0 +op2[0:0]' )));
X        T1[1:1] = ((((( 0'  op2[1:1]' ) c_T1[1:1]' )+(( 0  op2[1:1] ) c_T1[1:1]' ))+(( 0'  op2[1:1] ) c_T1[1:1] ))+(( 0  op2[1:1]' ) c_T1[1:1] ));
X        c_T1[2:2] = (( 0  op2[1:1]' )+(c_T1[1:1]  ( 0 +op2[1:1]' )));
X        T1[2:2] = ((((( 0'  op2[2:2]' ) c_T1[2:2]' )+(( 0  op2[2:2] ) c_T1[2:2]' ))+(( 0'  op2[2:2] ) c_T1[2:2] ))+(( 0  op2[2:2]' ) c_T1[2:2] ));
X        c_T1[3:3] = (( 0  op2[2:2]' )+(c_T1[2:2]  ( 0 +op2[2:2]' )));
X        T1[3:3] = ((((( 0'  op2[3:3]' ) c_T1[3:3]' )+(( 0  op2[3:3] ) c_T1[3:3]' ))+(( 0'  op2[3:3] ) c_T1[3:3] ))+(( 0  op2[3:3]' ) c_T1[3:3] ));
X        c_T1[4:4] = (( 0  op2[3:3]' )+(c_T1[3:3]  ( 0 +op2[3:3]' )));
X        T1[4:4] = ((((( 0'  op2[4:4]' ) c_T1[4:4]' )+(( 0  op2[4:4] ) c_T1[4:4]' ))+(( 0'  op2[4:4] ) c_T1[4:4] ))+(( 0  op2[4:4]' ) c_T1[4:4] ));
X        c_T1[5:5] = (( 0  op2[4:4]' )+(c_T1[4:4]  ( 0 +op2[4:4]' )));
X        T1[5:5] = ((((( 0'  op2[5:5]' ) c_T1[5:5]' )+(( 0  op2[5:5] ) c_T1[5:5]' ))+(( 0'  op2[5:5] ) c_T1[5:5] ))+(( 0  op2[5:5]' ) c_T1[5:5] ));
X        c_T1[6:6] = (( 0  op2[5:5]' )+(c_T1[5:5]  ( 0 +op2[5:5]' )));
X        T1[6:6] = ((((( 0'  op2[6:6]' ) c_T1[6:6]' )+(( 0  op2[6:6] ) c_T1[6:6]' ))+(( 0'  op2[6:6] ) c_T1[6:6] ))+(( 0  op2[6:6]' ) c_T1[6:6] ));
X        c_T1[7:7] = (( 0  op2[6:6]' )+(c_T1[6:6]  ( 0 +op2[6:6]' )));
X        T1[7:7] = ((((( 0'  op2[7:7]' ) c_T1[7:7]' )+(( 0  op2[7:7] ) c_T1[7:7]' ))+(( 0'  op2[7:7] ) c_T1[7:7] ))+(( 0  op2[7:7]' ) c_T1[7:7] ));
X        c_T1[8:8] = (( 0  op2[7:7]' )+(c_T1[7:7]  ( 0 +op2[7:7]' )));
X        T1[8:8] = ((((( 0'  op2[8:8]' ) c_T1[8:8]' )+(( 0  op2[8:8] ) c_T1[8:8]' ))+(( 0'  op2[8:8] ) c_T1[8:8] ))+(( 0  op2[8:8]' ) c_T1[8:8] ));
X        c_T1[9:9] = (( 0  op2[8:8]' )+(c_T1[8:8]  ( 0 +op2[8:8]' )));
X        T1[9:9] = ((((( 0'  op2[9:9]' ) c_T1[9:9]' )+(( 0  op2[9:9] ) c_T1[9:9]' ))+(( 0'  op2[9:9] ) c_T1[9:9] ))+(( 0  op2[9:9]' ) c_T1[9:9] ));
X        c_T1[10:10] = (( 0  op2[9:9]' )+(c_T1[9:9]  ( 0 +op2[9:9]' )));
X        T1[10:10] = ((((( 0'  op2[10:10]' ) c_T1[10:10]' )+(( 0  op2[10:10] ) c_T1[10:10]' ))+(( 0'  op2[10:10] ) c_T1[10:10] ))+(( 0  op2[10:10]' ) c_T1[10:10] ));
X        c_T1[11:11] = (( 0  op2[10:10]' )+(c_T1[10:10]  ( 0 +op2[10:10]' )));
X        T1[11:11] = ((((( 0'  op2[11:11]' ) c_T1[11:11]' )+(( 0  op2[11:11] ) c_T1[11:11]' ))+(( 0'  op2[11:11] ) c_T1[11:11] ))+(( 0  op2[11:11]' ) c_T1[11:11] ));
X        c_T1[12:12] = (( 0  op2[11:11]' )+(c_T1[11:11]  ( 0 +op2[11:11]' )));
X        T1[12:12] = ((((( 0'  op2[12:12]' ) c_T1[12:12]' )+(( 0  op2[12:12] ) c_T1[12:12]' ))+(( 0'  op2[12:12] ) c_T1[12:12] ))+(( 0  op2[12:12]' ) c_T1[12:12] ));
X        c_T1[13:13] = (( 0  op2[12:12]' )+(c_T1[12:12]  ( 0 +op2[12:12]' )));
X        T1[13:13] = ((((( 0'  op2[13:13]' ) c_T1[13:13]' )+(( 0  op2[13:13] ) c_T1[13:13]' ))+(( 0'  op2[13:13] ) c_T1[13:13] ))+(( 0  op2[13:13]' ) c_T1[13:13] ));
X        c_T1[14:14] = (( 0  op2[13:13]' )+(c_T1[13:13]  ( 0 +op2[13:13]' )));
X        T1[14:14] = ((((( 0'  op2[14:14]' ) c_T1[14:14]' )+(( 0  op2[14:14] ) c_T1[14:14]' ))+(( 0'  op2[14:14] ) c_T1[14:14] ))+(( 0  op2[14:14]' ) c_T1[14:14] ));
X        c_T1[15:15] = (( 0  op2[14:14]' )+(c_T1[14:14]  ( 0 +op2[14:14]' )));
X        T1[15:15] = ((((( 0'  op2[15:15]' ) c_T1[15:15]' )+(( 0  op2[15:15] ) c_T1[15:15]' ))+(( 0'  op2[15:15] ) c_T1[15:15] ))+(( 0  op2[15:15]' ) c_T1[15:15] ));
X        c_T1[16:16] = (( 0  op2[15:15]' )+(c_T1[15:15]  ( 0 +op2[15:15]' )));
X        T1[16:16] = c_T1[15:15] ;
X        .attribute delay 35 level;
X        .attribute area 514 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 proc;
X      .inputs op1[0:15] T1[0:15] ;
X      .outputs T2[0:16] ;
X      .successors 4 ;	#  predecessors 2 
X      .proc add with (16);
X    .endnode;
X
X    .node 4 nop;	#	sink node
X      .successors ;	#  predecessors 3 
X    .endnode;
X
X    .attribute hercules direct_connect return_value[0:0] T2[0:0] ;
X    .attribute hercules direct_connect return_value[1:1] T2[1:1] ;
X    .attribute hercules direct_connect return_value[2:2] T2[2:2] ;
X    .attribute hercules direct_connect return_value[3:3] T2[3:3] ;
X    .attribute hercules direct_connect return_value[4:4] T2[4:4] ;
X    .attribute hercules direct_connect return_value[5:5] T2[5:5] ;
X    .attribute hercules direct_connect return_value[6:6] T2[6:6] ;
X    .attribute hercules direct_connect return_value[7:7] T2[7:7] ;
X    .attribute hercules direct_connect return_value[8:8] T2[8:8] ;
X    .attribute hercules direct_connect return_value[9:9] T2[9:9] ;
X    .attribute hercules direct_connect return_value[10:10] T2[10:10] ;
X    .attribute hercules direct_connect return_value[11:11] T2[11:11] ;
X    .attribute hercules direct_connect return_value[12:12] T2[12:12] ;
X    .attribute hercules direct_connect return_value[13:13] T2[13:13] ;
X    .attribute hercules direct_connect return_value[14:14] T2[14:14] ;
X    .attribute hercules direct_connect return_value[15:15] T2[15:15] ;
X    .attribute hercules direct_connect return_value[16:16] T2[16:16] ;
X    .endpolargraph;
X.endmodel subtract_16 ;
END_OF_FILE
if test 6011 -ne `wc -c <'elliptic/subtract_16.sif'`; then
    echo shar: \"'elliptic/subtract_16.sif'\" unpacked with wrong size!
fi
# end of 'elliptic/subtract_16.sif'
fi
if test -f 'elliptic/elliptic.out.gold' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'elliptic/elliptic.out.gold'\"
else
echo shar: Extracting \"'elliptic/elliptic.out.gold'\" \(10005 characters\)
sed "s/^X//" >'elliptic/elliptic.out.gold' <<'END_OF_FILE'
X130 ariadne extract
Xreset[0:0]
Xover[0:0]
XHEX INP0 inp[0:0] inp[1:1] inp[2:2] inp[3:3]
XHEX INP1 inp[4:4] inp[5:5] inp[6:6] inp[7:7]
XHEX INP2 inp[8:8] inp[9:9] inp[10:10] inp[11:11]
XHEX INP3 inp[12:12] inp[13:13] inp[14:14] inp[15:15]
XHEX SV2_0 sv2[0:0] sv2[1:1] sv2[2:2] sv2[3:3]
XHEX SV2_1 sv2[4:4] sv2[5:5] sv2[6:6] sv2[7:7]
XHEX SV2_2 sv2[8:8] sv2[9:9] sv2[10:10] sv2[11:11]
XHEX SV2_3 sv2[12:12] sv2[13:13] sv2[14:14] sv2[15:15]
XHEX SV13_0 sv13[0:0] sv13[1:1] sv13[2:2] sv13[3:3]
XHEX SV13_1 sv13[4:4] sv13[5:5] sv13[6:6] sv13[7:7]
XHEX SV13_2 sv13[8:8] sv13[9:9] sv13[10:10] sv13[11:11]
XHEX SV13_3 sv13[12:12] sv13[13:13] sv13[14:14] sv13[15:15]
XHEX SV18_0 sv18[0:0] sv18[1:1] sv18[2:2] sv18[3:3]
XHEX SV18_1 sv18[4:4] sv18[5:5] sv18[6:6] sv18[7:7]
XHEX SV18_2 sv18[8:8] sv18[9:9] sv18[10:10] sv18[11:11]
XHEX SV18_3 sv18[12:12] sv18[13:13] sv18[14:14] sv18[15:15]
XHEX SV26_0 sv26[0:0] sv26[1:1] sv26[2:2] sv26[3:3]
XHEX SV26_1 sv26[4:4] sv26[5:5] sv26[6:6] sv26[7:7]
XHEX SV26_2 sv26[8:8] sv26[9:9] sv26[10:10] sv26[11:11]
XHEX SV26_3 sv26[12:12] sv26[13:13] sv26[14:14] sv26[15:15]
XHEX SV33_0 sv33[0:0] sv33[1:1] sv33[2:2] sv33[3:3]
XHEX SV33_1 sv33[4:4] sv33[5:5] sv33[6:6] sv33[7:7]
XHEX SV33_2 sv33[8:8] sv33[9:9] sv33[10:10] sv33[11:11]
XHEX SV33_3 sv33[12:12] sv33[13:13] sv33[14:14] sv33[15:15]
XHEX SV38_0 sv38[0:0] sv38[1:1] sv38[2:2] sv38[3:3]
XHEX SV38_1 sv38[4:4] sv38[5:5] sv38[6:6] sv38[7:7]
XHEX SV38_2 sv38[8:8] sv38[9:9] sv38[10:10] sv38[11:11]
XHEX SV38_3 sv38[12:12] sv38[13:13] sv38[14:14] sv38[15:15]
XHEX SV39_0 sv39[0:0] sv39[1:1] sv39[2:2] sv39[3:3]
XHEX SV39_1 sv39[4:4] sv39[5:5] sv39[6:6] sv39[7:7]
XHEX SV39_2 sv39[8:8] sv39[9:9] sv39[10:10] sv39[11:11]
XHEX SV39_3 sv39[12:12] sv39[13:13] sv39[14:14] sv39[15:15]
X     0:1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X     1:1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X     2:1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X     4:0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X     5:0010100000000000000110000000000000111000000000000000010000000000001001000000000000010100000000000011010000000000000011000000000000
X     6:0010100000000000000110000000000000111000000000000000010000000000001001000000000000010100000000000011010000000000000011000000000000
X     7:0010100000000000000110000000000000111000000000000000010000000000001001000000000000010100000000000011010000000000000011000000000000
X     9:0010100000000000000110000000000000111000000000000000010000000000001001000000000000010100000000000011010000000000000011000000000000
X    11:0010100000000000000110000000000000111000000000000000010000000000001001000000000000010100000000000011010000000000000011000000000000
X    13:0010100000000000000110000000000000111000000000000000010000000000001001000000000000010100000000000011010000000000000000100111000000
X    16:0010100000000000000110000000000000111000000000000000010000000000001001000000000000001100001010000010000110110000000000100111000000
X    19:0010100000000000000110000000000000111000000000000000010000000000001011100010000000001100001010000010000110110000000000100111000000
X    22:0010100000000000000110000000000000111000000000000000010000000000001011100010000000001100001010000010000110110000000000100111000000
X    24:0010100000000000000110000000000000100000110010000001110100110000001011100010000000001100001010000010000110110000000000100111000000
X    27:0010100000000000000000011011000000100000110010000001110100110000001011100010000000001100001010000010000110110000000000100111000000
X    28:0110100000000000000000011011000000100000110010000001110100110000001011100010000000001100001010000010000110110000000000100111000000
X    29:0010100000000000000000011011000000100000110010000001110100110000001011100010000000001100001010000010000110110000000000100111000000
X    30:0010100000000000000000011011000000100000110010000001110100110000001011100010000000001100001010000010000110110000000000100111000000
X    31:0010100000000000000000011011000000100000110010000001110100110000001011100010000000001100001010000010000110110000000000100111000000
X    33:0010100000000000000000011011000000100000110010000001110100110000001011100010000000001100001010000010000110110000000000100111000000
X    35:0010100000000000000000011011000000100000110010000001110100110000001011100010000000001100001010000010000110110000000000100111000000
X    37:0010100000000000000000011011000000100000110010000001110100110000001011100010000000001100001010000010000110110000000010100111110010
X    40:0010100000000000000000011011000000100000110010000001110100110000001011100010000000011000001101101111110011101111000010100111110010
X    43:0010100000000000000000011011000000100000110010000001110100110000001011100001010110011000001101101111110011101111000010100111110010
X    46:0010100000000000000000011011000000100000110010000001110100110000001011100001010110011000001101101111110011101111000010100111110010
X    48:0010100000000000000000011011000000111100110100101100100010000111001011100001010110011000001101101111110011101111000010100111110010
X    51:0010100000000000000101110010010010111100110100101100100010000111001011100001010110011000001101101111110011101111000010100111110010
X    52:0110100000000000000101110010010010111100110100101100100010000111001011100001010110011000001101101111110011101111000010100111110010
X    53:0010100000000000000101110010010010111100110100101100100010000111001011100001010110011000001101101111110011101111000010100111110010
X    54:0010100000000000000101110010010010111100110100101100100010000111001011100001010110011000001101101111110011101111000010100111110010
X    55:0010100000000000000101110010010010111100110100101100100010000111001011100001010110011000001101101111110011101111000010100111110010
X    57:0010100000000000000101110010010010111100110100101100100010000111001011100001010110011000001101101111110011101111000010100111110010
X    59:0010100000000000000101110010010010111100110100101100100010000111001011100001010110011000001101101111110011101111000010100111110010
X    61:0010100000000000000101110010010010111100110100101100100010000111001011100001010110011000001101101111110011101111000001101001101011
X    64:0010100000000000000101110010010010111100110100101100100010000111001011100001010110000110110100101110101011110100100001101001101011
X    67:0010100000000000000101110010010010111100110100101100100010000111001000000101011101000110110100101110101011110100100001101001101011
X    70:0010100000000000000101110010010010111100110100101100100010000111001000000101011101000110110100101110101011110100100001101001101011
X    72:0010100000000000000101110010010010100111101111001101001000101110011000000101011101000110110100101110101011110100100001101001101011
X    75:0010100000000000000010010000010000100111101111001101001000101110011000000101011101000110110100101110101011110100100001101001101011
X    76:0110100000000000000010010000010000100111101111001101001000101110011000000101011101000110110100101110101011110100100001101001101011
X    77:0010100000000000000010010000010000100111101111001101001000101110011000000101011101000110110100101110101011110100100001101001101011
X    78:0010110000000000000111000000000000111100000000000000001000000000001000100000000000010010000000000011001000000000000010100000000000
X    79:0010110000000000000111000000000000111100000000000000001000000000001000100000000000010010000000000011001000000000000010100000000000
X    81:0010110000000000000111000000000000111100000000000000001000000000001000100000000000010010000000000011001000000000000010100000000000
X    83:0010110000000000000111000000000000111100000000000000001000000000001000100000000000010010000000000011001000000000000010100000000000
X    85:0010110000000000000111000000000000111100000000000000001000000000001000100000000000010010000000000011001000000000000001110101100000
X    88:0010110000000000000111000000000000111100000000000000001000000000001000100000000000001010011001000010010110011000000001110101100000
X    91:0010110000000000000111000000000000111100000000000000001000000000001010110001000000001010011001000010010110011000000001110101100000
X    94:0010110000000000000111000000000000111100000000000000001000000000001010110001000000001010011001000010010110011000000001110101100000
X    96:0010110000000000000111000000000000100110111001000001101001011000001010110001000000001010011001000010010110011000000001110101100000
X    99:0010110000000000000001100011100000100110111001000001101001011000001010110001000000001010011001000010010110011000000001110101100000
X   100:0110110000000000000001100011100000100110111001000001101001011000001010110001000000001010011001000010010110011000000001110101100000
X   101:0010110000000000000001100011100000100110111001000001101001011000001010110001000000001010011001000010010110011000000001110101100000
X   102:0010110000000000000001100011100000100110111001000001101001011000001010110001000000001010011001000010010110011000000001110101100000
X   103:0010110000000000000001100011100000100110111001000001101001011000001010110001000000001010011001000010010110011000000001110101100000
X   105:0010110000000000000001100011100000100110111001000001101001011000001010110001000000001010011001000010010110011000000001110101100000
X   107:0010110000000000000001100011100000100110111001000001101001011000001010110001000000001010011001000010010110011000000001110101100000
X   109:0010110000000000000001100011100000100110111001000001101001011000001010110001000000001010011001000010010110011000000011100011110001
X   112:0010110000000000000001100011100000100110111001000001101001011000001010110001000000011101001000010111101001101101100011100011110001
X   115:0010110000000000000001100011100000100110111001000001101001011000001010001101001011011101001000010111101001101101100011100011110001
END_OF_FILE
if test 10005 -ne `wc -c <'elliptic/elliptic.out.gold'`; then
    echo shar: \"'elliptic/elliptic.out.gold'\" unpacked with wrong size!
fi
# end of 'elliptic/elliptic.out.gold'
fi
echo shar: End of shell archive.
exit 0


