
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  gcd/gcd.hc gcd/gcd.pat gcd/gcd.mon gcd/gcd.sif
#   gcd/gcd.out.gold
# Wrapped by synthesis@sirius on Thu Jul 26 17:17:04 1990
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'gcd/gcd.hc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gcd/gcd.hc'\"
else
echo shar: Extracting \"'gcd/gcd.hc'\" \(965 characters\)
sed "s/^X//" >'gcd/gcd.hc' <<'END_OF_FILE'
X#define SIZE 8				/* size of number */
X
Xprocess gcd(xi,yi,rst,ou, peekx, peeky)
X	in port xi[SIZE], yi[SIZE];	/* input numbers */
X	in port rst;			/* restart input */
X	out port ou[SIZE];		/* result output */
X	out port peekx[SIZE], peeky[SIZE];
X[
X	/* sampled input values and temporary variable */
X	static x[SIZE] = 0, y[SIZE] = 0;
X
X	/* set output to zero during computation */
X	peekx = x; peeky = y;
X
X	write ou = 0; 
X
X	/* sample input numbers */
X	while ( ! rst )
X		;
X	< x = read(xi);
X	  y = read(yi);
X	>
X
X	/* gcd just for non-zero numbers defined */
X	if ((x != 0) & (y != 0)) 
X	{
X		/* using euclid's gcd algorithm */
X		do /* repeat */
X		{
X			/* let x become the remainder of x divided by y */
X			while (x >= y)
X				x = x - y;
X
X			/* x should be less than y now, so exchange x and y */
X			< x = y; y = x; >
X		}
X		/* end if y ( = former remainder x) is zero */
X		/* until */ while  (y != 0);
X		/*
X		*/
X	}
X
X	/* write results (gcd or zero) to output */
X	write ou = x;
X]
X
END_OF_FILE
if test 965 -ne `wc -c <'gcd/gcd.hc'`; then
    echo shar: \"'gcd/gcd.hc'\" unpacked with wrong size!
fi
# end of 'gcd/gcd.hc'
fi
if test -f 'gcd/gcd.pat' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gcd/gcd.pat'\"
else
echo shar: Extracting \"'gcd/gcd.pat'\" \(3638 characters\)
sed "s/^X//" >'gcd/gcd.pat' <<'END_OF_FILE'
X# gcd input patterns file - rgupta 3/12
X#
X#.inputs xi[8] yi[8] rst[1]
X.inputs EN RESET rst[0:0] xi[0:0] xi[1:1] xi[2:2] xi[3:3] xi[4:4] xi[5:5] xi[6:6] xi[7:7] yi[0:0] yi[1:1] yi[2:2] yi[3:3] yi[4:4] yi[5:5] yi[6:6] yi[7:7] ;
X#0100000000000000000 ;
X#0100000000000000000 ;
X1010000000000000000 ;
X1010000000000000000 ;
X1010000000000000000 ;
X1000000000000000000 ;
X1000000000000000000 ;
X1001000000010000000 ;
X1001000000010000000 ;
X1001000000010000000 ;
X1001000000010000000 ;
X1001000000010000000 ;
X1001000000010000000 ;
X1001000000010000000 ;
X1001000000010000000 ;
X1010100000000100000 ;
X1000100000000100000 ;
X1000100000000100000 ;
X1000100000000100000 ;
X1000100000000100000 ;
X1000100000000100000 ;
X1000100000000100000 ;
X1000100000000100000 ;
X1000100000000100000 ;
X1000100000000100000 ;
X1010100000001100000 ;
X1000100000001100000 ;
X1000100000001100000 ;
X1000100000001100000 ;
X1000100000001100000 ;
X1000100000001100000 ;
X1000100000001100000 ;
X1000100000001100000 ;
X1000100000001100000 ;
X1011100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1001100000001100000 ;
X1010110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1000110000010010000 ;
X1011110000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000010010000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1001100000000110000 ;
X1000010000000001000 ;
X1000010000000001000 ;
X1000010000000001000 ;
X1000010000000001000 ;
X1000010000000001000 ;
X1000010000000001000 ;
X1000010000000001000 ;
X1000010000000001000 ;
X1000010000000001000 ;
X1000010000000110000 ;
X1000010000000110000 ;
X1000010000000110000 ;
X1000010000000110000 ;
X1000010000000110000 ;
X1000010000000110000 ;
X1000010000000110000 ;
X1000010000000110000 ;
X1000010000000110000 ;
X1000011000000110000 ;
X1000011000000110000 ;
X1000011000000110000 ;
X1000011000000110000 ;
X1000011000000110000 ;
X1000011000000110000 ;
X1000011000000110000 ;
X1000011000000110000 ;
X1000011000000110000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000011000011000000 ;
X1000000100001000000 ;
X1000000100001000000 ;
X1000000100001000000 ;
X1000000100001000000 ;
X1000000100001000000 ;
X1000000100001000000 ;
X1000000100001000000 ;
X1000000100001000000 ;
X1000000100001000000 ;
X1000000100000100000 ;
X1000000100000100000 ;
X1000000100000100000 ;
X1000000100000100000 ;
X1000000100000100000 ;
X1000000100000100000 ;
X1000000100000100000 ;
X1000000100000100000 ;
X1000000100000010000 ;
X1000000100000010000 ;
X1000000100000010000 ;
X1000000100000010000 ;
X1000000100000010000 ;
X1000000100000010000 ;
X1000000100000010000 ;
END_OF_FILE
if test 3638 -ne `wc -c <'gcd/gcd.pat'`; then
    echo shar: \"'gcd/gcd.pat'\" unpacked with wrong size!
fi
# end of 'gcd/gcd.pat'
fi
if test -f 'gcd/gcd.mon' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gcd/gcd.mon'\"
else
echo shar: Extracting \"'gcd/gcd.mon'\" \(389 characters\)
sed "s/^X//" >'gcd/gcd.mon' <<'END_OF_FILE'
Xrst[0:0]
XHEX xi0 xi[0:0] xi[1:1] xi[2:2] xi[3:3]
XHEX xi1 xi[4:4] xi[5:5] xi[6:6] xi[7:7]
XHEX yi0 yi[0:0] yi[1:1] yi[2:2] yi[3:3]
XHEX yi1 yi[4:4] yi[5:5] yi[6:6] yi[7:7]
XHEX ou0 ou[0:0] ou[1:1] ou[2:2] ou[3:3]
XHEX ou1 ou[4:4] ou[5:5] ou[6:6] ou[7:7]
XHEX y0 y[0:0] y[1:1] y[2:2] y[3:3]
XHEX y1 y[4:4] y[5:5] y[6:6] y[7:7]
XHEX x0 x[0:0] x[1:1] x[2:2] x[3:3]
XHEX x1 x[4:4] x[5:5] x[6:6] x[7:7]
END_OF_FILE
if test 389 -ne `wc -c <'gcd/gcd.mon'`; then
    echo shar: \"'gcd/gcd.mon'\" unpacked with wrong size!
fi
# end of 'gcd/gcd.mon'
fi
if test -f 'gcd/gcd.sif' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gcd/gcd.sif'\"
else
echo shar: Extracting \"'gcd/gcd.sif'\" \(18976 characters\)
sed "s/^X//" >'gcd/gcd.sif' <<'END_OF_FILE'
X#
X#	Sif model gcd	Printed Tue Jul 24 15:06:48 1990
X#
X.model gcd sequencing process; 
X  .inputs port xi[8] port yi[8] port rst ;
X  .outputs port ou[8] port peekx[8] port peeky[8] ;
X    #	Index 1
X    .polargraph 1 10;
X    .variable M1[8] T11[9] T13 T10 
X	T15 T9 T8 T4[8] 
X	T5[8] T3 T1 ;
X    .variable register y[8] (0b00000000 ) register x[8] (0b00000000 ) ;
X    .variable tag d tag c ;
X    #	10 nodes
X    .node 1 nop;	#	source node
X      .successors 2 ;
X    .endnode;
X
X    .node 2 operation;
X      .inputs rst[0:0] ;
X      .outputs T1[0:0] ;
X      .successors 3 ;	#  predecessors 1 
X      .operation logic 1 ;
X        #	Expression 0
X        T1[0:0] = (rst[0:0] )';
X        .attribute delay 1 level;
X        .attribute area 2 literal;
X      .endoperation;
X    .endnode;
X
X    .node 3 cond;
X      .successors 4 5 ;	#  predecessors 2 
X      .cond T1[0:0] ;	#	Latched
X      .case 1 ;
X        #	Index 2
X        .polargraph 1 3;
X        #	3 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 loop;
X          .successors 3 ;	#  predecessors 1 
X          .loop T3[0:0] ;	#	
X            #	Index 3
X            .polargraph 1 3;
X            #	3 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 operation;
X              .inputs rst[0:0] ;
X              .outputs T3[0:0] ;
X              .successors 3 ;	#  predecessors 1 
X              .operation logic 2 ;
X                #	Expression 0
X                T2[0:0] = (rst[0:0] )';
X                T3[0:0] = (T2[0:0] )';
X                .attribute delay 2 level;
X                .attribute area 4 literal;
X              .endoperation;
X            .endnode;
X
X            .node 3 nop;	#	sink node
X              .successors ;	#  predecessors 2 
X            .endnode;
X
X            .endpolargraph;
X          .endloop;
X        .endnode;
X
X        .node 3 nop;	#	sink node
X          .successors ;	#  predecessors 2 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .case 0 ;
X        #	Index 4
X        .polargraph 1 2;
X        #	2 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 nop;	#	sink node
X          .successors ;	#  predecessors 1 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 4 operation;
X      .inputs yi[0:7] ;
X      .outputs T4[0:7] ;
X      .successors 6 ;	#  predecessors 3 
X      .attribute constraint delay 4 1 cycles;
X      .attribute tag c[0:0] ;
X      .operation read;
X    .endnode;
X
X    .node 5 operation;
X      .inputs xi[0:7] ;
X      .outputs T5[0:7] ;
X      .successors 6 ;	#  predecessors 3 
X      .attribute constraint delay 5 1 cycles;
X      .attribute tag d[0:0] ;
X      .operation read;
X    .endnode;
X
X    .node 6 operation;
X      .inputs T5[0:0] T5[1:1] T5[2:2] T5[3:3] 
X	T5[4:4] T5[5:5] T5[6:6] T5[7:7] 
X	T4[0:0] T4[1:1] T4[2:2] T4[3:3] 
X	T4[4:4] T4[5:5] T4[6:6] T4[7:7] 
X	;
X      .outputs T8[0:0] ;
X      .successors 7 ;	#  predecessors 4 5 
X      .operation logic 3 ;
X        #	Expression 0
X        T6[0:0] = (V00000000_T5_0_7[0:0] )';
X        T7[0:0] = (V00000000_T4_0_7[0:0] )';
X        T8[0:0] = (T6[0:0]  T7[0:0] );
X        V00000000_T4_0_7[0:0] = ((((((((T4[0:0] )' (T4[1:1] )') (T4[2:2] )') (T4[3:3] )') (T4[4:4] )') (T4[5:5] )') (T4[6:6] )') (T4[7:7] )');
X        V00000000_T5_0_7[0:0] = ((((((((T5[0:0] )' (T5[1:1] )') (T5[2:2] )') (T5[3:3] )') (T5[4:4] )') (T5[5:5] )') (T5[6:6] )') (T5[7:7] )');
X        .attribute delay 10 level;
X        .attribute area 53 literal;
X      .endoperation;
X    .endnode;
X
X    .node 7 cond;
X      .successors 8 ;	#  predecessors 6 
X      .cond T8[0:0] T9[0:0] ;	#	Latched
X      .case 0 ;
X        #	Index 5
X        .polargraph 1 2;
X        #	2 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 nop;	#	sink node
X          .successors ;	#  predecessors 1 
X        .endnode;
X
X        .endpolargraph;
X      .endcase;
X      .case 1 ;
X        #	Index 6
X        .polargraph 1 4;
X        #	4 nodes
X        .node 1 nop;	#	source node
X          .successors 2 ;
X        .endnode;
X
X        .node 2 operation;
X          .inputs T4[7:7] T4[6:6] T4[5:5] T4[4:4] 
X	T4[3:3] T4[2:2] T4[1:1] T4[0:0] 
X	T5[7:7] T5[6:6] T5[5:5] T5[4:4] 
X	T5[3:3] T5[2:2] T5[1:1] T5[0:0] 
X	;
X          .outputs y[7:7] y[6:6] y[5:5] y[4:4] 
X	y[3:3] y[2:2] y[1:1] y[0:0] 
X	x[7:7] x[6:6] x[5:5] x[4:4] 
X	x[3:3] x[2:2] x[1:1] x[0:0] 
X	;
X          .successors 3 ;	#  predecessors 1 
X          .attribute constraint delay 2 1 cycles;
X          .operation load_register;
X        .endnode;
X
X        .node 3 loop;
X          .successors 4 ;	#  predecessors 2 
X          .loop T15[0:0] ;	#	
X            #	Index 7
X            .polargraph 1 5;
X            #	5 nodes
X            .node 1 nop;	#	source node
X              .successors 2 ;
X            .endnode;
X
X            .node 2 operation;
X              .inputs x[0:0] x[1:1] x[2:2] x[3:3] 
X	x[4:4] x[5:5] x[6:6] x[7:7] 
X	y[0:0] y[1:1] y[2:2] y[3:3] 
X	y[4:4] y[5:5] y[6:6] y[7:7] 
X	;
X              .outputs T10[0:0] ;
X              .successors 3 ;	#  predecessors 1 
X              .operation logic 4 ;
X                #	Expression 0
X                c_0_T10[0:0] =  0 ;
X                d_0_T10[0:0] =  1 ;
X                c_1_T10[0:0] = ((c_0_T10[0:0]  (y[0:0] +(x[0:0] )'))+(d_0_T10[0:0]  (y[0:0]  (x[0:0] )')));
X                d_1_T10[0:0] = ((c_0_T10[0:0]  ((y[0:0] )' x[0:0] ))+(d_0_T10[0:0]  ((y[0:0] )'+x[0:0] )));
X                c_2_T10[0:0] = ((c_1_T10[0:0]  (y[1:1] +(x[1:1] )'))+(d_1_T10[0:0]  (y[1:1]  (x[1:1] )')));
X                d_2_T10[0:0] = ((c_1_T10[0:0]  ((y[1:1] )' x[1:1] ))+(d_1_T10[0:0]  ((y[1:1] )'+x[1:1] )));
X                c_3_T10[0:0] = ((c_2_T10[0:0]  (y[2:2] +(x[2:2] )'))+(d_2_T10[0:0]  (y[2:2]  (x[2:2] )')));
X                d_3_T10[0:0] = ((c_2_T10[0:0]  ((y[2:2] )' x[2:2] ))+(d_2_T10[0:0]  ((y[2:2] )'+x[2:2] )));
X                c_4_T10[0:0] = ((c_3_T10[0:0]  (y[3:3] +(x[3:3] )'))+(d_3_T10[0:0]  (y[3:3]  (x[3:3] )')));
X                d_4_T10[0:0] = ((c_3_T10[0:0]  ((y[3:3] )' x[3:3] ))+(d_3_T10[0:0]  ((y[3:3] )'+x[3:3] )));
X                c_5_T10[0:0] = ((c_4_T10[0:0]  (y[4:4] +(x[4:4] )'))+(d_4_T10[0:0]  (y[4:4]  (x[4:4] )')));
X                d_5_T10[0:0] = ((c_4_T10[0:0]  ((y[4:4] )' x[4:4] ))+(d_4_T10[0:0]  ((y[4:4] )'+x[4:4] )));
X                c_6_T10[0:0] = ((c_5_T10[0:0]  (y[5:5] +(x[5:5] )'))+(d_5_T10[0:0]  (y[5:5]  (x[5:5] )')));
X                d_6_T10[0:0] = ((c_5_T10[0:0]  ((y[5:5] )' x[5:5] ))+(d_5_T10[0:0]  ((y[5:5] )'+x[5:5] )));
X                c_7_T10[0:0] = ((c_6_T10[0:0]  (y[6:6] +(x[6:6] )'))+(d_6_T10[0:0]  (y[6:6]  (x[6:6] )')));
X                d_7_T10[0:0] = ((c_6_T10[0:0]  ((y[6:6] )' x[6:6] ))+(d_6_T10[0:0]  ((y[6:6] )'+x[6:6] )));
X                c_8_T10[0:0] = ((c_7_T10[0:0]  (y[7:7] +(x[7:7] )'))+(d_7_T10[0:0]  (y[7:7]  (x[7:7] )')));
X                d_8_T10[0:0] = ((c_7_T10[0:0]  ((y[7:7] )' x[7:7] ))+(d_7_T10[0:0]  ((y[7:7] )'+x[7:7] )));
X                T10[0:0] = d_8_T10[0:0] ;
X                .attribute delay 18 level;
X                .attribute area 211 literal;
X              .endoperation;
X            .endnode;
X
X            .node 3 cond;
X              .successors 4 ;	#  predecessors 2 
X              .cond T10[0:0] ;	#	Latched
X              .case 1 ;
X                #	Index 8
X                .polargraph 1 3;
X                #	3 nodes
X                .node 1 nop;	#	source node
X                  .successors 2 ;
X                .endnode;
X
X                .node 2 loop;
X                  .successors 3 ;	#  predecessors 1 
X                  .loop T13[0:0] ;	#	
X                    #	Index 9
X                    .polargraph 1 3;
X                    #	3 nodes
X                    .node 1 nop;	#	source node
X                      .successors 2 ;
X                    .endnode;
X
X                    .node 2 operation;
X                      .inputs x[0:0] x[1:1] x[2:2] x[3:3] 
X	x[4:4] x[5:5] x[6:6] x[7:7] 
X	y[0:0] y[1:1] y[2:2] y[3:3] 
X	y[4:4] y[5:5] y[6:6] y[7:7] 
X	;
X                      .outputs T11[0:0] T11[1:1] T11[2:2] T11[3:3] 
X	T11[4:4] T11[5:5] T11[6:6] T11[7:7] 
X	T13[0:0] ;
X                      .successors 3 ;	#  predecessors 1 
X                      .operation logic 5 ;
X                        #	Expression 0
X                        c_T11[0:0] =  1 ;
X                        T11[0:0] = ((((((x[0:0] )' (y[0:0] )') (c_T11[0:0] )')+((x[0:0]  y[0:0] ) (c_T11[0:0] )'))+(((x[0:0] )' y[0:0] ) c_T11[0:0] ))+((x[0:0]  (y[0:0] )') c_T11[0:0] ));
X                        c_T11[1:1] = ((x[0:0]  (y[0:0] )')+(c_T11[0:0]  (x[0:0] +(y[0:0] )')));
X                        T11[1:1] = ((((((x[1:1] )' (y[1:1] )') (c_T11[1:1] )')+((x[1:1]  y[1:1] ) (c_T11[1:1] )'))+(((x[1:1] )' y[1:1] ) c_T11[1:1] ))+((x[1:1]  (y[1:1] )') c_T11[1:1] ));
X                        c_T11[2:2] = ((x[1:1]  (y[1:1] )')+(c_T11[1:1]  (x[1:1] +(y[1:1] )')));
X                        T11[2:2] = ((((((x[2:2] )' (y[2:2] )') (c_T11[2:2] )')+((x[2:2]  y[2:2] ) (c_T11[2:2] )'))+(((x[2:2] )' y[2:2] ) c_T11[2:2] ))+((x[2:2]  (y[2:2] )') c_T11[2:2] ));
X                        c_T11[3:3] = ((x[2:2]  (y[2:2] )')+(c_T11[2:2]  (x[2:2] +(y[2:2] )')));
X                        T11[3:3] = ((((((x[3:3] )' (y[3:3] )') (c_T11[3:3] )')+((x[3:3]  y[3:3] ) (c_T11[3:3] )'))+(((x[3:3] )' y[3:3] ) c_T11[3:3] ))+((x[3:3]  (y[3:3] )') c_T11[3:3] ));
X                        c_T11[4:4] = ((x[3:3]  (y[3:3] )')+(c_T11[3:3]  (x[3:3] +(y[3:3] )')));
X                        T11[4:4] = ((((((x[4:4] )' (y[4:4] )') (c_T11[4:4] )')+((x[4:4]  y[4:4] ) (c_T11[4:4] )'))+(((x[4:4] )' y[4:4] ) c_T11[4:4] ))+((x[4:4]  (y[4:4] )') c_T11[4:4] ));
X                        c_T11[5:5] = ((x[4:4]  (y[4:4] )')+(c_T11[4:4]  (x[4:4] +(y[4:4] )')));
X                        T11[5:5] = ((((((x[5:5] )' (y[5:5] )') (c_T11[5:5] )')+((x[5:5]  y[5:5] ) (c_T11[5:5] )'))+(((x[5:5] )' y[5:5] ) c_T11[5:5] ))+((x[5:5]  (y[5:5] )') c_T11[5:5] ));
X                        c_T11[6:6] = ((x[5:5]  (y[5:5] )')+(c_T11[5:5]  (x[5:5] +(y[5:5] )')));
X                        T11[6:6] = ((((((x[6:6] )' (y[6:6] )') (c_T11[6:6] )')+((x[6:6]  y[6:6] ) (c_T11[6:6] )'))+(((x[6:6] )' y[6:6] ) c_T11[6:6] ))+((x[6:6]  (y[6:6] )') c_T11[6:6] ));
X                        c_T11[7:7] = ((x[6:6]  (y[6:6] )')+(c_T11[6:6]  (x[6:6] +(y[6:6] )')));
X                        T11[7:7] = ((((((x[7:7] )' (y[7:7] )') (c_T11[7:7] )')+((x[7:7]  y[7:7] ) (c_T11[7:7] )'))+(((x[7:7] )' y[7:7] ) c_T11[7:7] ))+((x[7:7]  (y[7:7] )') c_T11[7:7] ));
X                        c_T11[8:8] = ((x[7:7]  (y[7:7] )')+(c_T11[7:7]  (x[7:7] +(y[7:7] )')));
X                        T11[8:8] = c_T11[7:7] ;
X                        c_0_T12[0:0] =  0 ;
X                        d_0_T12[0:0] =  1 ;
X                        c_1_T12[0:0] = ((c_0_T12[0:0]  (y[0:0] +(T11[0:0] )'))+(d_0_T12[0:0]  (y[0:0]  (T11[0:0] )')));
X                        d_1_T12[0:0] = ((c_0_T12[0:0]  ((y[0:0] )' T11[0:0] ))+(d_0_T12[0:0]  ((y[0:0] )'+T11[0:0] )));
X                        c_2_T12[0:0] = ((c_1_T12[0:0]  (y[1:1] +(T11[1:1] )'))+(d_1_T12[0:0]  (y[1:1]  (T11[1:1] )')));
X                        d_2_T12[0:0] = ((c_1_T12[0:0]  ((y[1:1] )' T11[1:1] ))+(d_1_T12[0:0]  ((y[1:1] )'+T11[1:1] )));
X                        c_3_T12[0:0] = ((c_2_T12[0:0]  (y[2:2] +(T11[2:2] )'))+(d_2_T12[0:0]  (y[2:2]  (T11[2:2] )')));
X                        d_3_T12[0:0] = ((c_2_T12[0:0]  ((y[2:2] )' T11[2:2] ))+(d_2_T12[0:0]  ((y[2:2] )'+T11[2:2] )));
X                        c_4_T12[0:0] = ((c_3_T12[0:0]  (y[3:3] +(T11[3:3] )'))+(d_3_T12[0:0]  (y[3:3]  (T11[3:3] )')));
X                        d_4_T12[0:0] = ((c_3_T12[0:0]  ((y[3:3] )' T11[3:3] ))+(d_3_T12[0:0]  ((y[3:3] )'+T11[3:3] )));
X                        c_5_T12[0:0] = ((c_4_T12[0:0]  (y[4:4] +(T11[4:4] )'))+(d_4_T12[0:0]  (y[4:4]  (T11[4:4] )')));
X                        d_5_T12[0:0] = ((c_4_T12[0:0]  ((y[4:4] )' T11[4:4] ))+(d_4_T12[0:0]  ((y[4:4] )'+T11[4:4] )));
X                        c_6_T12[0:0] = ((c_5_T12[0:0]  (y[5:5] +(T11[5:5] )'))+(d_5_T12[0:0]  (y[5:5]  (T11[5:5] )')));
X                        d_6_T12[0:0] = ((c_5_T12[0:0]  ((y[5:5] )' T11[5:5] ))+(d_5_T12[0:0]  ((y[5:5] )'+T11[5:5] )));
X                        c_7_T12[0:0] = ((c_6_T12[0:0]  (y[6:6] +(T11[6:6] )'))+(d_6_T12[0:0]  (y[6:6]  (T11[6:6] )')));
X                        d_7_T12[0:0] = ((c_6_T12[0:0]  ((y[6:6] )' T11[6:6] ))+(d_6_T12[0:0]  ((y[6:6] )'+T11[6:6] )));
X                        c_8_T12[0:0] = ((c_7_T12[0:0]  (y[7:7] +(T11[7:7] )'))+(d_7_T12[0:0]  (y[7:7]  (T11[7:7] )')));
X                        d_8_T12[0:0] = ((c_7_T12[0:0]  ((y[7:7] )' T11[7:7] ))+(d_7_T12[0:0]  ((y[7:7] )'+T11[7:7] )));
X                        T12[0:0] = d_8_T12[0:0] ;
X                        T13[0:0] = (T12[0:0] )';
X                        .attribute delay 26 level;
X                        .attribute area 535 literal;
X                      .endoperation;
X                    .endnode;
X
X                    .node 3 nop;	#	sink node
X                      .successors ;	#  predecessors 2 
X                    .endnode;
X
X                    .endpolargraph;
X                  .attribute hercules loop_load x[7:7] T11[7:7] ;
X                  .attribute hercules loop_load x[6:6] T11[6:6] ;
X                  .attribute hercules loop_load x[5:5] T11[5:5] ;
X                  .attribute hercules loop_load x[4:4] T11[4:4] ;
X                  .attribute hercules loop_load x[3:3] T11[3:3] ;
X                  .attribute hercules loop_load x[2:2] T11[2:2] ;
X                  .attribute hercules loop_load x[1:1] T11[1:1] ;
X                  .attribute hercules loop_load x[0:0] T11[0:0] ;
X                  .endloop;
X                .endnode;
X
X                .node 3 nop;	#	sink node
X                  .successors ;	#  predecessors 2 
X                .endnode;
X
X                .endpolargraph;
X              .endcase;
X              .case 0 ;
X                #	Index 10
X                .polargraph 1 2;
X                #	2 nodes
X                .node 1 nop;	#	source node
X                  .successors 2 ;
X                .endnode;
X
X                .node 2 nop;	#	sink node
X                  .successors ;	#  predecessors 1 
X                .endnode;
X
X                .endpolargraph;
X              .endcase;
X              .endcond;
X            .endnode;
X
X            .node 4 operation;
X              .inputs x[0:0] x[1:1] x[2:2] x[3:3] 
X	x[4:4] x[5:5] x[6:6] x[7:7] 
X	;
X              .outputs T15[0:0] ;
X              .successors 5 ;	#  predecessors 3 
X              .operation logic 6 ;
X                #	Expression 0
X                T14[0:0] = (V00000000_x_0_7[0:0] )';
X                T15[0:0] = (T14[0:0] )';
X                V00000000_x_0_7[0:0] = ((((((((x[0:0] )' (x[1:1] )') (x[2:2] )') (x[3:3] )') (x[4:4] )') (x[5:5] )') (x[6:6] )') (x[7:7] )');
X                .attribute delay 10 level;
X                .attribute area 27 literal;
X              .endoperation;
X            .endnode;
X
X            .node 5 nop;	#	sink node
X              .successors ;	#  predecessors 4 
X            .endnode;
X
X            .endpolargraph;
X          .attribute hercules loop_load y[7:7] x[7:7] ;
X          .attribute hercules loop_load y[6:6] x[6:6] ;
X          .attribute hercules loop_load y[5:5] x[5:5] ;
X          .attribute hercules loop_load y[4:4] x[4:4] ;
X          .attribute hercules loop_load y[3:3] x[3:3] ;
X          .attribute hercules loop_load y[2:2] x[2:2] ;
X          .attribute hercules loop_load y[1:1] x[1:1] ;
X          .attribute hercules loop_load y[0:0] x[0:0] ;
X          .attribute hercules loop_load x[7:7] y[7:7] ;
X          .attribute hercules loop_load x[6:6] y[6:6] ;
X          .attribute hercules loop_load x[5:5] y[5:5] ;
X          .attribute hercules loop_load x[4:4] y[4:4] ;
X          .attribute hercules loop_load x[3:3] y[3:3] ;
X          .attribute hercules loop_load x[2:2] y[2:2] ;
X          .attribute hercules loop_load x[1:1] y[1:1] ;
X          .attribute hercules loop_load x[0:0] y[0:0] ;
X          .endloop;
X        .endnode;
X
X        .node 4 nop;	#	sink node
X          .successors ;	#  predecessors 3 
X        .endnode;
X
X        .attribute constraint delay 2 1 cycles;
X        .endpolargraph;
X      .endcase;
X      .endcond;
X    .endnode;
X
X    .node 8 operation;
X      .inputs T9[0:0] T5[7:7] x[7:7] T5[6:6] 
X	x[6:6] T5[5:5] x[5:5] T5[4:4] 
X	x[4:4] T5[3:3] x[3:3] T5[2:2] 
X	x[2:2] T5[1:1] x[1:1] T5[0:0] 
X	x[0:0] ;
X      .outputs M1[0:0] M1[1:1] M1[2:2] M1[3:3] 
X	M1[4:4] M1[5:5] M1[6:6] M1[7:7] 
X	;
X      .successors 9 ;	#  predecessors 7 
X      .operation logic 7 ;
X        #	Expression 0
X        M1[0:0] = X8[0:0] ;
X        M1[1:1] = X7[0:0] ;
X        M1[2:2] = X6[0:0] ;
X        M1[3:3] = X5[0:0] ;
X        M1[4:4] = X4[0:0] ;
X        M1[5:5] = X3[0:0] ;
X        M1[6:6] = X2[0:0] ;
X        M1[7:7] = X1[0:0] ;
X        X1[0:0] = ((V0_T9_0_0[0:0]  T5[7:7] )+(V1_T9_0_0[0:0]  x[7:7] ));
X        X2[0:0] = ((V0_T9_0_0[0:0]  T5[6:6] )+(V1_T9_0_0[0:0]  x[6:6] ));
X        X3[0:0] = ((V0_T9_0_0[0:0]  T5[5:5] )+(V1_T9_0_0[0:0]  x[5:5] ));
X        X4[0:0] = ((V0_T9_0_0[0:0]  T5[4:4] )+(V1_T9_0_0[0:0]  x[4:4] ));
X        X5[0:0] = ((V0_T9_0_0[0:0]  T5[3:3] )+(V1_T9_0_0[0:0]  x[3:3] ));
X        X6[0:0] = ((V0_T9_0_0[0:0]  T5[2:2] )+(V1_T9_0_0[0:0]  x[2:2] ));
X        X7[0:0] = ((V0_T9_0_0[0:0]  T5[1:1] )+(V1_T9_0_0[0:0]  x[1:1] ));
X        X8[0:0] = ((V0_T9_0_0[0:0]  T5[0:0] )+(V1_T9_0_0[0:0]  x[0:0] ));
X        V1_T9_0_0[0:0] = T9[0:0] ;
X        V0_T9_0_0[0:0] = (T9[0:0] )';
X        .attribute delay 3 level;
X        .attribute area 67 literal;
X      .endoperation;
X    .endnode;
X
X    .node 9 operation;
X      .inputs M1[0:7] ;
X      .outputs ou[0:7] ;
X      .successors 10 ;	#  predecessors 8 
X      .attribute constraint delay 9 1 cycles;
X      .operation write;
X    .endnode;
X
X    .node 10 nop;	#	sink node
X      .successors ;	#  predecessors 9 
X    .endnode;
X
X    .attribute constraint delay 4 1 cycles;
X    .attribute constraint delay 5 1 cycles;
X    .attribute constraint delay 9 1 cycles;
X    .attribute hercules direct_connect peekx[0:0] x[0:0] ;
X    .attribute hercules direct_connect peekx[1:1] x[1:1] ;
X    .attribute hercules direct_connect peekx[2:2] x[2:2] ;
X    .attribute hercules direct_connect peekx[3:3] x[3:3] ;
X    .attribute hercules direct_connect peekx[4:4] x[4:4] ;
X    .attribute hercules direct_connect peekx[5:5] x[5:5] ;
X    .attribute hercules direct_connect peekx[6:6] x[6:6] ;
X    .attribute hercules direct_connect peekx[7:7] x[7:7] ;
X    .attribute hercules direct_connect peeky[0:0] y[0:0] ;
X    .attribute hercules direct_connect peeky[1:1] y[1:1] ;
X    .attribute hercules direct_connect peeky[2:2] y[2:2] ;
X    .attribute hercules direct_connect peeky[3:3] y[3:3] ;
X    .attribute hercules direct_connect peeky[4:4] y[4:4] ;
X    .attribute hercules direct_connect peeky[5:5] y[5:5] ;
X    .attribute hercules direct_connect peeky[6:6] y[6:6] ;
X    .attribute hercules direct_connect peeky[7:7] y[7:7] ;
X    .endpolargraph;
X.endmodel gcd ;
END_OF_FILE
if test 18976 -ne `wc -c <'gcd/gcd.sif'`; then
    echo shar: \"'gcd/gcd.sif'\" unpacked with wrong size!
fi
# end of 'gcd/gcd.sif'
fi
if test -f 'gcd/gcd.out.gold' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gcd/gcd.out.gold'\"
else
echo shar: Extracting \"'gcd/gcd.out.gold'\" \(16905 characters\)
sed "s/^X//" >'gcd/gcd.out.gold' <<'END_OF_FILE'
X97 ariadne extract
Xxi[0:0]
Xxi[1:1]
Xxi[2:2]
Xxi[3:3]
Xxi[4:4]
Xxi[5:5]
Xxi[6:6]
Xxi[7:7]
Xyi[0:0]
Xyi[1:1]
Xyi[2:2]
Xyi[3:3]
Xyi[4:4]
Xyi[5:5]
Xyi[6:6]
Xyi[7:7]
Xrst[0:0]
Xou[0:0]
Xou[1:1]
Xou[2:2]
Xou[3:3]
Xou[4:4]
Xou[5:5]
Xou[6:6]
Xou[7:7]
Xpeekx[0:0]
Xpeekx[1:1]
Xpeekx[2:2]
Xpeekx[3:3]
Xpeekx[4:4]
Xpeekx[5:5]
Xpeekx[6:6]
Xpeekx[7:7]
Xpeeky[0:0]
Xpeeky[1:1]
Xpeeky[2:2]
Xpeeky[3:3]
Xpeeky[4:4]
Xpeeky[5:5]
Xpeeky[6:6]
Xpeeky[7:7]
XM1[0:0]
XM1[1:1]
XM1[2:2]
XM1[3:3]
XM1[4:4]
XM1[5:5]
XM1[6:6]
XM1[7:7]
XT11[0:0]
XT11[1:1]
XT11[2:2]
XT11[3:3]
XT11[4:4]
XT11[5:5]
XT11[6:6]
XT11[7:7]
XT11[8:8]
XT13[0:0]
XT10[0:0]
XT15[0:0]
XT9[0:0]
XT8[0:0]
XT4[0:0]
XT4[1:1]
XT4[2:2]
XT4[3:3]
XT4[4:4]
XT4[5:5]
XT4[6:6]
XT4[7:7]
XT5[0:0]
XT5[1:1]
XT5[2:2]
XT5[3:3]
XT5[4:4]
XT5[5:5]
XT5[6:6]
XT5[7:7]
XT3[0:0]
XT1[0:0]
Xy[0:0]
Xy[1:1]
Xy[2:2]
Xy[3:3]
Xy[4:4]
Xy[5:5]
Xy[6:6]
Xy[7:7]
Xx[0:0]
Xx[1:1]
Xx[2:2]
Xx[3:3]
Xx[4:4]
Xx[5:5]
Xx[6:6]
Xx[7:7]
X     0:0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000
X     1:0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000
X     2:0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000
X     3:0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
X     4:0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X     5:1000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X     6:1000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X     7:1000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X     8:1000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X     9:1000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X    10:1000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X    11:1000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X    12:1000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
X    13:0100000000100000100000000000000000000000000000000000000000000000010000001000000110000000000000000
X    14:0100000000100000000000000010000000010000000000000000000000000110010000001000000110010000001000000
X    15:0100000000100000000000000001000000100000000000000000000000000110010000001000000110100000000100000
X    16:0100000000100000000000000010000000100000000000000010000001010110010000001000000110100000001000000
X    17:0100000000100000001000000000000000000000001000000000000001111110010000001000000110000000000000000
X    18:0100000000100000001000000000000000000000001000000000000001111110010000001000000010000000000000000
X    19:0100000000100000001000000000000000000000001000000000000001111110010000001000000010000000000000000
X    20:0100000000100000001000000000000000000000001000000000000001111110010000001000000010000000000000000
X    21:0100000000100000001000000000000000000000001000000000000001111110010000001000000010000000000000000
X    22:0100000000100000001000000000000000000000001000000000000001111110010000001000000010000000000000000
X    23:0100000001100000101000000000000000000000001000000000000001111110110000001000000110000000000000000
X    24:0100000001100000001000000010000000110000001000000000000001111110110000001000000110110000001000000
X    25:0100000001100000001000000011000000100000001000000000000001100110110000001000000110100000001100000
X    26:0100000001100000001000000001000000100000001000000001000001010110110000001000000110100000000100000
X    27:0100000001100000001000000010000000100000001000000010000001010110110000001000000110100000001000000
X    28:0100000001100000001000000000000000000000001000000000000001111110110000001000000110000000000000000
X    29:0100000001100000001000000000000000000000001000000000000001111110110000001000000010000000000000000
X    30:0100000001100000001000000000000000000000001000000000000001111110110000001000000010000000000000000
X    31:0100000001100000001000000000000000000000001000000000000001111110110000001000000010000000000000000
X    32:1100000001100000101000000000000000000000001000000000000001111110110000011000000110000000000000000
X    33:1100000001100000001000000110000000110000001000000000000001111110110000011000000110110000011000000
X    34:1100000001100000001000000011000001100000001000000000000001100110110000011000000111100000001100000
X    35:1100000001100000001000000110000001100000001000000110000001010110110000011000000111100000011000000
X    36:1100000001100000011000000000000000000000011000000000000001111110110000011000000110000000000000000
X    37:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    38:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    39:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    40:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    41:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    42:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    43:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    44:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    45:1100000001100000011000000000000000000000011000000000000001111110110000011000000010000000000000000
X    46:0110000010010000111000000000000000000000011000000000000001111111001000001100000110000000000000000
X    47:0110000010010000011000000011000001001000011000000000000001111111001000001100000111001000001100000
X    48:0110000010010000011000000100100000110000011000000000000001100111001000001100000110110000010010000
X    49:0110000010010000011000000011000001100000011000000110000001110111001000001100000111100000001100000
X    50:0110000010010000011000000110000001100000011000000110000001010111001000001100000111100000011000000
X    51:0110000010010000011000000000000000000000011000000000000001111111001000001100000110000000000000000
X    52:0110000010010000011000000000000000000000011000000000000001111111001000001100000010000000000000000
X    53:0110000010010000011000000000000000000000011000000000000001111111001000001100000010000000000000000
X    54:0110000010010000011000000000000000000000011000000000000001111111001000001100000010000000000000000
X    55:0110000010010000011000000000000000000000011000000000000001111111001000001100000010000000000000000
X    56:0110000010010000011000000000000000000000011000000000000001111111001000001100000010000000000000000
X    57:0110000010010000011000000000000000000000011000000000000001111111001000001100000010000000000000000
X    58:0110000010010000011000000000000000000000011000000000000001111111001000001100000010000000000000000
X    59:0110000010010000011000000000000000000000011000000000000001111111001000001100000010000000000000000
X    60:1110000010010000111000000000000000000000011000000000000001111111001000011100000110000000000000000
X    61:1100000010010000011000000111000001001000011000000000000001111111001000011100000111001000011100000
X    62:1100000010010000011000000100100001110000011000000000000001100111001000011100000111110000010010000
X    63:1100000010010000011000000111000000100000011000000010000001110111001000011100000110100000011100000
X    64:1100000010010000011000000101000000100000011000000101000001010111001000011100000110100000010100000
X    65:1100000010010000011000000110000000100000011000000110000001010111001000011100000110100000011000000
X    66:1100000010010000011000000010000001000000011000000100000001110111001000011100000111000000001000000
X    67:1100000010010000011000000100000001000000011000000100000001010111001000011100000111000000010000000
X    68:1100000010010000010000000000000000000000010000000000000001111111001000011100000110000000000000000
X    69:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    70:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    71:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    72:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    73:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    74:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    75:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    76:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    77:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    78:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    79:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    80:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    81:1100000010010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    82:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    83:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    84:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    85:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    86:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    87:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    88:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    89:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    90:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    91:1100000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    92:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    93:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    94:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    95:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    96:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    97:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    98:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X    99:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   100:0010000000001000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   101:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   102:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   103:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   104:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   105:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   106:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   107:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   108:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   109:0010000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   110:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   111:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   112:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   113:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   114:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   115:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   116:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   117:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   118:0011000000110000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   119:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   120:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   121:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   122:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   123:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   124:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   125:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   126:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   127:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   128:0011000011000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   129:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   130:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   131:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   132:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   133:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   134:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   135:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   136:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   137:0000100001000000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   138:0000100000100000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   139:0000100000100000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   140:0000100000100000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   141:0000100000100000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   142:0000100000100000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   143:0000100000100000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   144:0000100000100000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   145:0000100000100000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   146:0000100000010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   147:0000100000010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   148:0000100000010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   149:0000100000010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   150:0000100000010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   151:0000100000010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
X   152:0000100000010000010000000000000000000000010000000000000001111111001000011100000010000000000000000
END_OF_FILE
if test 16905 -ne `wc -c <'gcd/gcd.out.gold'`; then
    echo shar: \"'gcd/gcd.out.gold'\" unpacked with wrong size!
fi
# end of 'gcd/gcd.out.gold'
fi
echo shar: End of shell archive.
exit 0


