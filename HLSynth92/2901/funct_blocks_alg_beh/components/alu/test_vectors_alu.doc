--------------------------------------------------------------------------------
--
--   AM2901 Benchmark -- Alu component
--
-- Source: AMD data book
--
-- VHDL Benchmark author Indraneel Ghosh
--                       University Of California, Irvine, CA 92717
--
-- Developed on Nov 1, 1991
--
--------------------------------------------------------------------------------

The "alu" block operation is controlled by three middle bits 
( I5, I4, I3) in the instruction. Thus there are eight possible cases.

The test vectors in "tv_alu.vhdl" test the alu component in 
all modes of operation for each of the eight cases. For example, some 
vectors test whether the carry is being propagated across all bits while
performing an addition.

----------------------------------------------------------------------------

(1) Compute RE + S. ( RE = 0001, S = 0001)

RE <= "0001";          
S <= "0001";
C0 <= '0';         
I <= "000000000";

----------------------------------------------------------------------------

(2) Compute RE + S + 1. ( RE = 0010, S = 0010)

RE <= "0010";           
S <= "0010";
C0 <= '1';           
I <= "000000000";

----------------------------------------------------------------------------

(3)  Compute RE + S. ( RE = 0100, S = 0100)

RE <= "0100";           
S <= "0100";
C0 <= '0';        
I <= "000000000";

----------------------------------------------------------------------------

(4) Compute RE + S. ( RE = 1000, S = 1000)

RE <= "1000";           
S <= "1000";
C0 <= '0'; 
I <= "000000000";

----------------------------------------------------------------------------

(5) Compute S - RE. ( RE = 0001, S = 0010)

RE <= "0001";           
S <= "0010";
C0 <= '1';   
I <= "000001000";

----------------------------------------------------------------------------

(6) Compute S - RE -1. ( RE = 0001, S = 0010)

RE <= "0001";           
S <= "0010";
C0 <= '0';        
I <= "000001000";

----------------------------------------------------------------------------

(7) Compute RE - S. ( RE = 1000, S = 0001)

RE <= "1000";           
S <= "0001";
C0 <= '1'; 
I <= "000010000";

----------------------------------------------------------------------------

(8)  Compute RE - S - 1. ( RE = 1000, S = 0001)

RE <= "1000";         
S <= "0001";
C0 <= '0'; 
I <= "000010000";

----------------------------------------------------------------------------

(9) Compute RE or S. ( RE = 1010, S = 1001)

RE <= "1010";          
 S <= "1001";
C0 <= '0';        
I <= "000011000";

----------------------------------------------------------------------------

(10) Compute RE and S. ( RE = 1010, S = 1001)

RE <= "1010";         
 S <= "1001";
C0 <= '0'; 
I <= "000100000";

----------------------------------------------------------------------------

(11) Compute not(RE) and S. ( RE = 1010, S = 1001)

RE <= "1010";          
 S <= "1001";
C0 <= '0'; 
I <= "000101000";

----------------------------------------------------------------------------

(12) Compute RE xor S. ( RE = 1010, S = 1001)

RE <= "1010";          
 S <= "1001";
C0 <= '0'; 
I <= "000110000";

----------------------------------------------------------------------------

(13) Compute RE xnor S. ( RE = 0101, S = 1001)

RE <= "0101";          
 S <= "1001";
C0 <= '0'; 
I <= "000111000";

----------------------------------------------------------------------------
