// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fancy,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.404000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=50,HLS_SYN_LUT=177,HLS_VERSION=2020_1}" *)

module fancy (
        ap_clk,
        ap_rst,
        startinp,
        abc_V,
        f_V,
        f_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   startinp;
input  [11:0] abc_V;
output  [3:0] f_V;
output   f_V_ap_vld;

reg f_V_ap_vld;

wire   [3:0] grp_fu_88_p2;
reg   [3:0] counter_V_reg_99;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [0:0] startinp_read_read_fu_52_p2;
wire    ap_CS_fsm_state1;
wire   [3:0] temp1b_V_5_fu_110_p1;
reg   [3:0] temp1b_V_5_reg_238;
wire   [3:0] temp1b_V_6_fu_114_p4;
reg   [3:0] temp1b_V_6_reg_245;
wire   [3:0] temp3_V_fu_124_p4;
reg   [3:0] temp3_V_reg_251;
wire   [0:0] xor_ln51_fu_140_p2;
reg   [0:0] xor_ln51_reg_256;
wire   [3:0] temp3_V_1_fu_152_p3;
reg   [3:0] temp3_V_1_reg_261;
wire   [0:0] xor_ln64_fu_160_p2;
reg   [0:0] xor_ln64_reg_266;
wire   [3:0] temp1b_V_fu_166_p3;
reg   [3:0] temp1b_V_reg_271;
wire   [0:0] icmp_ln35_fu_190_p2;
reg   [0:0] icmp_ln35_reg_279;
wire   [0:0] icmp_ln21_fu_174_p2;
wire   [3:0] temp3_V_3_fu_201_p3;
reg   [3:0] temp3_V_3_reg_284;
wire   [3:0] temp4_V_2_fu_207_p3;
reg   [3:0] temp4_V_2_reg_289;
wire   [3:0] temp6a_V_4_fu_214_p3;
reg   [3:0] temp6a_V_4_reg_294;
reg   [3:0] temp6a_V_reg_65;
reg   [3:0] p_0213_0_reg_77;
reg   [3:0] grp_fu_88_p0;
wire   [3:0] select_ln35_fu_225_p3;
reg   [3:0] grp_fu_88_p1;
wire   [0:0] icmp_ln895_fu_134_p2;
wire   [0:0] xor_ln51_fu_140_p1;
wire   [0:0] icmp_ln895_1_fu_146_p2;
wire   [0:0] icmp_ln899_fu_179_p2;
wire   [0:0] xor_ln35_fu_196_p1;
wire   [0:0] xor_ln35_fu_196_p2;
wire   [0:0] temp4_V_2_fu_207_p0;
wire   [3:0] temp1b_V_7_fu_184_p3;
wire   [3:0] temp3_V_2_fu_220_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_0213_0_reg_77 <= counter_V_reg_99;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0213_0_reg_77 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp6a_V_reg_65 <= grp_fu_88_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp6a_V_reg_65 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        counter_V_reg_99 <= grp_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln35_reg_279 <= icmp_ln35_fu_190_p2;
        temp3_V_3_reg_284 <= temp3_V_3_fu_201_p3;
        temp4_V_2_reg_289 <= temp4_V_2_fu_207_p3;
        temp6a_V_4_reg_294 <= temp6a_V_4_fu_214_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        temp1b_V_5_reg_238 <= temp1b_V_5_fu_110_p1;
        temp1b_V_6_reg_245 <= {{abc_V[7:4]}};
        temp1b_V_reg_271 <= temp1b_V_fu_166_p3;
        temp3_V_1_reg_261 <= temp3_V_1_fu_152_p3;
        temp3_V_reg_251 <= {{abc_V[11:8]}};
        xor_ln51_reg_256 <= xor_ln51_fu_140_p2;
        xor_ln64_reg_266 <= xor_ln64_fu_160_p2;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        f_V_ap_vld = 1'b1;
    end else begin
        f_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_88_p0 = select_ln35_fu_225_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_88_p0 = p_0213_0_reg_77;
    end else begin
        grp_fu_88_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_88_p1 = temp4_V_2_reg_289;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_88_p1 = 4'd1;
    end else begin
        grp_fu_88_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln21_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign f_V = temp6a_V_reg_65;

assign grp_fu_88_p2 = (grp_fu_88_p0 + grp_fu_88_p1);

assign icmp_ln21_fu_174_p2 = ((p_0213_0_reg_77 == temp1b_V_6_reg_245) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_190_p2 = ((temp6a_V_reg_65 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_146_p2 = ((temp1b_V_6_fu_114_p4 > temp3_V_fu_124_p4) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_134_p2 = ((temp1b_V_5_fu_110_p1 > temp1b_V_6_fu_114_p4) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_179_p2 = ((temp1b_V_5_reg_238 > p_0213_0_reg_77) ? 1'b1 : 1'b0);

assign select_ln35_fu_225_p3 = ((icmp_ln35_reg_279[0:0] === 1'b1) ? temp3_V_2_fu_220_p3 : temp6a_V_4_reg_294);

assign startinp_read_read_fu_52_p2 = startinp;

assign temp1b_V_5_fu_110_p1 = abc_V[3:0];

assign temp1b_V_6_fu_114_p4 = {{abc_V[7:4]}};

assign temp1b_V_7_fu_184_p3 = ((icmp_ln899_fu_179_p2[0:0] === 1'b1) ? temp1b_V_5_reg_238 : temp1b_V_6_reg_245);

assign temp1b_V_fu_166_p3 = ((icmp_ln895_fu_134_p2[0:0] === 1'b1) ? temp1b_V_5_fu_110_p1 : temp1b_V_6_fu_114_p4);

assign temp3_V_1_fu_152_p3 = ((icmp_ln895_1_fu_146_p2[0:0] === 1'b1) ? temp3_V_fu_124_p4 : temp1b_V_6_fu_114_p4);

assign temp3_V_2_fu_220_p3 = ((xor_ln51_reg_256[0:0] === 1'b1) ? temp3_V_1_reg_261 : temp3_V_3_reg_284);

assign temp3_V_3_fu_201_p3 = ((xor_ln35_fu_196_p2[0:0] === 1'b1) ? temp3_V_reg_251 : temp1b_V_reg_271);

assign temp3_V_fu_124_p4 = {{abc_V[11:8]}};

assign temp4_V_2_fu_207_p0 = startinp;

assign temp4_V_2_fu_207_p3 = ((temp4_V_2_fu_207_p0[0:0] === 1'b1) ? temp3_V_3_fu_201_p3 : temp1b_V_7_fu_184_p3);

assign temp6a_V_4_fu_214_p3 = ((xor_ln64_reg_266[0:0] === 1'b1) ? temp6a_V_reg_65 : temp1b_V_5_reg_238);

assign xor_ln35_fu_196_p1 = startinp;

assign xor_ln35_fu_196_p2 = (xor_ln35_fu_196_p1 ^ icmp_ln35_fu_190_p2);

assign xor_ln51_fu_140_p1 = startinp;

assign xor_ln51_fu_140_p2 = (xor_ln51_fu_140_p1 ^ icmp_ln895_fu_134_p2);

assign xor_ln64_fu_160_p2 = (icmp_ln895_fu_134_p2 ^ icmp_ln895_1_fu_146_p2);

endmodule //fancy
