// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fancy,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.724000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=41,HLS_SYN_LUT=199,HLS_VERSION=2020_1}" *)

module fancy (
        ap_clk,
        ap_rst,
        startinp,
        abc_V,
        f_V,
        f_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   startinp;
input  [11:0] abc_V;
output  [3:0] f_V;
output   f_V_ap_vld;

reg f_V_ap_vld;

reg   [3:0] temp6a_V_reg_73;
reg   [3:0] p_0213_0_reg_86;
wire   [0:0] startinp_read_read_fu_60_p2;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] temp1b_V_5_fu_97_p1;
reg   [3:0] temp1b_V_5_reg_239;
wire   [3:0] temp1b_V_6_fu_101_p4;
reg   [3:0] temp1b_V_6_reg_246;
wire   [3:0] temp3_V_fu_111_p4;
reg   [3:0] temp3_V_reg_252;
wire   [0:0] xor_ln51_fu_127_p2;
reg   [0:0] xor_ln51_reg_257;
wire   [3:0] temp3_V_1_fu_139_p3;
reg   [3:0] temp3_V_1_reg_262;
wire   [0:0] xor_ln64_fu_147_p2;
reg   [0:0] xor_ln64_reg_267;
wire   [3:0] temp1b_V_fu_153_p3;
reg   [3:0] temp1b_V_reg_272;
wire   [0:0] icmp_ln21_fu_161_p2;
reg   [0:0] icmp_ln21_reg_277;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] counter_V_fu_166_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] temp1a_V_fu_227_p2;
reg   [3:0] temp1a_V_reg_286;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [3:0] ap_phi_mux_temp6a_V_phi_fu_78_p4;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln895_fu_121_p2;
wire   [0:0] xor_ln51_fu_127_p1;
wire   [0:0] icmp_ln895_1_fu_133_p2;
wire   [0:0] icmp_ln899_fu_172_p2;
wire   [0:0] icmp_ln35_fu_183_p2;
wire   [0:0] xor_ln35_fu_189_p1;
wire   [0:0] xor_ln35_fu_189_p2;
wire   [0:0] temp4_V_2_fu_200_p0;
wire   [3:0] temp3_V_3_fu_194_p3;
wire   [3:0] temp1b_V_7_fu_177_p3;
wire   [3:0] temp3_V_2_fu_207_p3;
wire   [3:0] temp6a_V_4_fu_213_p3;
wire   [3:0] select_ln35_fu_219_p3;
wire   [3:0] temp4_V_2_fu_200_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0213_0_reg_86 <= counter_V_fu_166_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0213_0_reg_86 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_reg_277 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp6a_V_reg_73 <= temp1a_V_reg_286;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp6a_V_reg_73 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln21_reg_277 <= icmp_ln21_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp1a_V_reg_286 <= temp1a_V_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        temp1b_V_5_reg_239 <= temp1b_V_5_fu_97_p1;
        temp1b_V_6_reg_246 <= {{abc_V[7:4]}};
        temp1b_V_reg_272 <= temp1b_V_fu_153_p3;
        temp3_V_1_reg_262 <= temp3_V_1_fu_139_p3;
        temp3_V_reg_252 <= {{abc_V[11:8]}};
        xor_ln51_reg_257 <= xor_ln51_fu_127_p2;
        xor_ln64_reg_267 <= xor_ln64_fu_147_p2;
    end
end

always @ (*) begin
    if ((icmp_ln21_fu_161_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln21_reg_277 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_temp6a_V_phi_fu_78_p4 = temp1a_V_reg_286;
    end else begin
        ap_phi_mux_temp6a_V_phi_fu_78_p4 = temp6a_V_reg_73;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_V_ap_vld = 1'b1;
    end else begin
        f_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln21_fu_161_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln21_fu_161_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign counter_V_fu_166_p2 = (p_0213_0_reg_86 + 4'd1);

assign f_V = temp6a_V_reg_73;

assign icmp_ln21_fu_161_p2 = ((p_0213_0_reg_86 == temp1b_V_6_reg_246) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_183_p2 = ((ap_phi_mux_temp6a_V_phi_fu_78_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_133_p2 = ((temp1b_V_6_fu_101_p4 > temp3_V_fu_111_p4) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_121_p2 = ((temp1b_V_5_fu_97_p1 > temp1b_V_6_fu_101_p4) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_172_p2 = ((temp1b_V_5_reg_239 > p_0213_0_reg_86) ? 1'b1 : 1'b0);

assign select_ln35_fu_219_p3 = ((icmp_ln35_fu_183_p2[0:0] === 1'b1) ? temp3_V_2_fu_207_p3 : temp6a_V_4_fu_213_p3);

assign startinp_read_read_fu_60_p2 = startinp;

assign temp1a_V_fu_227_p2 = (select_ln35_fu_219_p3 + temp4_V_2_fu_200_p3);

assign temp1b_V_5_fu_97_p1 = abc_V[3:0];

assign temp1b_V_6_fu_101_p4 = {{abc_V[7:4]}};

assign temp1b_V_7_fu_177_p3 = ((icmp_ln899_fu_172_p2[0:0] === 1'b1) ? temp1b_V_5_reg_239 : temp1b_V_6_reg_246);

assign temp1b_V_fu_153_p3 = ((icmp_ln895_fu_121_p2[0:0] === 1'b1) ? temp1b_V_5_fu_97_p1 : temp1b_V_6_fu_101_p4);

assign temp3_V_1_fu_139_p3 = ((icmp_ln895_1_fu_133_p2[0:0] === 1'b1) ? temp3_V_fu_111_p4 : temp1b_V_6_fu_101_p4);

assign temp3_V_2_fu_207_p3 = ((xor_ln51_reg_257[0:0] === 1'b1) ? temp3_V_1_reg_262 : temp3_V_3_fu_194_p3);

assign temp3_V_3_fu_194_p3 = ((xor_ln35_fu_189_p2[0:0] === 1'b1) ? temp3_V_reg_252 : temp1b_V_reg_272);

assign temp3_V_fu_111_p4 = {{abc_V[11:8]}};

assign temp4_V_2_fu_200_p0 = startinp;

assign temp4_V_2_fu_200_p3 = ((temp4_V_2_fu_200_p0[0:0] === 1'b1) ? temp3_V_3_fu_194_p3 : temp1b_V_7_fu_177_p3);

assign temp6a_V_4_fu_213_p3 = ((xor_ln64_reg_267[0:0] === 1'b1) ? ap_phi_mux_temp6a_V_phi_fu_78_p4 : temp1b_V_5_reg_239);

assign xor_ln35_fu_189_p1 = startinp;

assign xor_ln35_fu_189_p2 = (xor_ln35_fu_189_p1 ^ icmp_ln35_fu_183_p2);

assign xor_ln51_fu_127_p1 = startinp;

assign xor_ln51_fu_127_p2 = (xor_ln51_fu_127_p1 ^ icmp_ln895_fu_121_p2);

assign xor_ln64_fu_147_p2 = (icmp_ln895_fu_121_p2 ^ icmp_ln895_1_fu_133_p2);

endmodule //fancy
