// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fancy,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.448000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=37,HLS_SYN_LUT=245,HLS_VERSION=2020_1}" *)

module fancy (
        ap_clk,
        ap_rst,
        startinp,
        abc_V,
        f_V,
        f_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   startinp;
input  [11:0] abc_V;
output  [3:0] f_V;
output   f_V_ap_vld;

reg f_V_ap_vld;

wire   [0:0] startinp_read_read_fu_58_p2;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] temp1b_V_4_fu_105_p1;
reg   [3:0] temp1b_V_4_reg_321;
wire   [3:0] temp1b_V_5_fu_109_p4;
reg   [3:0] temp1b_V_5_reg_331;
wire   [3:0] temp3_V_fu_119_p4;
reg   [3:0] temp3_V_reg_339;
wire   [0:0] xor_ln51_fu_135_p2;
reg   [0:0] xor_ln51_reg_345;
wire   [3:0] temp3_V_1_fu_147_p3;
reg   [3:0] temp3_V_1_reg_351;
wire   [0:0] xor_ln64_fu_155_p2;
reg   [0:0] xor_ln64_reg_357;
wire   [3:0] temp1b_V_fu_161_p3;
reg   [3:0] temp1b_V_reg_363;
wire   [3:0] add_ln321_fu_229_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln21_fu_169_p2;
wire   [3:0] add_ln321_1_fu_301_p2;
wire   [0:0] icmp_ln21_1_fu_241_p2;
wire   [3:0] add_ln214_fu_307_p2;
reg   [3:0] temp6a_V_0_reg_71;
reg   [3:0] p_0213_0_0_reg_83;
reg   [3:0] temp6a_V_lcssa_reg_94;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln895_fu_129_p2;
wire   [0:0] xor_ln51_fu_135_p1;
wire   [0:0] icmp_ln895_1_fu_141_p2;
wire   [0:0] icmp_ln899_fu_174_p2;
wire   [0:0] icmp_ln35_fu_185_p2;
wire   [0:0] xor_ln35_fu_191_p1;
wire   [0:0] xor_ln35_fu_191_p2;
wire   [0:0] select_ln45_fu_202_p0;
wire   [3:0] select_ln35_fu_196_p3;
wire   [3:0] select_ln25_fu_179_p3;
wire   [3:0] select_ln51_fu_209_p3;
wire   [3:0] select_ln64_fu_215_p3;
wire   [3:0] select_ln35_2_fu_221_p3;
wire   [3:0] select_ln45_fu_202_p3;
wire   [3:0] or_ln214_fu_235_p2;
wire   [0:0] icmp_ln899_1_fu_246_p2;
wire   [0:0] icmp_ln35_1_fu_257_p2;
wire   [0:0] xor_ln35_1_fu_263_p1;
wire   [0:0] xor_ln35_1_fu_263_p2;
wire   [0:0] select_ln45_1_fu_274_p0;
wire   [3:0] select_ln35_1_fu_268_p3;
wire   [3:0] select_ln25_1_fu_251_p3;
wire   [3:0] select_ln51_1_fu_281_p3;
wire   [3:0] select_ln64_1_fu_287_p3;
wire   [3:0] select_ln35_3_fu_293_p3;
wire   [3:0] select_ln45_1_fu_274_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_1_fu_241_p2 == 1'd0) & (icmp_ln21_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0213_0_0_reg_83 <= add_ln214_fu_307_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0213_0_0_reg_83 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_1_fu_241_p2 == 1'd0) & (icmp_ln21_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        temp6a_V_0_reg_71 <= add_ln321_1_fu_301_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp6a_V_0_reg_71 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((icmp_ln21_1_fu_241_p2 == 1'd1) & (icmp_ln21_fu_169_p2 == 1'd0))) begin
            temp6a_V_lcssa_reg_94 <= add_ln321_fu_229_p2;
        end else if ((icmp_ln21_fu_169_p2 == 1'd1)) begin
            temp6a_V_lcssa_reg_94 <= temp6a_V_0_reg_71;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        temp1b_V_4_reg_321 <= temp1b_V_4_fu_105_p1;
        temp1b_V_5_reg_331 <= {{abc_V[7:4]}};
        temp1b_V_reg_363 <= temp1b_V_fu_161_p3;
        temp3_V_1_reg_351 <= temp3_V_1_fu_147_p3;
        temp3_V_reg_339 <= {{abc_V[11:8]}};
        xor_ln51_reg_345 <= xor_ln51_fu_135_p2;
        xor_ln64_reg_357 <= xor_ln64_fu_155_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        f_V_ap_vld = 1'b1;
    end else begin
        f_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln21_1_fu_241_p2 == 1'd0) & (icmp_ln21_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_fu_307_p2 = (p_0213_0_0_reg_83 + 4'd2);

assign add_ln321_1_fu_301_p2 = (select_ln35_3_fu_293_p3 + select_ln45_1_fu_274_p3);

assign add_ln321_fu_229_p2 = (select_ln35_2_fu_221_p3 + select_ln45_fu_202_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign f_V = temp6a_V_lcssa_reg_94;

assign icmp_ln21_1_fu_241_p2 = ((or_ln214_fu_235_p2 == temp1b_V_5_reg_331) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_169_p2 = ((p_0213_0_0_reg_83 == temp1b_V_5_reg_331) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_257_p2 = ((add_ln321_fu_229_p2 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_185_p2 = ((temp6a_V_0_reg_71 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_141_p2 = ((temp1b_V_5_fu_109_p4 > temp3_V_fu_119_p4) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_129_p2 = ((temp1b_V_4_fu_105_p1 > temp1b_V_5_fu_109_p4) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_246_p2 = ((temp1b_V_4_reg_321 > or_ln214_fu_235_p2) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_174_p2 = ((temp1b_V_4_reg_321 > p_0213_0_0_reg_83) ? 1'b1 : 1'b0);

assign or_ln214_fu_235_p2 = (p_0213_0_0_reg_83 | 4'd1);

assign select_ln25_1_fu_251_p3 = ((icmp_ln899_1_fu_246_p2[0:0] === 1'b1) ? temp1b_V_4_reg_321 : temp1b_V_5_reg_331);

assign select_ln25_fu_179_p3 = ((icmp_ln899_fu_174_p2[0:0] === 1'b1) ? temp1b_V_4_reg_321 : temp1b_V_5_reg_331);

assign select_ln35_1_fu_268_p3 = ((xor_ln35_1_fu_263_p2[0:0] === 1'b1) ? temp3_V_reg_339 : temp1b_V_reg_363);

assign select_ln35_2_fu_221_p3 = ((icmp_ln35_fu_185_p2[0:0] === 1'b1) ? select_ln51_fu_209_p3 : select_ln64_fu_215_p3);

assign select_ln35_3_fu_293_p3 = ((icmp_ln35_1_fu_257_p2[0:0] === 1'b1) ? select_ln51_1_fu_281_p3 : select_ln64_1_fu_287_p3);

assign select_ln35_fu_196_p3 = ((xor_ln35_fu_191_p2[0:0] === 1'b1) ? temp3_V_reg_339 : temp1b_V_reg_363);

assign select_ln45_1_fu_274_p0 = startinp;

assign select_ln45_1_fu_274_p3 = ((select_ln45_1_fu_274_p0[0:0] === 1'b1) ? select_ln35_1_fu_268_p3 : select_ln25_1_fu_251_p3);

assign select_ln45_fu_202_p0 = startinp;

assign select_ln45_fu_202_p3 = ((select_ln45_fu_202_p0[0:0] === 1'b1) ? select_ln35_fu_196_p3 : select_ln25_fu_179_p3);

assign select_ln51_1_fu_281_p3 = ((xor_ln51_reg_345[0:0] === 1'b1) ? temp3_V_1_reg_351 : select_ln35_1_fu_268_p3);

assign select_ln51_fu_209_p3 = ((xor_ln51_reg_345[0:0] === 1'b1) ? temp3_V_1_reg_351 : select_ln35_fu_196_p3);

assign select_ln64_1_fu_287_p3 = ((xor_ln64_reg_357[0:0] === 1'b1) ? add_ln321_fu_229_p2 : temp1b_V_4_reg_321);

assign select_ln64_fu_215_p3 = ((xor_ln64_reg_357[0:0] === 1'b1) ? temp6a_V_0_reg_71 : temp1b_V_4_reg_321);

assign startinp_read_read_fu_58_p2 = startinp;

assign temp1b_V_4_fu_105_p1 = abc_V[3:0];

assign temp1b_V_5_fu_109_p4 = {{abc_V[7:4]}};

assign temp1b_V_fu_161_p3 = ((icmp_ln895_fu_129_p2[0:0] === 1'b1) ? temp1b_V_4_fu_105_p1 : temp1b_V_5_fu_109_p4);

assign temp3_V_1_fu_147_p3 = ((icmp_ln895_1_fu_141_p2[0:0] === 1'b1) ? temp3_V_fu_119_p4 : temp1b_V_5_fu_109_p4);

assign temp3_V_fu_119_p4 = {{abc_V[11:8]}};

assign xor_ln35_1_fu_263_p1 = startinp;

assign xor_ln35_1_fu_263_p2 = (xor_ln35_1_fu_263_p1 ^ icmp_ln35_1_fu_257_p2);

assign xor_ln35_fu_191_p1 = startinp;

assign xor_ln35_fu_191_p2 = (xor_ln35_fu_191_p1 ^ icmp_ln35_fu_185_p2);

assign xor_ln51_fu_135_p1 = startinp;

assign xor_ln51_fu_135_p2 = (xor_ln51_fu_135_p1 ^ icmp_ln895_fu_129_p2);

assign xor_ln64_fu_155_p2 = (icmp_ln895_fu_129_p2 ^ icmp_ln895_1_fu_141_p2);

endmodule //fancy
