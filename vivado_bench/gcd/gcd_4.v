// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gcd2,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.125000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=31,HLS_SYN_LUT=190,HLS_VERSION=2020_1}" *)

module gcd2 (
        ap_clk,
        ap_rst,
        x_var_V,
        y_var_V,
        gcd_output_V,
        gcd_output_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input  [3:0] x_var_V;
input  [3:0] y_var_V;
output  [3:0] gcd_output_V;
output   gcd_output_V_ap_vld;

reg gcd_output_V_ap_vld;

wire   [3:0] grp_fu_80_p2;
reg   [3:0] reg_69;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln883_fu_107_p2;
wire    ap_CS_fsm_state1;
wire   [3:0] select_ln12_fu_119_p3;
reg   [3:0] select_ln12_reg_171;
wire    ap_CS_fsm_state3;
wire   [3:0] select_ln12_1_fu_127_p3;
reg   [3:0] select_ln12_1_reg_180;
wire   [0:0] icmp_ln887_1_fu_141_p2;
reg   [0:0] icmp_ln887_1_reg_191;
wire    ap_CS_fsm_state4;
wire   [3:0] select_ln12_3_fu_145_p3;
reg   [3:0] select_ln12_3_reg_196;
wire   [3:0] select_ln12_2_fu_152_p3;
wire    ap_CS_fsm_state5;
reg   [3:0] x_var_V_buf_0_0_reg_49;
reg   [3:0] y_var_V_buf_0_0_reg_59;
wire   [0:0] icmp_ln883_1_fu_135_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] grp_fu_80_p0;
reg   [3:0] grp_fu_80_p1;
wire   [0:0] icmp_ln887_fu_113_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_1_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        reg_69 <= select_ln12_fu_119_p3;
    end else if (((icmp_ln883_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        reg_69 <= x_var_V_buf_0_0_reg_49;
    end else if (((icmp_ln883_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        reg_69 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_var_V_buf_0_0_reg_49 <= select_ln12_2_fu_152_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_var_V_buf_0_0_reg_49 <= x_var_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_var_V_buf_0_0_reg_59 <= select_ln12_3_reg_196;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        y_var_V_buf_0_0_reg_59 <= y_var_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln887_1_reg_191 <= icmp_ln887_1_fu_141_p2;
        select_ln12_3_reg_196 <= select_ln12_3_fu_145_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        select_ln12_1_reg_180 <= select_ln12_1_fu_127_p3;
        select_ln12_reg_171 <= select_ln12_fu_119_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gcd_output_V_ap_vld = 1'b1;
    end else begin
        gcd_output_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_80_p0 = select_ln12_reg_171;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_80_p0 = select_ln12_1_reg_180;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_80_p0 = x_var_V_buf_0_0_reg_49;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_80_p0 = y_var_V_buf_0_0_reg_59;
    end else begin
        grp_fu_80_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_80_p1 = select_ln12_1_reg_180;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_80_p1 = select_ln12_reg_171;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_80_p1 = y_var_V_buf_0_0_reg_59;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_80_p1 = x_var_V_buf_0_0_reg_49;
    end else begin
        grp_fu_80_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln883_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln883_1_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign gcd_output_V = reg_69;

assign grp_fu_80_p2 = (grp_fu_80_p0 - grp_fu_80_p1);

assign icmp_ln883_1_fu_135_p2 = ((select_ln12_fu_119_p3 == select_ln12_1_fu_127_p3) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_107_p2 = ((x_var_V_buf_0_0_reg_49 == y_var_V_buf_0_0_reg_59) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_141_p2 = ((select_ln12_reg_171 < select_ln12_1_reg_180) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_113_p2 = ((x_var_V_buf_0_0_reg_49 < y_var_V_buf_0_0_reg_59) ? 1'b1 : 1'b0);

assign select_ln12_1_fu_127_p3 = ((icmp_ln887_fu_113_p2[0:0] === 1'b1) ? reg_69 : y_var_V_buf_0_0_reg_59);

assign select_ln12_2_fu_152_p3 = ((icmp_ln887_1_reg_191[0:0] === 1'b1) ? select_ln12_reg_171 : grp_fu_80_p2);

assign select_ln12_3_fu_145_p3 = ((icmp_ln887_1_fu_141_p2[0:0] === 1'b1) ? grp_fu_80_p2 : select_ln12_1_reg_180);

assign select_ln12_fu_119_p3 = ((icmp_ln887_fu_113_p2[0:0] === 1'b1) ? x_var_V_buf_0_0_reg_49 : grp_fu_80_p2);

endmodule //gcd2
