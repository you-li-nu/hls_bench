// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gcd2,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.064000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=36,HLS_SYN_LUT=203,HLS_VERSION=2020_1}" *)

module gcd2 (
        ap_clk,
        ap_rst,
        x_var_V,
        y_var_V,
        gcd_output_V,
        gcd_output_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [3:0] x_var_V;
input  [3:0] y_var_V;
output  [3:0] gcd_output_V;
output   gcd_output_V_ap_vld;

reg gcd_output_V_ap_vld;

reg   [3:0] x_var_V_buf_0_0_reg_57;
reg   [3:0] y_var_V_buf_0_0_reg_67;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln883_fu_87_p2;
reg   [0:0] icmp_ln883_reg_169;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln13_fu_111_p3;
reg   [3:0] select_ln13_reg_173;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] select_ln13_1_fu_119_p3;
reg   [3:0] select_ln13_1_reg_182;
wire   [0:0] icmp_ln883_1_fu_127_p2;
reg   [0:0] icmp_ln883_1_reg_190;
wire   [3:0] select_ln13_2_fu_145_p3;
reg   [3:0] select_ln13_2_reg_194;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] select_ln13_3_fu_152_p3;
reg   [3:0] select_ln13_3_reg_199;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran4to5_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [3:0] ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_y_var_V_buf_0_0_phi_fu_70_p4;
reg   [3:0] x_var_V_buf_0_lcssa_reg_76;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln887_fu_93_p2;
wire   [3:0] sub_ln701_1_fu_105_p2;
wire   [3:0] sub_ln701_fu_99_p2;
wire    ap_block_pp0_stage1;
wire   [0:0] icmp_ln887_1_fu_133_p2;
wire   [3:0] sub_ln701_3_fu_141_p2;
wire   [3:0] sub_ln701_2_fu_137_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_187;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_tran4to5_state3 == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_1_reg_190 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_reg_169 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_var_V_buf_0_0_reg_57 <= select_ln13_2_reg_194;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_var_V_buf_0_0_reg_57 <= x_var_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_187)) begin
            x_var_V_buf_0_lcssa_reg_76 <= select_ln13_reg_173;
        end else if (((icmp_ln883_fu_87_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_var_V_buf_0_lcssa_reg_76 <= ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_1_reg_190 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_reg_169 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_var_V_buf_0_0_reg_67 <= select_ln13_3_reg_199;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        y_var_V_buf_0_0_reg_67 <= y_var_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln883_1_reg_190 <= icmp_ln883_1_fu_127_p2;
        select_ln13_1_reg_182 <= select_ln13_1_fu_119_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln883_reg_169 <= icmp_ln883_fu_87_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln883_1_reg_190 == 1'd0) & (icmp_ln883_reg_169 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln13_2_reg_194 <= select_ln13_2_fu_145_p3;
        select_ln13_3_reg_199 <= select_ln13_3_fu_152_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_fu_87_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln13_reg_173 <= select_ln13_fu_111_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln883_1_reg_190 == 1'd0) & (icmp_ln883_reg_169 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4 = select_ln13_2_reg_194;
    end else begin
        ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4 = x_var_V_buf_0_0_reg_57;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln883_1_reg_190 == 1'd0) & (icmp_ln883_reg_169 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_y_var_V_buf_0_0_phi_fu_70_p4 = select_ln13_3_reg_199;
    end else begin
        ap_phi_mux_y_var_V_buf_0_0_phi_fu_70_p4 = y_var_V_buf_0_0_reg_67;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gcd_output_V_ap_vld = 1'b1;
    end else begin
        gcd_output_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_187 = ((icmp_ln883_1_reg_190 == 1'd1) & (icmp_ln883_reg_169 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran4to5_state3 = ((icmp_ln883_1_reg_190 == 1'd1) | (icmp_ln883_reg_169 == 1'd1));
end

assign gcd_output_V = x_var_V_buf_0_lcssa_reg_76;

assign icmp_ln883_1_fu_127_p2 = ((select_ln13_fu_111_p3 == select_ln13_1_fu_119_p3) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_87_p2 = ((ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4 == ap_phi_mux_y_var_V_buf_0_0_phi_fu_70_p4) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_133_p2 = ((select_ln13_reg_173 < select_ln13_1_reg_182) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_93_p2 = ((ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4 < ap_phi_mux_y_var_V_buf_0_0_phi_fu_70_p4) ? 1'b1 : 1'b0);

assign select_ln13_1_fu_119_p3 = ((icmp_ln887_fu_93_p2[0:0] === 1'b1) ? sub_ln701_fu_99_p2 : ap_phi_mux_y_var_V_buf_0_0_phi_fu_70_p4);

assign select_ln13_2_fu_145_p3 = ((icmp_ln887_1_fu_133_p2[0:0] === 1'b1) ? select_ln13_reg_173 : sub_ln701_3_fu_141_p2);

assign select_ln13_3_fu_152_p3 = ((icmp_ln887_1_fu_133_p2[0:0] === 1'b1) ? sub_ln701_2_fu_137_p2 : select_ln13_1_reg_182);

assign select_ln13_fu_111_p3 = ((icmp_ln887_fu_93_p2[0:0] === 1'b1) ? ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4 : sub_ln701_1_fu_105_p2);

assign sub_ln701_1_fu_105_p2 = (ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4 - ap_phi_mux_y_var_V_buf_0_0_phi_fu_70_p4);

assign sub_ln701_2_fu_137_p2 = (select_ln13_1_reg_182 - select_ln13_reg_173);

assign sub_ln701_3_fu_141_p2 = (select_ln13_reg_173 - select_ln13_1_reg_182);

assign sub_ln701_fu_99_p2 = (ap_phi_mux_y_var_V_buf_0_0_phi_fu_70_p4 - ap_phi_mux_x_var_V_buf_0_0_phi_fu_60_p4);

endmodule //gcd2
