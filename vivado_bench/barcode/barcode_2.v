// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="barcode,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.381000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=32,HLS_SYN_LUT=305,HLS_VERSION=2020_1}" *)

module barcode (
        ap_clk,
        ap_rst,
        seed_V,
        num_V,
        vld,
        eoc,
        memw,
        data_V,
        addr_V
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [5:0] seed_V;
input  [2:0] num_V;
output   vld;
output   eoc;
output   memw;
output  [3:0] data_V;
output  [2:0] addr_V;

reg vld;
reg memw;
reg[3:0] data_V;
reg[2:0] addr_V;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln883_fu_211_p2;
reg   [0:0] icmp_ln883_reg_335;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_fu_226_p2;
reg   [0:0] icmp_ln887_reg_339;
wire   [5:0] add_ln214_fu_244_p2;
reg   [5:0] add_ln214_reg_344;
wire   [2:0] add_ln700_fu_256_p2;
wire   [0:0] xor_ln53_fu_250_p2;
wire   [0:0] icmp_ln887_1_fu_283_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln883_1_fu_269_p2;
wire   [5:0] add_ln214_1_fu_299_p2;
reg   [5:0] seed_V_read_assign_reg_118;
reg   [2:0] p_024_0_0_reg_127;
reg   [2:0] ap_phi_mux_p_024_0_0_be_phi_fu_191_p4;
reg   [3:0] p_027_0_0_reg_140;
reg   [3:0] ap_phi_mux_p_027_0_0_be_phi_fu_203_p4;
reg   [0:0] flag_0_0_reg_153;
reg   [2:0] p_024_1_0_reg_164;
reg   [3:0] p_027_1_0_reg_175;
wire   [0:0] xor_ln53_1_fu_305_p2;
wire   [2:0] add_ln700_2_fu_317_p2;
wire   [3:0] phitmp_fu_310_p2;
wire   [3:0] add_ln700_1_fu_262_p2;
wire   [4:0] tmp_fu_216_p4;
wire   [5:0] shl_ln214_fu_232_p2;
wire   [5:0] sub_ln214_fu_238_p2;
wire   [4:0] tmp_1_fu_274_p4;
wire   [5:0] shl_ln214_1_fu_289_p2;
wire   [5:0] sub_ln214_1_fu_294_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_condition_60;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        flag_0_0_reg_153 <= icmp_ln887_1_fu_283_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        flag_0_0_reg_153 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_024_0_0_reg_127 <= ap_phi_mux_p_024_0_0_be_phi_fu_191_p4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_024_0_0_reg_127 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((xor_ln53_fu_250_p2 == 1'd0)) begin
            p_024_1_0_reg_164 <= p_024_0_0_reg_127;
        end else if ((xor_ln53_fu_250_p2 == 1'd1)) begin
            p_024_1_0_reg_164 <= add_ln700_fu_256_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_027_0_0_reg_140 <= ap_phi_mux_p_027_0_0_be_phi_fu_203_p4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_027_0_0_reg_140 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((xor_ln53_fu_250_p2 == 1'd0)) begin
            p_027_1_0_reg_175 <= p_027_0_0_reg_140;
        end else if ((xor_ln53_fu_250_p2 == 1'd1)) begin
            p_027_1_0_reg_175 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        seed_V_read_assign_reg_118 <= add_ln214_1_fu_299_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        seed_V_read_assign_reg_118 <= seed_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln214_reg_344 <= add_ln214_fu_244_p2;
        icmp_ln887_reg_339 <= icmp_ln887_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln883_reg_335 <= icmp_ln883_fu_211_p2;
    end
end

always @ (*) begin
    if (((xor_ln53_1_fu_305_p2 == 1'd1) & (icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        addr_V = p_024_1_0_reg_164;
    end else if (((xor_ln53_fu_250_p2 == 1'd1) & (icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        addr_V = p_024_0_0_reg_127;
    end else begin
        addr_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_60)) begin
        if ((xor_ln53_1_fu_305_p2 == 1'd1)) begin
            ap_phi_mux_p_024_0_0_be_phi_fu_191_p4 = add_ln700_2_fu_317_p2;
        end else if ((xor_ln53_1_fu_305_p2 == 1'd0)) begin
            ap_phi_mux_p_024_0_0_be_phi_fu_191_p4 = p_024_1_0_reg_164;
        end else begin
            ap_phi_mux_p_024_0_0_be_phi_fu_191_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_024_0_0_be_phi_fu_191_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_60)) begin
        if ((xor_ln53_1_fu_305_p2 == 1'd1)) begin
            ap_phi_mux_p_027_0_0_be_phi_fu_203_p4 = 4'd1;
        end else if ((xor_ln53_1_fu_305_p2 == 1'd0)) begin
            ap_phi_mux_p_027_0_0_be_phi_fu_203_p4 = phitmp_fu_310_p2;
        end else begin
            ap_phi_mux_p_027_0_0_be_phi_fu_203_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_027_0_0_be_phi_fu_203_p4 = 'bx;
    end
end

always @ (*) begin
    if (((xor_ln53_1_fu_305_p2 == 1'd1) & (icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V = add_ln700_1_fu_262_p2;
    end else if (((xor_ln53_fu_250_p2 == 1'd1) & (icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_V = p_027_0_0_reg_140;
    end else begin
        data_V = 'bx;
    end
end

always @ (*) begin
    if ((((xor_ln53_1_fu_305_p2 == 1'd1) & (icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((xor_ln53_fu_250_p2 == 1'd1) & (icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        memw = 1'd1;
    end else if ((((xor_ln53_1_fu_305_p2 == 1'd0) & (icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((xor_ln53_fu_250_p2 == 1'd0) & (icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        memw = 1'd0;
    end else begin
        memw = 'bx;
    end
end

always @ (*) begin
    if ((((xor_ln53_1_fu_305_p2 == 1'd1) & (icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((xor_ln53_fu_250_p2 == 1'd1) & (icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        vld = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((xor_ln53_1_fu_305_p2 == 1'd0) & (icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((xor_ln53_fu_250_p2 == 1'd0) & (icmp_ln883_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        vld = 1'd0;
    end else begin
        vld = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln883_1_fu_269_p2 == 1'd1) | (icmp_ln883_reg_335 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_1_fu_299_p2 = (6'd1 + sub_ln214_1_fu_294_p2);

assign add_ln214_fu_244_p2 = (6'd1 + sub_ln214_fu_238_p2);

assign add_ln700_1_fu_262_p2 = (p_027_1_0_reg_175 + 4'd1);

assign add_ln700_2_fu_317_p2 = (p_024_1_0_reg_164 + 3'd1);

assign add_ln700_fu_256_p2 = (p_024_0_0_reg_127 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_condition_60 = ((icmp_ln883_1_fu_269_p2 == 1'd0) & (icmp_ln883_reg_335 == 1'd0) & (1'b1 == ap_CS_fsm_state3));
end

assign eoc = 1'd0;

assign icmp_ln883_1_fu_269_p2 = ((p_024_1_0_reg_164 == num_V) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_211_p2 = ((p_024_0_0_reg_127 == num_V) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_283_p2 = ((tmp_1_fu_274_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_226_p2 = ((tmp_fu_216_p4 == 5'd0) ? 1'b1 : 1'b0);

assign phitmp_fu_310_p2 = (p_027_1_0_reg_175 + 4'd2);

assign shl_ln214_1_fu_289_p2 = add_ln214_reg_344 << 6'd3;

assign shl_ln214_fu_232_p2 = seed_V_read_assign_reg_118 << 6'd3;

assign sub_ln214_1_fu_294_p2 = (shl_ln214_1_fu_289_p2 - add_ln214_reg_344);

assign sub_ln214_fu_238_p2 = (shl_ln214_fu_232_p2 - seed_V_read_assign_reg_118);

assign tmp_1_fu_274_p4 = {{add_ln214_reg_344[5:1]}};

assign tmp_fu_216_p4 = {{seed_V_read_assign_reg_118[5:1]}};

assign xor_ln53_1_fu_305_p2 = (icmp_ln887_reg_339 ^ icmp_ln887_1_fu_283_p2);

assign xor_ln53_fu_250_p2 = (icmp_ln887_fu_226_p2 ^ flag_0_0_reg_153);

endmodule //barcode
