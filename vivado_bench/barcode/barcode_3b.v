// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="barcode,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.712000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=32,HLS_SYN_LUT=200,HLS_VERSION=2020_1}" *)

module barcode (
        ap_clk,
        ap_rst,
        seed_V,
        num_V,
        vld,
        eoc,
        memw,
        data_V,
        addr_V
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [5:0] seed_V;
input  [2:0] num_V;
output   vld;
output   eoc;
output   memw;
output  [3:0] data_V;
output  [2:0] addr_V;

reg vld;
reg memw;

wire   [5:0] grp_fu_169_p2;
reg   [5:0] add_ln214_reg_178;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln883_fu_205_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state1;
reg   [2:0] actnum_V_1_load_reg_267;
wire   [0:0] flag_fu_220_p2;
reg   [0:0] flag_reg_276;
reg   [5:0] seed_V_read_assign_reg_124;
reg   [3:0] p_027_0_reg_133;
reg   [0:0] flag_0_reg_146;
reg   [3:0] p_027_1_reg_157;
wire    ap_CS_fsm_state3;
wire   [0:0] xor_ln53_fu_239_p2;
reg   [2:0] actnum_V_1_fu_68;
reg   [5:0] grp_fu_169_p0;
reg   [5:0] grp_fu_169_p1;
wire   [5:0] sub_ln214_fu_232_p2;
wire   [4:0] tmp_fu_210_p4;
wire   [5:0] shl_ln214_fu_226_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        actnum_V_1_fu_68 <= grp_fu_169_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        actnum_V_1_fu_68 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        flag_0_reg_146 <= flag_reg_276;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        flag_0_reg_146 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_027_0_reg_133 <= grp_fu_169_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_027_0_reg_133 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((xor_ln53_fu_239_p2 == 1'd0) & (icmp_ln883_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_027_1_reg_157 <= p_027_0_reg_133;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_027_1_reg_157 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        seed_V_read_assign_reg_124 <= add_ln214_reg_178;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        seed_V_read_assign_reg_124 <= seed_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        actnum_V_1_load_reg_267 <= actnum_V_1_fu_68;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln214_reg_178 <= grp_fu_169_p2;
        flag_reg_276 <= flag_fu_220_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_169_p0 = p_027_1_reg_157;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_169_p0 = actnum_V_1_load_reg_267;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_169_p0 = 6'd1;
    end else begin
        grp_fu_169_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_169_p1 = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_169_p1 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_169_p1 = sub_ln214_fu_232_p2;
    end else begin
        grp_fu_169_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        memw = 1'd1;
    end else if (((xor_ln53_fu_239_p2 == 1'd0) & (icmp_ln883_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        memw = 1'd0;
    end else begin
        memw = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vld = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((xor_ln53_fu_239_p2 == 1'd0) & (icmp_ln883_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        vld = 1'd0;
    end else begin
        vld = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln883_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((xor_ln53_fu_239_p2 == 1'd0) & (icmp_ln883_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr_V = actnum_V_1_load_reg_267;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign data_V = p_027_0_reg_133;

assign eoc = 1'd0;

assign flag_fu_220_p2 = ((tmp_fu_210_p4 == 5'd0) ? 1'b1 : 1'b0);

assign grp_fu_169_p2 = (grp_fu_169_p0 + grp_fu_169_p1);

assign icmp_ln883_fu_205_p2 = ((actnum_V_1_fu_68 == num_V) ? 1'b1 : 1'b0);

assign shl_ln214_fu_226_p2 = seed_V_read_assign_reg_124 << 6'd3;

assign sub_ln214_fu_232_p2 = (shl_ln214_fu_226_p2 - seed_V_read_assign_reg_124);

assign tmp_fu_210_p4 = {{seed_V_read_assign_reg_124[5:1]}};

assign xor_ln53_fu_239_p2 = (flag_fu_220_p2 ^ flag_0_reg_146);

endmodule //barcode
