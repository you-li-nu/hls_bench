// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="diffeq_easy,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.210000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=58,HLS_SYN_LUT=548,HLS_VERSION=2020_1}" *)

module diffeq_easy (
        ap_clk,
        ap_rst,
        vars_V,
        Xoutport_V,
        Xoutport_V_ap_vld,
        Youtport_V,
        Youtport_V_ap_vld,
        Uoutport_V,
        Uoutport_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [11:0] vars_V;
output  [3:0] Xoutport_V;
output   Xoutport_V_ap_vld;
output  [3:0] Youtport_V;
output   Youtport_V_ap_vld;
output  [3:0] Uoutport_V;
output   Uoutport_V_ap_vld;

reg Xoutport_V_ap_vld;
reg Youtport_V_ap_vld;
reg Uoutport_V_ap_vld;

reg   [3:0] p_0426_0_0_reg_88;
reg   [3:0] p_0423_0_0_reg_98;
reg  signed [3:0] t1_V_0_reg_108;
wire   [3:0] x_var_V_fu_148_p1;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln887_fu_172_p2;
reg   [0:0] icmp_ln887_reg_440;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire  signed [3:0] add_ln214_fu_220_p2;
reg  signed [3:0] add_ln214_reg_444;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln887_1_fu_232_p2;
reg   [0:0] icmp_ln887_1_reg_452;
wire  signed [3:0] sub_ln214_2_fu_244_p2;
reg  signed [3:0] sub_ln214_2_reg_456;
wire   [3:0] add_ln214_1_fu_250_p2;
reg   [3:0] add_ln214_1_reg_461;
wire   [3:0] add_ln209_fu_256_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire  signed [3:0] add_ln214_5_fu_288_p2;
wire   [3:0] add_ln209_1_fu_294_p2;
reg   [3:0] add_ln209_1_reg_478;
wire   [0:0] icmp_ln887_2_fu_300_p2;
reg   [0:0] icmp_ln887_2_reg_484;
wire  signed [3:0] add_ln214_6_fu_345_p2;
reg  signed [3:0] add_ln214_6_reg_488;
wire   [0:0] icmp_ln887_3_fu_357_p2;
reg   [0:0] icmp_ln887_3_reg_495;
wire   [3:0] mul_ln209_3_fu_375_p2;
reg   [3:0] mul_ln209_3_reg_499;
wire   [3:0] add_ln214_3_fu_381_p2;
reg   [3:0] add_ln214_3_reg_504;
wire   [3:0] add_ln209_2_fu_387_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [3:0] add_ln214_7_fu_413_p2;
wire   [3:0] add_ln209_3_fu_419_p2;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran4to5_state3;
wire    ap_block_pp0_stage0_subdone;
reg   [3:0] ap_phi_mux_p_0426_0_0_phi_fu_91_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_p_0423_0_0_phi_fu_101_p4;
reg  signed [3:0] ap_phi_mux_t1_V_0_phi_fu_111_p4;
reg   [3:0] t1_V_lcssa_reg_118;
reg   [3:0] p_0423_0_lcssa_reg_133;
wire    ap_CS_fsm_state5;
wire   [3:0] shl_ln214_fu_178_p2;
wire  signed [3:0] sub_ln214_fu_184_p2;
wire   [3:0] mul_ln209_fu_190_p2;
wire   [3:0] shl_ln214_1_fu_202_p2;
wire   [3:0] sub_ln214_12_fu_208_p2;
wire   [3:0] add_ln214_8_fu_214_p2;
wire   [3:0] sub_ln214_1_fu_196_p2;
wire   [3:0] add_ln214_4_fu_226_p2;
wire   [3:0] shl_ln214_2_fu_238_p2;
wire    ap_block_pp0_stage1;
wire   [3:0] mul_ln209_1_fu_261_p2;
wire   [3:0] shl_ln214_3_fu_270_p2;
wire   [3:0] sub_ln214_13_fu_276_p2;
wire   [3:0] add_ln214_9_fu_282_p2;
wire   [3:0] sub_ln214_3_fu_265_p2;
wire   [3:0] shl_ln214_4_fu_305_p2;
wire  signed [3:0] sub_ln214_4_fu_310_p2;
wire   [3:0] mul_ln209_2_fu_315_p2;
wire   [3:0] shl_ln214_5_fu_327_p2;
wire   [3:0] sub_ln214_14_fu_333_p2;
wire   [3:0] add_ln214_10_fu_339_p2;
wire   [3:0] sub_ln214_5_fu_321_p2;
wire   [3:0] add_ln214_2_fu_351_p2;
wire   [3:0] shl_ln214_6_fu_363_p2;
wire  signed [3:0] sub_ln214_6_fu_369_p2;
wire   [3:0] shl_ln214_7_fu_395_p2;
wire   [3:0] sub_ln214_15_fu_401_p2;
wire   [3:0] add_ln214_11_fu_407_p2;
wire   [3:0] sub_ln214_7_fu_391_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_predicate_tran4to5_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_484 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_3_reg_495 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_0423_0_0_reg_98 <= add_ln209_3_fu_419_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0423_0_0_reg_98 <= {{vars_V[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_484 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln887_3_reg_495 == 1'd1))) begin
        p_0423_0_lcssa_reg_133 <= add_ln209_2_fu_387_p2;
    end else if (((icmp_ln887_2_fu_300_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_0423_0_lcssa_reg_133 <= add_ln209_1_fu_294_p2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_1_reg_452 == 1'd1) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_0423_0_lcssa_reg_133 <= add_ln209_fu_256_p2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_reg_440 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_0423_0_lcssa_reg_133 <= p_0423_0_0_reg_98;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_484 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_3_reg_495 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_0426_0_0_reg_88 <= add_ln214_3_reg_504;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0426_0_0_reg_88 <= x_var_V_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_484 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_3_reg_495 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t1_V_0_reg_108 <= add_ln214_7_fu_413_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        t1_V_0_reg_108 <= {{vars_V[11:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_484 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln887_3_reg_495 == 1'd1))) begin
        t1_V_lcssa_reg_118 <= add_ln214_6_reg_488;
    end else if (((icmp_ln887_2_fu_300_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        t1_V_lcssa_reg_118 <= add_ln214_5_fu_288_p2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_1_reg_452 == 1'd1) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        t1_V_lcssa_reg_118 <= add_ln214_reg_444;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_reg_440 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        t1_V_lcssa_reg_118 <= t1_V_0_reg_108;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln209_1_reg_478 <= add_ln209_1_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln214_1_reg_461 <= add_ln214_1_fu_250_p2;
        sub_ln214_2_reg_456 <= sub_ln214_2_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_2_fu_300_p2 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_3_fu_357_p2 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln214_3_reg_504 <= add_ln214_3_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_2_fu_300_p2 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln214_6_reg_488 <= add_ln214_6_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_172_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln214_reg_444 <= add_ln214_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln887_1_reg_452 <= icmp_ln887_1_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln887_2_reg_484 <= icmp_ln887_2_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_2_fu_300_p2 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln887_3_reg_495 <= icmp_ln887_3_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln887_reg_440 <= icmp_ln887_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_2_fu_300_p2 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_3_fu_357_p2 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln209_3_reg_499 <= mul_ln209_3_fu_375_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Uoutport_V_ap_vld = 1'b1;
    end else begin
        Uoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Xoutport_V_ap_vld = 1'b1;
    end else begin
        Xoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Youtport_V_ap_vld = 1'b1;
    end else begin
        Youtport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_2_reg_484 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_3_reg_495 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p_0423_0_0_phi_fu_101_p4 = add_ln209_3_fu_419_p2;
    end else begin
        ap_phi_mux_p_0423_0_0_phi_fu_101_p4 = p_0423_0_0_reg_98;
    end
end

always @ (*) begin
    if (((icmp_ln887_2_reg_484 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_3_reg_495 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p_0426_0_0_phi_fu_91_p4 = add_ln214_3_reg_504;
    end else begin
        ap_phi_mux_p_0426_0_0_phi_fu_91_p4 = p_0426_0_0_reg_88;
    end
end

always @ (*) begin
    if (((icmp_ln887_2_reg_484 == 1'd0) & (icmp_ln887_1_reg_452 == 1'd0) & (icmp_ln887_3_reg_495 == 1'd0) & (icmp_ln887_reg_440 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_t1_V_0_phi_fu_111_p4 = add_ln214_7_fu_413_p2;
    end else begin
        ap_phi_mux_t1_V_0_phi_fu_111_p4 = t1_V_0_reg_108;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Uoutport_V = t1_V_lcssa_reg_118;

assign Xoutport_V = 4'd15;

assign Youtport_V = p_0423_0_lcssa_reg_133;

assign add_ln209_1_fu_294_p2 = ($signed(add_ln209_fu_256_p2) + $signed(add_ln214_5_fu_288_p2));

assign add_ln209_2_fu_387_p2 = ($signed(add_ln209_1_reg_478) + $signed(add_ln214_6_reg_488));

assign add_ln209_3_fu_419_p2 = (add_ln209_2_fu_387_p2 + add_ln214_7_fu_413_p2);

assign add_ln209_fu_256_p2 = ($signed(p_0423_0_0_reg_98) + $signed(add_ln214_reg_444));

assign add_ln214_10_fu_339_p2 = (add_ln209_1_fu_294_p2 + sub_ln214_14_fu_333_p2);

assign add_ln214_11_fu_407_p2 = (add_ln209_2_fu_387_p2 + sub_ln214_15_fu_401_p2);

assign add_ln214_1_fu_250_p2 = (ap_phi_mux_p_0426_0_0_phi_fu_91_p4 + 4'd2);

assign add_ln214_2_fu_351_p2 = (p_0426_0_0_reg_88 + 4'd3);

assign add_ln214_3_fu_381_p2 = (p_0426_0_0_reg_88 + 4'd4);

assign add_ln214_4_fu_226_p2 = (ap_phi_mux_p_0426_0_0_phi_fu_91_p4 + 4'd1);

assign add_ln214_5_fu_288_p2 = (add_ln214_9_fu_282_p2 + sub_ln214_3_fu_265_p2);

assign add_ln214_6_fu_345_p2 = (add_ln214_10_fu_339_p2 + sub_ln214_5_fu_321_p2);

assign add_ln214_7_fu_413_p2 = (add_ln214_11_fu_407_p2 + sub_ln214_7_fu_391_p2);

assign add_ln214_8_fu_214_p2 = (ap_phi_mux_p_0423_0_0_phi_fu_101_p4 + sub_ln214_12_fu_208_p2);

assign add_ln214_9_fu_282_p2 = (add_ln209_fu_256_p2 + sub_ln214_13_fu_276_p2);

assign add_ln214_fu_220_p2 = (add_ln214_8_fu_214_p2 + sub_ln214_1_fu_196_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran4to5_state3 = ((icmp_ln887_reg_440 == 1'd1) | ((icmp_ln887_1_reg_452 == 1'd1) | ((icmp_ln887_2_fu_300_p2 == 1'd1) | (icmp_ln887_3_fu_357_p2 == 1'd1))));
end

assign icmp_ln887_1_fu_232_p2 = ((add_ln214_4_fu_226_p2 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_300_p2 = ((add_ln214_1_reg_461 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_357_p2 = ((add_ln214_2_fu_351_p2 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_172_p2 = ((ap_phi_mux_p_0426_0_0_phi_fu_91_p4 == 4'd15) ? 1'b1 : 1'b0);

assign mul_ln209_1_fu_261_p2 = ($signed(add_ln214_reg_444) * $signed(sub_ln214_2_reg_456));

assign mul_ln209_2_fu_315_p2 = ($signed(add_ln214_5_fu_288_p2) * $signed(sub_ln214_4_fu_310_p2));

assign mul_ln209_3_fu_375_p2 = ($signed(add_ln214_6_fu_345_p2) * $signed(sub_ln214_6_fu_369_p2));

assign mul_ln209_fu_190_p2 = ($signed(ap_phi_mux_t1_V_0_phi_fu_111_p4) * $signed(sub_ln214_fu_184_p2));

assign shl_ln214_1_fu_202_p2 = ap_phi_mux_p_0423_0_0_phi_fu_101_p4 << 4'd2;

assign shl_ln214_2_fu_238_p2 = add_ln214_4_fu_226_p2 << 4'd2;

assign shl_ln214_3_fu_270_p2 = add_ln209_fu_256_p2 << 4'd2;

assign shl_ln214_4_fu_305_p2 = add_ln214_1_reg_461 << 4'd2;

assign shl_ln214_5_fu_327_p2 = add_ln209_1_fu_294_p2 << 4'd2;

assign shl_ln214_6_fu_363_p2 = add_ln214_2_fu_351_p2 << 4'd2;

assign shl_ln214_7_fu_395_p2 = add_ln209_2_fu_387_p2 << 4'd2;

assign shl_ln214_fu_178_p2 = ap_phi_mux_p_0426_0_0_phi_fu_91_p4 << 4'd2;

assign sub_ln214_12_fu_208_p2 = (4'd0 - shl_ln214_1_fu_202_p2);

assign sub_ln214_13_fu_276_p2 = (4'd0 - shl_ln214_3_fu_270_p2);

assign sub_ln214_14_fu_333_p2 = (4'd0 - shl_ln214_5_fu_327_p2);

assign sub_ln214_15_fu_401_p2 = (4'd0 - shl_ln214_7_fu_395_p2);

assign sub_ln214_1_fu_196_p2 = ($signed(ap_phi_mux_t1_V_0_phi_fu_111_p4) - $signed(mul_ln209_fu_190_p2));

assign sub_ln214_2_fu_244_p2 = (shl_ln214_2_fu_238_p2 - add_ln214_4_fu_226_p2);

assign sub_ln214_3_fu_265_p2 = ($signed(add_ln214_reg_444) - $signed(mul_ln209_1_fu_261_p2));

assign sub_ln214_4_fu_310_p2 = (shl_ln214_4_fu_305_p2 - add_ln214_1_reg_461);

assign sub_ln214_5_fu_321_p2 = ($signed(add_ln214_5_fu_288_p2) - $signed(mul_ln209_2_fu_315_p2));

assign sub_ln214_6_fu_369_p2 = (shl_ln214_6_fu_363_p2 - add_ln214_2_fu_351_p2);

assign sub_ln214_7_fu_391_p2 = ($signed(add_ln214_6_reg_488) - $signed(mul_ln209_3_reg_499));

assign sub_ln214_fu_184_p2 = (shl_ln214_fu_178_p2 - ap_phi_mux_p_0426_0_0_phi_fu_91_p4);

assign x_var_V_fu_148_p1 = vars_V[3:0];

endmodule //diffeq_easy
