// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="diffeq_easy,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.770000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=173,HLS_SYN_LUT=383,HLS_VERSION=2020_1}" *)

module diffeq_easy (
        ap_clk,
        ap_rst,
        vars_V,
        Xoutport_V,
        Xoutport_V_ap_vld,
        Youtport_V,
        Youtport_V_ap_vld,
        Uoutport_V,
        Uoutport_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [11:0] vars_V;
output  [3:0] Xoutport_V;
output   Xoutport_V_ap_vld;
output  [3:0] Youtport_V;
output   Youtport_V_ap_vld;
output  [3:0] Uoutport_V;
output   Uoutport_V_ap_vld;

reg Xoutport_V_ap_vld;
reg Youtport_V_ap_vld;
reg Uoutport_V_ap_vld;

reg   [3:0] p_0426_0_0_reg_86;
reg   [3:0] p_0423_0_0_reg_95;
reg  signed [3:0] t1_V_0_reg_105;
wire   [3:0] x_var_V_fu_137_p1;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln887_fu_161_p2;
reg   [0:0] icmp_ln887_reg_304;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln887_reg_304_pp0_iter1_reg;
wire  signed [3:0] add_ln214_fu_209_p2;
reg  signed [3:0] add_ln214_reg_308;
reg    ap_enable_reg_pp0_iter0;
reg  signed [3:0] add_ln214_reg_308_pp0_iter1_reg;
wire   [0:0] icmp_ln887_1_fu_221_p2;
reg   [0:0] icmp_ln887_1_reg_316;
reg   [0:0] icmp_ln887_1_reg_316_pp0_iter1_reg;
wire  signed [3:0] sub_ln214_2_fu_233_p2;
reg  signed [3:0] sub_ln214_2_reg_320;
wire   [3:0] add_ln214_1_fu_239_p2;
wire   [3:0] add_ln209_fu_245_p2;
reg   [3:0] add_ln209_reg_330;
reg    ap_enable_reg_pp0_iter1;
wire   [3:0] add_ln214_3_fu_277_p2;
wire   [3:0] add_ln209_1_fu_283_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran5to6_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [3:0] ap_phi_mux_p_0423_0_0_phi_fu_98_p4;
wire    ap_block_pp0_stage0;
reg  signed [3:0] ap_phi_mux_t1_V_0_phi_fu_108_p4;
reg   [3:0] t1_V_lcssa_reg_115;
reg   [3:0] p_0423_0_lcssa_reg_126;
wire    ap_CS_fsm_state6;
wire   [3:0] shl_ln214_fu_167_p2;
wire  signed [3:0] sub_ln214_fu_173_p2;
wire   [3:0] mul_ln209_fu_179_p2;
wire   [3:0] shl_ln214_1_fu_191_p2;
wire   [3:0] sub_ln214_6_fu_197_p2;
wire   [3:0] add_ln214_4_fu_203_p2;
wire   [3:0] sub_ln214_1_fu_185_p2;
wire   [3:0] add_ln214_2_fu_215_p2;
wire   [3:0] shl_ln214_2_fu_227_p2;
wire   [3:0] mul_ln209_1_fu_250_p2;
wire   [3:0] shl_ln214_3_fu_259_p2;
wire   [3:0] sub_ln214_7_fu_265_p2;
wire   [3:0] add_ln214_5_fu_271_p2;
wire   [3:0] sub_ln214_3_fu_254_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_255;
reg    ap_condition_259;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_predicate_tran5to6_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0423_0_0_reg_95 <= add_ln209_1_fu_283_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0423_0_0_reg_95 <= {{vars_V[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_259)) begin
            p_0423_0_lcssa_reg_126 <= add_ln209_reg_330;
        end else if ((1'b1 == ap_condition_255)) begin
            p_0423_0_lcssa_reg_126 <= p_0423_0_0_reg_95;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_221_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0426_0_0_reg_86 <= add_ln214_1_fu_239_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0426_0_0_reg_86 <= x_var_V_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_reg_316 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t1_V_0_reg_105 <= add_ln214_3_fu_277_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        t1_V_0_reg_105 <= {{vars_V[11:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_259)) begin
            t1_V_lcssa_reg_115 <= add_ln214_reg_308_pp0_iter1_reg;
        end else if ((1'b1 == ap_condition_255)) begin
            t1_V_lcssa_reg_115 <= t1_V_0_reg_105;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln209_reg_330 <= add_ln209_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln214_reg_308 <= add_ln214_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln214_reg_308_pp0_iter1_reg <= add_ln214_reg_308;
        icmp_ln887_1_reg_316_pp0_iter1_reg <= icmp_ln887_1_reg_316;
        icmp_ln887_reg_304 <= icmp_ln887_fu_161_p2;
        icmp_ln887_reg_304_pp0_iter1_reg <= icmp_ln887_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln887_1_reg_316 <= icmp_ln887_1_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_221_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln214_2_reg_320 <= sub_ln214_2_fu_233_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Uoutport_V_ap_vld = 1'b1;
    end else begin
        Uoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Xoutport_V_ap_vld = 1'b1;
    end else begin
        Xoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Youtport_V_ap_vld = 1'b1;
    end else begin
        Youtport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_316 == 1'd0) & (icmp_ln887_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p_0423_0_0_phi_fu_98_p4 = add_ln209_1_fu_283_p2;
    end else begin
        ap_phi_mux_p_0423_0_0_phi_fu_98_p4 = p_0423_0_0_reg_95;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_316 == 1'd0) & (icmp_ln887_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_t1_V_0_phi_fu_108_p4 = add_ln214_3_fu_277_p2;
    end else begin
        ap_phi_mux_t1_V_0_phi_fu_108_p4 = t1_V_0_reg_105;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Uoutport_V = t1_V_lcssa_reg_115;

assign Xoutport_V = 4'd15;

assign Youtport_V = p_0423_0_lcssa_reg_126;

assign add_ln209_1_fu_283_p2 = (add_ln209_fu_245_p2 + add_ln214_3_fu_277_p2);

assign add_ln209_fu_245_p2 = ($signed(p_0423_0_0_reg_95) + $signed(add_ln214_reg_308));

assign add_ln214_1_fu_239_p2 = (p_0426_0_0_reg_86 + 4'd2);

assign add_ln214_2_fu_215_p2 = (p_0426_0_0_reg_86 + 4'd1);

assign add_ln214_3_fu_277_p2 = (add_ln214_5_fu_271_p2 + sub_ln214_3_fu_254_p2);

assign add_ln214_4_fu_203_p2 = (ap_phi_mux_p_0423_0_0_phi_fu_98_p4 + sub_ln214_6_fu_197_p2);

assign add_ln214_5_fu_271_p2 = (add_ln209_fu_245_p2 + sub_ln214_7_fu_265_p2);

assign add_ln214_fu_209_p2 = (add_ln214_4_fu_203_p2 + sub_ln214_1_fu_185_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_255 = ((icmp_ln887_reg_304 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_259 = ((icmp_ln887_1_reg_316_pp0_iter1_reg == 1'd1) & (icmp_ln887_reg_304_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran5to6_state2 = ((icmp_ln887_1_fu_221_p2 == 1'd1) | (icmp_ln887_fu_161_p2 == 1'd1));
end

assign icmp_ln887_1_fu_221_p2 = ((add_ln214_2_fu_215_p2 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_161_p2 = ((p_0426_0_0_reg_86 == 4'd15) ? 1'b1 : 1'b0);

assign mul_ln209_1_fu_250_p2 = ($signed(add_ln214_reg_308) * $signed(sub_ln214_2_reg_320));

assign mul_ln209_fu_179_p2 = ($signed(ap_phi_mux_t1_V_0_phi_fu_108_p4) * $signed(sub_ln214_fu_173_p2));

assign shl_ln214_1_fu_191_p2 = ap_phi_mux_p_0423_0_0_phi_fu_98_p4 << 4'd2;

assign shl_ln214_2_fu_227_p2 = add_ln214_2_fu_215_p2 << 4'd2;

assign shl_ln214_3_fu_259_p2 = add_ln209_fu_245_p2 << 4'd2;

assign shl_ln214_fu_167_p2 = p_0426_0_0_reg_86 << 4'd2;

assign sub_ln214_1_fu_185_p2 = ($signed(ap_phi_mux_t1_V_0_phi_fu_108_p4) - $signed(mul_ln209_fu_179_p2));

assign sub_ln214_2_fu_233_p2 = (shl_ln214_2_fu_227_p2 - add_ln214_2_fu_215_p2);

assign sub_ln214_3_fu_254_p2 = ($signed(add_ln214_reg_308) - $signed(mul_ln209_1_fu_250_p2));

assign sub_ln214_6_fu_197_p2 = (4'd0 - shl_ln214_1_fu_191_p2);

assign sub_ln214_7_fu_265_p2 = (4'd0 - shl_ln214_3_fu_259_p2);

assign sub_ln214_fu_173_p2 = (shl_ln214_fu_167_p2 - p_0426_0_0_reg_86);

assign x_var_V_fu_137_p1 = vars_V[3:0];

endmodule //diffeq_easy
