// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="diffeq_easy,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.525000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=47,HLS_SYN_LUT=393,HLS_VERSION=2020_1}" *)

module diffeq_easy (
        ap_clk,
        ap_rst,
        vars_V,
        Xoutport_V,
        Xoutport_V_ap_vld,
        Youtport_V,
        Youtport_V_ap_vld,
        Uoutport_V,
        Uoutport_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input  [11:0] vars_V;
output  [3:0] Xoutport_V;
output   Xoutport_V_ap_vld;
output  [3:0] Youtport_V;
output   Youtport_V_ap_vld;
output  [3:0] Uoutport_V;
output   Uoutport_V_ap_vld;

reg Xoutport_V_ap_vld;
reg Youtport_V_ap_vld;
reg Uoutport_V_ap_vld;

wire   [3:0] x_var_V_fu_146_p1;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln887_fu_170_p2;
reg   [0:0] icmp_ln887_reg_370;
wire    ap_CS_fsm_state2;
wire  signed [3:0] add_ln214_fu_218_p2;
reg  signed [3:0] add_ln214_reg_374;
wire   [3:0] add_ln209_fu_224_p2;
reg   [3:0] add_ln209_reg_381;
wire   [3:0] add_ln214_3_fu_230_p2;
reg   [3:0] add_ln214_3_reg_389;
wire   [0:0] icmp_ln887_1_fu_236_p2;
reg   [0:0] icmp_ln887_1_reg_395;
wire   [3:0] add_ln214_1_fu_242_p2;
reg   [3:0] add_ln214_1_reg_399;
wire  signed [3:0] add_ln214_4_fu_284_p2;
reg  signed [3:0] add_ln214_4_reg_406;
wire    ap_CS_fsm_state3;
wire   [3:0] add_ln209_1_fu_290_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] add_ln214_5_fu_337_p2;
wire   [0:0] icmp_ln887_2_fu_294_p2;
wire   [3:0] add_ln209_2_fu_343_p2;
wire   [3:0] add_ln214_2_fu_349_p2;
reg   [3:0] p_0426_0_0_reg_90;
reg   [3:0] p_0423_0_0_reg_100;
reg  signed [3:0] t1_V_0_reg_110;
reg   [3:0] t1_V_lcssa_reg_120;
reg   [3:0] p_0423_0_lcssa_reg_133;
wire    ap_CS_fsm_state5;
wire   [3:0] shl_ln214_fu_176_p2;
wire  signed [3:0] sub_ln214_fu_182_p2;
wire   [3:0] mul_ln209_fu_188_p2;
wire   [3:0] shl_ln214_1_fu_200_p2;
wire   [3:0] sub_ln214_9_fu_206_p2;
wire   [3:0] add_ln214_6_fu_212_p2;
wire   [3:0] sub_ln214_1_fu_194_p2;
wire   [3:0] shl_ln214_2_fu_248_p2;
wire  signed [3:0] sub_ln214_2_fu_253_p2;
wire   [3:0] mul_ln209_1_fu_258_p2;
wire   [3:0] shl_ln214_3_fu_268_p2;
wire   [3:0] sub_ln214_10_fu_273_p2;
wire   [3:0] add_ln214_7_fu_279_p2;
wire   [3:0] sub_ln214_3_fu_263_p2;
wire   [3:0] shl_ln214_4_fu_299_p2;
wire  signed [3:0] sub_ln214_4_fu_304_p2;
wire   [3:0] mul_ln209_2_fu_309_p2;
wire   [3:0] shl_ln214_5_fu_319_p2;
wire   [3:0] sub_ln214_11_fu_325_p2;
wire   [3:0] add_ln214_8_fu_331_p2;
wire   [3:0] sub_ln214_5_fu_314_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_fu_294_p2 == 1'd0) & (icmp_ln887_1_reg_395 == 1'd0) & (icmp_ln887_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0423_0_0_reg_100 <= add_ln209_2_fu_343_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0423_0_0_reg_100 <= {{vars_V[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_fu_294_p2 == 1'd1) & (icmp_ln887_1_reg_395 == 1'd0) & (icmp_ln887_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0423_0_lcssa_reg_133 <= add_ln209_1_fu_290_p2;
    end else if (((icmp_ln887_1_fu_236_p2 == 1'd1) & (icmp_ln887_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0423_0_lcssa_reg_133 <= add_ln209_fu_224_p2;
    end else if (((icmp_ln887_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0423_0_lcssa_reg_133 <= p_0423_0_0_reg_100;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_fu_294_p2 == 1'd0) & (icmp_ln887_1_reg_395 == 1'd0) & (icmp_ln887_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0426_0_0_reg_90 <= add_ln214_2_fu_349_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0426_0_0_reg_90 <= x_var_V_fu_146_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_fu_294_p2 == 1'd0) & (icmp_ln887_1_reg_395 == 1'd0) & (icmp_ln887_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t1_V_0_reg_110 <= add_ln214_5_fu_337_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        t1_V_0_reg_110 <= {{vars_V[11:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_fu_294_p2 == 1'd1) & (icmp_ln887_1_reg_395 == 1'd0) & (icmp_ln887_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t1_V_lcssa_reg_120 <= add_ln214_4_reg_406;
    end else if (((icmp_ln887_1_fu_236_p2 == 1'd1) & (icmp_ln887_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t1_V_lcssa_reg_120 <= add_ln214_fu_218_p2;
    end else if (((icmp_ln887_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        t1_V_lcssa_reg_120 <= t1_V_0_reg_110;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln209_reg_381 <= add_ln209_fu_224_p2;
        add_ln214_3_reg_389 <= add_ln214_3_fu_230_p2;
        add_ln214_reg_374 <= add_ln214_fu_218_p2;
        icmp_ln887_1_reg_395 <= icmp_ln887_1_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_236_p2 == 1'd0) & (icmp_ln887_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln214_1_reg_399 <= add_ln214_1_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_reg_395 == 1'd0) & (icmp_ln887_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln214_4_reg_406 <= add_ln214_4_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln887_reg_370 <= icmp_ln887_fu_170_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Uoutport_V_ap_vld = 1'b1;
    end else begin
        Uoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Xoutport_V_ap_vld = 1'b1;
    end else begin
        Xoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Youtport_V_ap_vld = 1'b1;
    end else begin
        Youtport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln887_2_fu_294_p2 == 1'd0) & (icmp_ln887_1_reg_395 == 1'd0) & (icmp_ln887_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Uoutport_V = t1_V_lcssa_reg_120;

assign Xoutport_V = 4'd15;

assign Youtport_V = p_0423_0_lcssa_reg_133;

assign add_ln209_1_fu_290_p2 = ($signed(add_ln209_reg_381) + $signed(add_ln214_4_reg_406));

assign add_ln209_2_fu_343_p2 = (add_ln209_1_fu_290_p2 + add_ln214_5_fu_337_p2);

assign add_ln209_fu_224_p2 = ($signed(p_0423_0_0_reg_100) + $signed(add_ln214_fu_218_p2));

assign add_ln214_1_fu_242_p2 = (p_0426_0_0_reg_90 + 4'd2);

assign add_ln214_2_fu_349_p2 = (p_0426_0_0_reg_90 + 4'd3);

assign add_ln214_3_fu_230_p2 = (p_0426_0_0_reg_90 + 4'd1);

assign add_ln214_4_fu_284_p2 = (add_ln214_7_fu_279_p2 + sub_ln214_3_fu_263_p2);

assign add_ln214_5_fu_337_p2 = (add_ln214_8_fu_331_p2 + sub_ln214_5_fu_314_p2);

assign add_ln214_6_fu_212_p2 = (p_0423_0_0_reg_100 + sub_ln214_9_fu_206_p2);

assign add_ln214_7_fu_279_p2 = (add_ln209_reg_381 + sub_ln214_10_fu_273_p2);

assign add_ln214_8_fu_331_p2 = (add_ln209_1_fu_290_p2 + sub_ln214_11_fu_325_p2);

assign add_ln214_fu_218_p2 = (add_ln214_6_fu_212_p2 + sub_ln214_1_fu_194_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign icmp_ln887_1_fu_236_p2 = ((add_ln214_3_fu_230_p2 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_294_p2 = ((add_ln214_1_reg_399 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_170_p2 = ((p_0426_0_0_reg_90 == 4'd15) ? 1'b1 : 1'b0);

assign mul_ln209_1_fu_258_p2 = ($signed(add_ln214_reg_374) * $signed(sub_ln214_2_fu_253_p2));

assign mul_ln209_2_fu_309_p2 = ($signed(add_ln214_4_reg_406) * $signed(sub_ln214_4_fu_304_p2));

assign mul_ln209_fu_188_p2 = ($signed(t1_V_0_reg_110) * $signed(sub_ln214_fu_182_p2));

assign shl_ln214_1_fu_200_p2 = p_0423_0_0_reg_100 << 4'd2;

assign shl_ln214_2_fu_248_p2 = add_ln214_3_reg_389 << 4'd2;

assign shl_ln214_3_fu_268_p2 = add_ln209_reg_381 << 4'd2;

assign shl_ln214_4_fu_299_p2 = add_ln214_1_reg_399 << 4'd2;

assign shl_ln214_5_fu_319_p2 = add_ln209_1_fu_290_p2 << 4'd2;

assign shl_ln214_fu_176_p2 = p_0426_0_0_reg_90 << 4'd2;

assign sub_ln214_10_fu_273_p2 = (4'd0 - shl_ln214_3_fu_268_p2);

assign sub_ln214_11_fu_325_p2 = (4'd0 - shl_ln214_5_fu_319_p2);

assign sub_ln214_1_fu_194_p2 = ($signed(t1_V_0_reg_110) - $signed(mul_ln209_fu_188_p2));

assign sub_ln214_2_fu_253_p2 = (shl_ln214_2_fu_248_p2 - add_ln214_3_reg_389);

assign sub_ln214_3_fu_263_p2 = ($signed(add_ln214_reg_374) - $signed(mul_ln209_1_fu_258_p2));

assign sub_ln214_4_fu_304_p2 = (shl_ln214_4_fu_299_p2 - add_ln214_1_reg_399);

assign sub_ln214_5_fu_314_p2 = ($signed(add_ln214_4_reg_406) - $signed(mul_ln209_2_fu_309_p2));

assign sub_ln214_9_fu_206_p2 = (4'd0 - shl_ln214_1_fu_200_p2);

assign sub_ln214_fu_182_p2 = (shl_ln214_fu_176_p2 - p_0426_0_0_reg_90);

assign x_var_V_fu_146_p1 = vars_V[3:0];

endmodule //diffeq_easy
