// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="diffeq,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.765000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=61,HLS_SYN_LUT=302,HLS_VERSION=2020_1}" *)

module diffeq (
        ap_clk,
        ap_rst,
        vars_V,
        Xoutport_V,
        Xoutport_V_ap_vld,
        Youtport_V,
        Youtport_V_ap_vld,
        Uoutport_V,
        Uoutport_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input  [19:0] vars_V;
output  [3:0] Xoutport_V;
output   Xoutport_V_ap_vld;
output  [3:0] Youtport_V;
output   Youtport_V_ap_vld;
output  [3:0] Uoutport_V;
output   Uoutport_V_ap_vld;

reg Xoutport_V_ap_vld;
reg Youtport_V_ap_vld;
reg Uoutport_V_ap_vld;

wire   [3:0] x_var_V_fu_152_p1;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] a_var_V_reg_328;
wire  signed [3:0] dx_var_V_fu_186_p4;
reg  signed [3:0] dx_var_V_reg_334;
wire  signed [3:0] t1_V_fu_214_p2;
reg  signed [3:0] t1_V_reg_342;
wire  signed [3:0] sub_ln214_1_fu_247_p2;
reg  signed [3:0] sub_ln214_1_reg_353;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_fu_220_p2;
wire  signed [3:0] add_ln209_fu_257_p2;
reg  signed [3:0] add_ln209_reg_361;
wire    ap_CS_fsm_state3;
wire  signed [3:0] add_ln209_1_fu_263_p2;
wire  signed [3:0] sub_ln214_3_fu_293_p2;
reg  signed [3:0] sub_ln214_3_reg_375;
wire   [0:0] icmp_ln887_1_fu_268_p2;
wire   [3:0] mul_ln209_5_fu_299_p2;
reg   [3:0] mul_ln209_5_reg_380;
wire   [3:0] add_ln209_3_fu_304_p2;
reg   [3:0] add_ln209_3_reg_385;
wire   [3:0] add_ln209_2_fu_309_p2;
wire    ap_CS_fsm_state4;
reg  signed [3:0] p_0441_0_0_reg_89;
reg  signed [3:0] p_0438_0_0_reg_99;
reg  signed [3:0] p_0437_0_0_reg_109;
reg   [3:0] p_0437_0_lcssa_reg_119;
reg   [3:0] p_0438_0_lcssa_reg_130;
reg   [3:0] p_0441_0_lcssa_reg_141;
wire    ap_CS_fsm_state5;
wire   [1:0] tmp_2_fu_196_p4;
wire   [3:0] and_ln_fu_206_p3;
wire  signed [3:0] mul_ln209_6_fu_225_p2;
wire   [3:0] mul_ln209_fu_230_p2;
wire   [3:0] sub_ln214_fu_241_p2;
wire   [3:0] mul_ln209_1_fu_236_p2;
wire   [3:0] mul_ln209_2_fu_253_p2;
wire  signed [3:0] mul_ln209_7_fu_273_p2;
wire   [3:0] mul_ln209_3_fu_277_p2;
wire   [3:0] sub_ln214_2_fu_288_p2;
wire   [3:0] mul_ln209_4_fu_283_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_0437_0_0_reg_109 <= sub_ln214_3_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0437_0_0_reg_109 <= {{vars_V[11:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0437_0_lcssa_reg_119 <= sub_ln214_1_reg_353;
    end else if (((icmp_ln887_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0437_0_lcssa_reg_119 <= p_0437_0_0_reg_109;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_0438_0_0_reg_99 <= add_ln209_2_fu_309_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0438_0_0_reg_99 <= {{vars_V[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0438_0_lcssa_reg_130 <= add_ln209_fu_257_p2;
    end else if (((icmp_ln887_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0438_0_lcssa_reg_130 <= p_0438_0_0_reg_99;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_0441_0_0_reg_89 <= add_ln209_3_reg_385;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0441_0_0_reg_89 <= x_var_V_fu_152_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0441_0_lcssa_reg_141 <= add_ln209_1_fu_263_p2;
    end else if (((icmp_ln887_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0441_0_lcssa_reg_141 <= p_0441_0_0_reg_89;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a_var_V_reg_328 <= {{vars_V[15:12]}};
        dx_var_V_reg_334 <= {{vars_V[19:16]}};
        t1_V_reg_342 <= t1_V_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln209_3_reg_385 <= add_ln209_3_fu_304_p2;
        mul_ln209_5_reg_380 <= mul_ln209_5_fu_299_p2;
        sub_ln214_3_reg_375 <= sub_ln214_3_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln209_reg_361 <= add_ln209_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln214_1_reg_353 <= sub_ln214_1_fu_247_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Uoutport_V_ap_vld = 1'b1;
    end else begin
        Uoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Xoutport_V_ap_vld = 1'b1;
    end else begin
        Xoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Youtport_V_ap_vld = 1'b1;
    end else begin
        Youtport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln887_1_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Uoutport_V = p_0437_0_lcssa_reg_119;

assign Xoutport_V = p_0441_0_lcssa_reg_141;

assign Youtport_V = p_0438_0_lcssa_reg_130;

assign add_ln209_1_fu_263_p2 = ($signed(p_0441_0_0_reg_89) + $signed(dx_var_V_reg_334));

assign add_ln209_2_fu_309_p2 = ($signed(mul_ln209_5_reg_380) + $signed(add_ln209_reg_361));

assign add_ln209_3_fu_304_p2 = ($signed(add_ln209_1_fu_263_p2) + $signed(dx_var_V_reg_334));

assign add_ln209_fu_257_p2 = ($signed(mul_ln209_2_fu_253_p2) + $signed(p_0438_0_0_reg_99));

assign and_ln_fu_206_p3 = {{tmp_2_fu_196_p4}, {2'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign dx_var_V_fu_186_p4 = {{vars_V[19:16]}};

assign icmp_ln887_1_fu_268_p2 = ((add_ln209_1_fu_263_p2 < a_var_V_reg_328) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_220_p2 = ((p_0441_0_0_reg_89 < a_var_V_reg_328) ? 1'b1 : 1'b0);

assign mul_ln209_1_fu_236_p2 = ($signed(p_0438_0_0_reg_99) * $signed(t1_V_reg_342));

assign mul_ln209_2_fu_253_p2 = ($signed(sub_ln214_1_reg_353) * $signed(dx_var_V_reg_334));

assign mul_ln209_3_fu_277_p2 = ($signed(mul_ln209_7_fu_273_p2) * $signed(add_ln209_1_fu_263_p2));

assign mul_ln209_4_fu_283_p2 = ($signed(add_ln209_fu_257_p2) * $signed(t1_V_reg_342));

assign mul_ln209_5_fu_299_p2 = ($signed(sub_ln214_3_fu_293_p2) * $signed(dx_var_V_reg_334));

assign mul_ln209_6_fu_225_p2 = ($signed(t1_V_reg_342) * $signed(p_0437_0_0_reg_109));

assign mul_ln209_7_fu_273_p2 = ($signed(t1_V_reg_342) * $signed(sub_ln214_1_reg_353));

assign mul_ln209_fu_230_p2 = ($signed(mul_ln209_6_fu_225_p2) * $signed(p_0441_0_0_reg_89));

assign sub_ln214_1_fu_247_p2 = (sub_ln214_fu_241_p2 - mul_ln209_1_fu_236_p2);

assign sub_ln214_2_fu_288_p2 = ($signed(sub_ln214_1_reg_353) - $signed(mul_ln209_3_fu_277_p2));

assign sub_ln214_3_fu_293_p2 = (sub_ln214_2_fu_288_p2 - mul_ln209_4_fu_283_p2);

assign sub_ln214_fu_241_p2 = ($signed(p_0437_0_0_reg_109) - $signed(mul_ln209_fu_230_p2));

assign t1_V_fu_214_p2 = ($signed(and_ln_fu_206_p3) - $signed(dx_var_V_fu_186_p4));

assign tmp_2_fu_196_p4 = {{vars_V[17:16]}};

assign x_var_V_fu_152_p1 = vars_V[3:0];

endmodule //diffeq
