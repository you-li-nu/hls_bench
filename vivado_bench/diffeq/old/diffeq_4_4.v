// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="diffeq,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.565000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=196,HLS_VERSION=2020_1}" *)

module diffeq (
        ap_clk,
        ap_rst,
        x_var_V,
        y_var_V,
        u_var_V,
        a_var_V,
        dx_var_V,
        Xoutport_V,
        Xoutport_V_ap_vld,
        Youtport_V,
        Youtport_V_ap_vld,
        Uoutport_V,
        Uoutport_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input  [3:0] x_var_V;
input  [3:0] y_var_V;
input  [3:0] u_var_V;
input  [3:0] a_var_V;
input  [3:0] dx_var_V;
output  [3:0] Xoutport_V;
output   Xoutport_V_ap_vld;
output  [3:0] Youtport_V;
output   Youtport_V_ap_vld;
output  [3:0] Uoutport_V;
output   Uoutport_V_ap_vld;

reg Xoutport_V_ap_vld;
reg Youtport_V_ap_vld;
reg Uoutport_V_ap_vld;

wire   [3:0] grp_fu_136_p2;
reg   [3:0] add_ln209_1_reg_145;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_fu_170_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state1;
wire  signed [3:0] t1_V_fu_164_p2;
reg  signed [3:0] t1_V_reg_232;
wire  signed [3:0] mul_ln209_fu_175_p2;
reg  signed [3:0] mul_ln209_reg_241;
wire   [3:0] t4_V_fu_180_p2;
reg   [3:0] t4_V_reg_246;
wire    ap_CS_fsm_state3;
wire  signed [3:0] sub_ln214_fu_195_p2;
reg  signed [3:0] sub_ln214_reg_251;
wire    ap_CS_fsm_state4;
reg  signed [3:0] x_var_V_buf_0_reg_103;
reg  signed [3:0] y_var_V_buf_0_reg_114;
reg  signed [3:0] u_var_V_buf_0_reg_125;
wire    ap_CS_fsm_state6;
reg  signed [3:0] grp_fu_136_p0;
wire   [3:0] y1_V_fu_201_p2;
reg  signed [3:0] grp_fu_136_p1;
wire  signed [3:0] shl_ln209_fu_158_p0;
wire   [3:0] shl_ln209_fu_158_p2;
wire  signed [3:0] t1_V_fu_164_p1;
wire   [3:0] t6_V_fu_190_p2;
wire   [3:0] t5_V_fu_185_p2;
wire  signed [3:0] y1_V_fu_201_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        u_var_V_buf_0_reg_125 <= sub_ln214_reg_251;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        u_var_V_buf_0_reg_125 <= u_var_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_var_V_buf_0_reg_103 <= add_ln209_1_reg_145;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_var_V_buf_0_reg_103 <= x_var_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_var_V_buf_0_reg_114 <= grp_fu_136_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        y_var_V_buf_0_reg_114 <= y_var_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln209_1_reg_145 <= grp_fu_136_p2;
        mul_ln209_reg_241 <= mul_ln209_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sub_ln214_reg_251 <= sub_ln214_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        t1_V_reg_232 <= t1_V_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        t4_V_reg_246 <= t4_V_fu_180_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Uoutport_V_ap_vld = 1'b1;
    end else begin
        Uoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Xoutport_V_ap_vld = 1'b1;
    end else begin
        Xoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Youtport_V_ap_vld = 1'b1;
    end else begin
        Youtport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_136_p0 = y1_V_fu_201_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_136_p0 = x_var_V_buf_0_reg_103;
    end else begin
        grp_fu_136_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_136_p1 = y_var_V_buf_0_reg_114;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_136_p1 = dx_var_V;
    end else begin
        grp_fu_136_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Uoutport_V = u_var_V_buf_0_reg_125;

assign Xoutport_V = x_var_V_buf_0_reg_103;

assign Youtport_V = y_var_V_buf_0_reg_114;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_fu_136_p2 = ($signed(grp_fu_136_p0) + $signed(grp_fu_136_p1));

assign icmp_ln887_fu_170_p2 = ((x_var_V_buf_0_reg_103 < a_var_V) ? 1'b1 : 1'b0);

assign mul_ln209_fu_175_p2 = ($signed(t1_V_reg_232) * $signed(u_var_V_buf_0_reg_125));

assign shl_ln209_fu_158_p0 = dx_var_V;

assign shl_ln209_fu_158_p2 = shl_ln209_fu_158_p0 << 4'd2;

assign sub_ln214_fu_195_p2 = (t6_V_fu_190_p2 - t5_V_fu_185_p2);

assign t1_V_fu_164_p1 = dx_var_V;

assign t1_V_fu_164_p2 = ($signed(shl_ln209_fu_158_p2) - $signed(t1_V_fu_164_p1));

assign t4_V_fu_180_p2 = ($signed(mul_ln209_reg_241) * $signed(x_var_V_buf_0_reg_103));

assign t5_V_fu_185_p2 = ($signed(y_var_V_buf_0_reg_114) * $signed(t1_V_reg_232));

assign t6_V_fu_190_p2 = ($signed(u_var_V_buf_0_reg_125) - $signed(t4_V_reg_246));

assign y1_V_fu_201_p1 = dx_var_V;

assign y1_V_fu_201_p2 = ($signed(sub_ln214_reg_251) * $signed(y1_V_fu_201_p1));

endmodule //diffeq
