// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="diffeq,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.005000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=179,HLS_VERSION=2020_1}" *)

module diffeq (
        ap_clk,
        ap_rst,
        vars_V,
        Xoutport_V,
        Xoutport_V_ap_vld,
        Youtport_V,
        Youtport_V_ap_vld,
        Uoutport_V,
        Uoutport_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [19:0] vars_V;
output  [3:0] Xoutport_V;
output   Xoutport_V_ap_vld;
output  [3:0] Youtport_V;
output   Youtport_V_ap_vld;
output  [3:0] Uoutport_V;
output   Uoutport_V_ap_vld;

reg Xoutport_V_ap_vld;
reg Youtport_V_ap_vld;
reg Uoutport_V_ap_vld;

wire   [3:0] x_var_V_fu_174_p1;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] trunc_ln_reg_285;
wire  signed [3:0] trunc_ln1_fu_208_p4;
reg  signed [3:0] trunc_ln1_reg_290;
wire  signed [3:0] t1_V_fu_236_p2;
reg  signed [3:0] t1_V_reg_296;
wire  signed [3:0] u_var_V_1_fu_253_p2;
reg  signed [3:0] u_var_V_1_reg_305;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_fu_242_p2;
wire   [3:0] x_var_V_1_fu_259_p2;
reg   [3:0] x_var_V_1_reg_311;
wire   [3:0] y_var_V_1_fu_264_p2;
wire    ap_CS_fsm_state3;
reg  signed [3:0] p_0445_0_reg_85;
reg  signed [3:0] p_0490_0_reg_95;
reg  signed [3:0] p_0441_0_reg_106;
reg  signed [3:0] grp_fu_116_p0;
reg  signed [3:0] grp_fu_116_p1;
wire  signed [3:0] mul_ln209_fu_118_p2;
wire   [1:0] tmp_fu_218_p4;
wire   [3:0] and_ln_fu_228_p3;
wire   [3:0] t4_V_fu_117_p2;
wire   [3:0] t6_V_fu_247_p2;
wire   [3:0] grp_fu_116_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_0441_0_reg_106 <= u_var_V_1_reg_305;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0441_0_reg_106 <= {{vars_V[11:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_0445_0_reg_85 <= x_var_V_1_reg_311;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0445_0_reg_85 <= x_var_V_fu_174_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_0490_0_reg_95 <= y_var_V_1_fu_264_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0490_0_reg_95 <= {{vars_V[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        t1_V_reg_296 <= t1_V_fu_236_p2;
        trunc_ln1_reg_290 <= {{vars_V[19:16]}};
        trunc_ln_reg_285 <= {{vars_V[15:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        u_var_V_1_reg_305 <= u_var_V_1_fu_253_p2;
        x_var_V_1_reg_311 <= x_var_V_1_fu_259_p2;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Uoutport_V_ap_vld = 1'b1;
    end else begin
        Uoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Xoutport_V_ap_vld = 1'b1;
    end else begin
        Xoutport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Youtport_V_ap_vld = 1'b1;
    end else begin
        Youtport_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_116_p0 = u_var_V_1_reg_305;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_116_p0 = p_0490_0_reg_95;
    end else begin
        grp_fu_116_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_116_p1 = trunc_ln1_reg_290;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_116_p1 = t1_V_reg_296;
    end else begin
        grp_fu_116_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Uoutport_V = p_0441_0_reg_106;

assign Xoutport_V = p_0445_0_reg_85;

assign Youtport_V = p_0490_0_reg_95;

assign and_ln_fu_228_p3 = {{tmp_fu_218_p4}, {2'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_fu_116_p2 = ($signed(grp_fu_116_p0) * $signed(grp_fu_116_p1));

assign icmp_ln887_fu_242_p2 = ((p_0445_0_reg_85 < trunc_ln_reg_285) ? 1'b1 : 1'b0);

assign mul_ln209_fu_118_p2 = ($signed(t1_V_reg_296) * $signed(p_0441_0_reg_106));

assign t1_V_fu_236_p2 = ($signed(and_ln_fu_228_p3) - $signed(trunc_ln1_fu_208_p4));

assign t4_V_fu_117_p2 = ($signed(mul_ln209_fu_118_p2) * $signed(p_0445_0_reg_85));

assign t6_V_fu_247_p2 = ($signed(p_0441_0_reg_106) - $signed(t4_V_fu_117_p2));

assign tmp_fu_218_p4 = {{vars_V[17:16]}};

assign trunc_ln1_fu_208_p4 = {{vars_V[19:16]}};

assign u_var_V_1_fu_253_p2 = (t6_V_fu_247_p2 - grp_fu_116_p2);

assign x_var_V_1_fu_259_p2 = ($signed(trunc_ln1_reg_290) + $signed(p_0445_0_reg_85));

assign x_var_V_fu_174_p1 = vars_V[3:0];

assign y_var_V_1_fu_264_p2 = ($signed(grp_fu_116_p2) + $signed(p_0490_0_reg_95));

endmodule //diffeq
