// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kalman,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.525000,HLS_SYN_LAT=2,HLS_SYN_TPT=3,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=382,HLS_VERSION=2020_1}" *)

module kalman (
        ap_clk,
        ap_rst,
        nonce_input_V,
        in_port_V,
        out_port_V,
        out_port_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [5:0] nonce_input_V;
input  [15:0] in_port_V;
output  [7:0] out_port_V;
output   out_port_V_ap_vld;

reg out_port_V_ap_vld;

wire  signed [3:0] trunc_ln1503_1_fu_99_p4;
reg  signed [3:0] trunc_ln1503_1_reg_408;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [3:0] trunc_ln1503_2_fu_109_p4;
reg  signed [3:0] trunc_ln1503_2_reg_413;
wire  signed [3:0] trunc_ln1503_3_fu_119_p4;
reg  signed [3:0] trunc_ln1503_3_reg_418;
wire   [2:0] trunc_ln214_1_fu_161_p1;
reg   [2:0] trunc_ln214_1_reg_423;
wire  signed [1:0] tmp_2_fu_165_p4;
reg  signed [1:0] tmp_2_reg_428;
wire   [3:0] and_ln_fu_175_p3;
reg   [3:0] and_ln_reg_433;
wire  signed [3:0] add_ln700_2_fu_237_p2;
reg  signed [3:0] add_ln700_2_reg_438;
wire   [0:0] trunc_ln214_2_fu_243_p1;
reg   [0:0] trunc_ln214_2_reg_444;
wire  signed [1:0] trunc_ln700_fu_247_p1;
reg  signed [1:0] trunc_ln700_reg_449;
reg  signed [3:0] trunc_ln1503_6_reg_454;
reg   [0:0] tmp_reg_461;
wire  signed [3:0] add_ln700_5_fu_339_p2;
reg  signed [3:0] add_ln700_5_reg_466;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [1:0] trunc_ln214_fu_133_p1;
wire   [3:0] shl_ln_fu_137_p3;
wire   [3:0] trunc_ln1503_4_fu_129_p1;
wire   [3:0] trunc_ln1503_5_fu_151_p4;
wire  signed [3:0] add_ln214_fu_145_p2;
wire  signed [3:0] sub_ln214_fu_183_p2;
wire  signed [3:0] trunc_ln1503_fu_95_p1;
wire  signed [3:0] add_ln214_1_fu_201_p2;
wire  signed [3:0] add_ln214_2_fu_207_p2;
wire   [3:0] mul_ln700_fu_189_p2;
wire   [3:0] mul_ln700_1_fu_195_p2;
wire   [3:0] mul_ln700_3_fu_219_p2;
wire   [3:0] mul_ln700_2_fu_213_p2;
wire   [3:0] add_ln700_1_fu_231_p2;
wire   [3:0] add_ln700_fu_225_p2;
wire   [3:0] shl_ln214_2_fu_276_p3;
wire   [3:0] shl_ln214_1_fu_269_p3;
wire  signed [3:0] sub_ln214_1_fu_283_p2;
wire   [1:0] mul_ln700_5_fu_294_p2;
wire  signed [3:0] add_ln214_3_fu_306_p2;
wire  signed [3:0] add_ln214_4_fu_312_p2;
wire   [3:0] mul_ln700_4_fu_289_p2;
wire   [3:0] shl_ln1_fu_298_p3;
wire   [3:0] mul_ln700_7_fu_322_p2;
wire   [3:0] mul_ln700_6_fu_317_p2;
wire   [3:0] add_ln700_4_fu_333_p2;
wire   [3:0] add_ln700_3_fu_327_p2;
wire   [3:0] and_ln214_1_fu_349_p3;
wire  signed [3:0] sub_ln214_2_fu_356_p2;
wire   [3:0] mul_ln700_9_fu_361_p2;
wire   [3:0] mul_ln700_8_fu_345_p2;
wire  signed [3:0] add_ln214_5_fu_372_p2;
wire  signed [3:0] add_ln214_6_fu_382_p2;
wire   [3:0] mul_ln700_11_fu_388_p2;
wire   [3:0] mul_ln700_10_fu_377_p2;
wire   [3:0] add_ln700_7_fu_393_p2;
wire   [3:0] add_ln700_6_fu_366_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln700_2_reg_438 <= add_ln700_2_fu_237_p2;
        and_ln_reg_433[3 : 2] <= and_ln_fu_175_p3[3 : 2];
        tmp_2_reg_428 <= {{nonce_input_V[2:1]}};
        tmp_reg_461 <= nonce_input_V[32'd2];
        trunc_ln1503_1_reg_408 <= {{in_port_V[7:4]}};
        trunc_ln1503_2_reg_413 <= {{in_port_V[11:8]}};
        trunc_ln1503_3_reg_418 <= {{in_port_V[15:12]}};
        trunc_ln1503_6_reg_454 <= {{nonce_input_V[5:2]}};
        trunc_ln214_1_reg_423 <= trunc_ln214_1_fu_161_p1;
        trunc_ln214_2_reg_444 <= trunc_ln214_2_fu_243_p1;
        trunc_ln700_reg_449 <= trunc_ln700_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln700_5_reg_466 <= add_ln700_5_fu_339_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_port_V_ap_vld = 1'b1;
    end else begin
        out_port_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_1_fu_201_p2 = ($signed(4'd7) + $signed(add_ln214_fu_145_p2));

assign add_ln214_2_fu_207_p2 = ($signed(4'd14) + $signed(sub_ln214_fu_183_p2));

assign add_ln214_3_fu_306_p2 = ($signed(4'd7) + $signed(sub_ln214_1_fu_283_p2));

assign add_ln214_4_fu_312_p2 = ($signed(4'd14) + $signed(and_ln_reg_433));

assign add_ln214_5_fu_372_p2 = ($signed(4'd15) + $signed(trunc_ln1503_6_reg_454));

assign add_ln214_6_fu_382_p2 = ($signed(4'd15) + $signed(sub_ln214_2_fu_356_p2));

assign add_ln214_fu_145_p2 = (shl_ln_fu_137_p3 + trunc_ln1503_4_fu_129_p1);

assign add_ln700_1_fu_231_p2 = (mul_ln700_3_fu_219_p2 + mul_ln700_2_fu_213_p2);

assign add_ln700_2_fu_237_p2 = (add_ln700_1_fu_231_p2 + add_ln700_fu_225_p2);

assign add_ln700_3_fu_327_p2 = (mul_ln700_4_fu_289_p2 + shl_ln1_fu_298_p3);

assign add_ln700_4_fu_333_p2 = (mul_ln700_7_fu_322_p2 + mul_ln700_6_fu_317_p2);

assign add_ln700_5_fu_339_p2 = (add_ln700_4_fu_333_p2 + add_ln700_3_fu_327_p2);

assign add_ln700_6_fu_366_p2 = (mul_ln700_9_fu_361_p2 + mul_ln700_8_fu_345_p2);

assign add_ln700_7_fu_393_p2 = (mul_ln700_11_fu_388_p2 + mul_ln700_10_fu_377_p2);

assign add_ln700_fu_225_p2 = (mul_ln700_fu_189_p2 + mul_ln700_1_fu_195_p2);

assign and_ln214_1_fu_349_p3 = {{tmp_reg_461}, {3'd0}};

assign and_ln_fu_175_p3 = {{tmp_2_fu_165_p4}, {2'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign mul_ln700_10_fu_377_p2 = ($signed(add_ln214_5_fu_372_p2) * $signed(add_ln700_2_reg_438));

assign mul_ln700_11_fu_388_p2 = ($signed(add_ln214_6_fu_382_p2) * $signed(add_ln700_5_reg_466));

assign mul_ln700_1_fu_195_p2 = ($signed(sub_ln214_fu_183_p2) * $signed(trunc_ln1503_fu_95_p1));

assign mul_ln700_2_fu_213_p2 = ($signed(add_ln214_1_fu_201_p2) * $signed(trunc_ln1503_3_fu_119_p4));

assign mul_ln700_3_fu_219_p2 = ($signed(add_ln214_2_fu_207_p2) * $signed(trunc_ln1503_1_fu_99_p4));

assign mul_ln700_4_fu_289_p2 = ($signed(sub_ln214_1_fu_283_p2) * $signed(trunc_ln1503_2_reg_413));

assign mul_ln700_5_fu_294_p2 = ($signed(trunc_ln700_reg_449) * $signed(tmp_2_reg_428));

assign mul_ln700_6_fu_317_p2 = ($signed(add_ln214_3_fu_306_p2) * $signed(trunc_ln1503_3_reg_418));

assign mul_ln700_7_fu_322_p2 = ($signed(add_ln214_4_fu_312_p2) * $signed(trunc_ln1503_1_reg_408));

assign mul_ln700_8_fu_345_p2 = ($signed(trunc_ln1503_6_reg_454) * $signed(add_ln700_2_reg_438));

assign mul_ln700_9_fu_361_p2 = ($signed(sub_ln214_2_fu_356_p2) * $signed(add_ln700_5_reg_466));

assign mul_ln700_fu_189_p2 = ($signed(add_ln214_fu_145_p2) * $signed(trunc_ln1503_2_fu_109_p4));

assign out_port_V = {{add_ln700_7_fu_393_p2}, {add_ln700_6_fu_366_p2}};

assign shl_ln1_fu_298_p3 = {{mul_ln700_5_fu_294_p2}, {2'd0}};

assign shl_ln214_1_fu_269_p3 = {{trunc_ln214_1_reg_423}, {1'd0}};

assign shl_ln214_2_fu_276_p3 = {{trunc_ln214_2_reg_444}, {3'd0}};

assign shl_ln_fu_137_p3 = {{trunc_ln214_fu_133_p1}, {2'd0}};

assign sub_ln214_1_fu_283_p2 = (shl_ln214_2_fu_276_p3 - shl_ln214_1_fu_269_p3);

assign sub_ln214_2_fu_356_p2 = ($signed(and_ln214_1_fu_349_p3) - $signed(trunc_ln1503_6_reg_454));

assign sub_ln214_fu_183_p2 = (and_ln_fu_175_p3 - trunc_ln1503_5_fu_151_p4);

assign tmp_2_fu_165_p4 = {{nonce_input_V[2:1]}};

assign trunc_ln1503_1_fu_99_p4 = {{in_port_V[7:4]}};

assign trunc_ln1503_2_fu_109_p4 = {{in_port_V[11:8]}};

assign trunc_ln1503_3_fu_119_p4 = {{in_port_V[15:12]}};

assign trunc_ln1503_4_fu_129_p1 = nonce_input_V[3:0];

assign trunc_ln1503_5_fu_151_p4 = {{nonce_input_V[4:1]}};

assign trunc_ln1503_fu_95_p1 = in_port_V[3:0];

assign trunc_ln214_1_fu_161_p1 = nonce_input_V[2:0];

assign trunc_ln214_2_fu_243_p1 = nonce_input_V[0:0];

assign trunc_ln214_fu_133_p1 = nonce_input_V[1:0];

assign trunc_ln700_fu_247_p1 = in_port_V[1:0];

always @ (posedge ap_clk) begin
    and_ln_reg_433[1:0] <= 2'b00;
end

endmodule //kalman
