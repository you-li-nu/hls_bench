// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kalman,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.645000,HLS_SYN_LAT=2,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=31,HLS_SYN_LUT=382,HLS_VERSION=2020_1}" *)

module kalman (
        ap_clk,
        ap_rst,
        nonce_input_V,
        in_port_V,
        out_port_V,
        out_port_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input  [5:0] nonce_input_V;
input  [15:0] in_port_V;
output  [7:0] out_port_V;
output   out_port_V_ap_vld;

reg out_port_V_ap_vld;

wire  signed [3:0] trunc_ln1503_1_fu_99_p4;
reg  signed [3:0] trunc_ln1503_1_reg_412;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire  signed [3:0] trunc_ln1503_3_fu_119_p4;
reg  signed [3:0] trunc_ln1503_3_reg_417;
wire  signed [3:0] add_ln700_2_fu_245_p2;
reg  signed [3:0] add_ln700_2_reg_422;
wire   [3:0] mul_ln700_4_fu_269_p2;
reg   [3:0] mul_ln700_4_reg_428;
wire   [1:0] mul_ln700_5_fu_279_p2;
reg   [1:0] mul_ln700_5_reg_433;
wire  signed [3:0] add_ln214_3_fu_285_p2;
reg  signed [3:0] add_ln214_3_reg_438;
wire  signed [3:0] add_ln214_4_fu_291_p2;
reg  signed [3:0] add_ln214_4_reg_443;
reg  signed [3:0] trunc_ln1503_6_reg_448;
reg   [0:0] tmp_reg_455;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage0;
wire   [1:0] trunc_ln214_fu_133_p1;
wire   [3:0] shl_ln_fu_137_p3;
wire   [3:0] trunc_ln1503_4_fu_129_p1;
wire   [2:0] trunc_ln214_1_fu_161_p1;
wire  signed [1:0] tmp_2_fu_173_p4;
wire   [3:0] and_ln_fu_183_p3;
wire   [3:0] trunc_ln1503_5_fu_151_p4;
wire  signed [3:0] add_ln214_fu_145_p2;
wire  signed [3:0] trunc_ln1503_2_fu_109_p4;
wire  signed [3:0] sub_ln214_fu_191_p2;
wire  signed [3:0] trunc_ln1503_fu_95_p1;
wire  signed [3:0] add_ln214_1_fu_209_p2;
wire  signed [3:0] add_ln214_2_fu_215_p2;
wire   [3:0] mul_ln700_fu_197_p2;
wire   [3:0] mul_ln700_1_fu_203_p2;
wire   [3:0] mul_ln700_3_fu_227_p2;
wire   [3:0] mul_ln700_2_fu_221_p2;
wire   [3:0] add_ln700_1_fu_239_p2;
wire   [3:0] add_ln700_fu_233_p2;
wire   [0:0] trunc_ln214_2_fu_251_p1;
wire   [3:0] shl_ln214_2_fu_255_p3;
wire   [3:0] shl_ln214_1_fu_165_p3;
wire  signed [3:0] sub_ln214_1_fu_263_p2;
wire  signed [1:0] trunc_ln700_fu_275_p1;
wire    ap_block_pp0_stage1;
wire   [3:0] shl_ln1_fu_315_p3;
wire   [3:0] mul_ln700_7_fu_326_p2;
wire   [3:0] mul_ln700_6_fu_322_p2;
wire   [3:0] add_ln700_4_fu_335_p2;
wire   [3:0] add_ln700_3_fu_330_p2;
wire   [3:0] and_ln214_1_fu_351_p3;
wire  signed [3:0] sub_ln214_2_fu_358_p2;
wire  signed [3:0] add_ln700_5_fu_341_p2;
wire   [3:0] mul_ln700_9_fu_363_p2;
wire   [3:0] mul_ln700_8_fu_347_p2;
wire  signed [3:0] add_ln214_5_fu_375_p2;
wire  signed [3:0] add_ln214_6_fu_385_p2;
wire   [3:0] mul_ln700_11_fu_391_p2;
wire   [3:0] mul_ln700_10_fu_380_p2;
wire   [3:0] add_ln700_7_fu_397_p2;
wire   [3:0] add_ln700_6_fu_369_p2;
reg   [1:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln214_3_reg_438[3 : 1] <= add_ln214_3_fu_285_p2[3 : 1];
        add_ln214_4_reg_443[3 : 2] <= add_ln214_4_fu_291_p2[3 : 2];
        add_ln700_2_reg_422 <= add_ln700_2_fu_245_p2;
        mul_ln700_4_reg_428 <= mul_ln700_4_fu_269_p2;
        mul_ln700_5_reg_433 <= mul_ln700_5_fu_279_p2;
        tmp_reg_455 <= nonce_input_V[32'd2];
        trunc_ln1503_1_reg_412 <= {{in_port_V[7:4]}};
        trunc_ln1503_3_reg_417 <= {{in_port_V[15:12]}};
        trunc_ln1503_6_reg_448 <= {{nonce_input_V[5:2]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1))) begin
        out_port_V_ap_vld = 1'b1;
    end else begin
        out_port_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_1_fu_209_p2 = ($signed(4'd7) + $signed(add_ln214_fu_145_p2));

assign add_ln214_2_fu_215_p2 = ($signed(4'd14) + $signed(sub_ln214_fu_191_p2));

assign add_ln214_3_fu_285_p2 = ($signed(4'd7) + $signed(sub_ln214_1_fu_263_p2));

assign add_ln214_4_fu_291_p2 = ($signed(4'd14) + $signed(and_ln_fu_183_p3));

assign add_ln214_5_fu_375_p2 = ($signed(4'd15) + $signed(trunc_ln1503_6_reg_448));

assign add_ln214_6_fu_385_p2 = ($signed(4'd15) + $signed(sub_ln214_2_fu_358_p2));

assign add_ln214_fu_145_p2 = (shl_ln_fu_137_p3 + trunc_ln1503_4_fu_129_p1);

assign add_ln700_1_fu_239_p2 = (mul_ln700_3_fu_227_p2 + mul_ln700_2_fu_221_p2);

assign add_ln700_2_fu_245_p2 = (add_ln700_1_fu_239_p2 + add_ln700_fu_233_p2);

assign add_ln700_3_fu_330_p2 = (mul_ln700_4_reg_428 + shl_ln1_fu_315_p3);

assign add_ln700_4_fu_335_p2 = (mul_ln700_7_fu_326_p2 + mul_ln700_6_fu_322_p2);

assign add_ln700_5_fu_341_p2 = (add_ln700_4_fu_335_p2 + add_ln700_3_fu_330_p2);

assign add_ln700_6_fu_369_p2 = (mul_ln700_9_fu_363_p2 + mul_ln700_8_fu_347_p2);

assign add_ln700_7_fu_397_p2 = (mul_ln700_11_fu_391_p2 + mul_ln700_10_fu_380_p2);

assign add_ln700_fu_233_p2 = (mul_ln700_fu_197_p2 + mul_ln700_1_fu_203_p2);

assign and_ln214_1_fu_351_p3 = {{tmp_reg_455}, {3'd0}};

assign and_ln_fu_183_p3 = {{tmp_2_fu_173_p4}, {2'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign mul_ln700_10_fu_380_p2 = ($signed(add_ln214_5_fu_375_p2) * $signed(add_ln700_2_reg_422));

assign mul_ln700_11_fu_391_p2 = ($signed(add_ln214_6_fu_385_p2) * $signed(add_ln700_5_fu_341_p2));

assign mul_ln700_1_fu_203_p2 = ($signed(sub_ln214_fu_191_p2) * $signed(trunc_ln1503_fu_95_p1));

assign mul_ln700_2_fu_221_p2 = ($signed(add_ln214_1_fu_209_p2) * $signed(trunc_ln1503_3_fu_119_p4));

assign mul_ln700_3_fu_227_p2 = ($signed(add_ln214_2_fu_215_p2) * $signed(trunc_ln1503_1_fu_99_p4));

assign mul_ln700_4_fu_269_p2 = ($signed(sub_ln214_1_fu_263_p2) * $signed(trunc_ln1503_2_fu_109_p4));

assign mul_ln700_5_fu_279_p2 = ($signed(trunc_ln700_fu_275_p1) * $signed(tmp_2_fu_173_p4));

assign mul_ln700_6_fu_322_p2 = ($signed(add_ln214_3_reg_438) * $signed(trunc_ln1503_3_reg_417));

assign mul_ln700_7_fu_326_p2 = ($signed(add_ln214_4_reg_443) * $signed(trunc_ln1503_1_reg_412));

assign mul_ln700_8_fu_347_p2 = ($signed(trunc_ln1503_6_reg_448) * $signed(add_ln700_2_reg_422));

assign mul_ln700_9_fu_363_p2 = ($signed(sub_ln214_2_fu_358_p2) * $signed(add_ln700_5_fu_341_p2));

assign mul_ln700_fu_197_p2 = ($signed(add_ln214_fu_145_p2) * $signed(trunc_ln1503_2_fu_109_p4));

assign out_port_V = {{add_ln700_7_fu_397_p2}, {add_ln700_6_fu_369_p2}};

assign shl_ln1_fu_315_p3 = {{mul_ln700_5_reg_433}, {2'd0}};

assign shl_ln214_1_fu_165_p3 = {{trunc_ln214_1_fu_161_p1}, {1'd0}};

assign shl_ln214_2_fu_255_p3 = {{trunc_ln214_2_fu_251_p1}, {3'd0}};

assign shl_ln_fu_137_p3 = {{trunc_ln214_fu_133_p1}, {2'd0}};

assign sub_ln214_1_fu_263_p2 = (shl_ln214_2_fu_255_p3 - shl_ln214_1_fu_165_p3);

assign sub_ln214_2_fu_358_p2 = ($signed(and_ln214_1_fu_351_p3) - $signed(trunc_ln1503_6_reg_448));

assign sub_ln214_fu_191_p2 = (and_ln_fu_183_p3 - trunc_ln1503_5_fu_151_p4);

assign tmp_2_fu_173_p4 = {{nonce_input_V[2:1]}};

assign trunc_ln1503_1_fu_99_p4 = {{in_port_V[7:4]}};

assign trunc_ln1503_2_fu_109_p4 = {{in_port_V[11:8]}};

assign trunc_ln1503_3_fu_119_p4 = {{in_port_V[15:12]}};

assign trunc_ln1503_4_fu_129_p1 = nonce_input_V[3:0];

assign trunc_ln1503_5_fu_151_p4 = {{nonce_input_V[4:1]}};

assign trunc_ln1503_fu_95_p1 = in_port_V[3:0];

assign trunc_ln214_1_fu_161_p1 = nonce_input_V[2:0];

assign trunc_ln214_2_fu_251_p1 = nonce_input_V[0:0];

assign trunc_ln214_fu_133_p1 = nonce_input_V[1:0];

assign trunc_ln700_fu_275_p1 = in_port_V[1:0];

always @ (posedge ap_clk) begin
    add_ln214_3_reg_438[0] <= 1'b1;
    add_ln214_4_reg_443[1:0] <= 2'b10;
end

endmodule //kalman
