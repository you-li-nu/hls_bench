// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ellipf_seq,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.890000,HLS_SYN_LAT=22,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=40,HLS_SYN_LUT=132,HLS_VERSION=2020_1}" *)

module ellipf_seq (
        ap_clk,
        ap_rst,
        in_ports_V,
        out_ports_V,
        out_ports_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [31:0] in_ports_V;
output  [31:0] out_ports_V;
output   out_ports_V_ap_vld;

reg out_ports_V_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_V_fu_117_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln209_fu_243_p1;
wire   [0:0] icmp_ln887_fu_111_p2;
reg   [31:0] in_ports_V_buf_0_reg_89;
reg   [4:0] p_0305_0_reg_100;
wire    ap_CS_fsm_state3;
wire   [3:0] sv33_V_fu_157_p4;
wire   [3:0] sv39_V_fu_167_p4;
wire   [3:0] n2_V_fu_177_p2;
wire   [3:0] empty_4_fu_183_p2;
wire   [2:0] tmp_2_fu_195_p4;
wire   [3:0] sv26_V_fu_147_p4;
wire   [3:0] sv13_V_fu_137_p4;
wire   [3:0] add_ln209_fu_213_p2;
wire   [3:0] inp_V_fu_123_p1;
wire   [3:0] factor1_fu_205_p3;
wire   [3:0] factor_fu_189_p2;
wire   [3:0] add_ln209_2_fu_225_p2;
wire   [3:0] sv2_V_fu_127_p4;
wire   [3:0] add_ln209_3_fu_231_p2;
wire   [3:0] add_ln209_1_fu_219_p2;
wire   [3:0] n20_V_fu_237_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_ports_V_buf_0_reg_89 <= zext_ln209_fu_243_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_ports_V_buf_0_reg_89 <= in_ports_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0305_0_reg_100 <= i_V_fu_117_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0305_0_reg_100 <= 5'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_ports_V_ap_vld = 1'b1;
    end else begin
        out_ports_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln209_1_fu_219_p2 = (add_ln209_fu_213_p2 + inp_V_fu_123_p1);

assign add_ln209_2_fu_225_p2 = (factor1_fu_205_p3 + factor_fu_189_p2);

assign add_ln209_3_fu_231_p2 = (add_ln209_2_fu_225_p2 + sv2_V_fu_127_p4);

assign add_ln209_fu_213_p2 = (sv26_V_fu_147_p4 + sv13_V_fu_137_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign empty_4_fu_183_p2 = n2_V_fu_177_p2 << 4'd2;

assign factor1_fu_205_p3 = {{tmp_2_fu_195_p4}, {1'd0}};

assign factor_fu_189_p2 = (empty_4_fu_183_p2 - n2_V_fu_177_p2);

assign i_V_fu_117_p2 = (p_0305_0_reg_100 + 5'd1);

assign icmp_ln887_fu_111_p2 = ((p_0305_0_reg_100 == 5'd20) ? 1'b1 : 1'b0);

assign inp_V_fu_123_p1 = in_ports_V_buf_0_reg_89[3:0];

assign n20_V_fu_237_p2 = (add_ln209_3_fu_231_p2 + add_ln209_1_fu_219_p2);

assign n2_V_fu_177_p2 = (sv33_V_fu_157_p4 + sv39_V_fu_167_p4);

assign out_ports_V = in_ports_V_buf_0_reg_89;

assign sv13_V_fu_137_p4 = {{in_ports_V_buf_0_reg_89[11:8]}};

assign sv26_V_fu_147_p4 = {{in_ports_V_buf_0_reg_89[19:16]}};

assign sv2_V_fu_127_p4 = {{in_ports_V_buf_0_reg_89[7:4]}};

assign sv33_V_fu_157_p4 = {{in_ports_V_buf_0_reg_89[23:20]}};

assign sv39_V_fu_167_p4 = {{in_ports_V_buf_0_reg_89[31:28]}};

assign tmp_2_fu_195_p4 = {{in_ports_V_buf_0_reg_89[30:28]}};

assign zext_ln209_fu_243_p1 = n20_V_fu_237_p2;

endmodule //ellipf_seq
