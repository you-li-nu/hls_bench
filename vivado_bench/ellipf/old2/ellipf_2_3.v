// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ellipf,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.640000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=22,HLS_SYN_LUT=138,HLS_VERSION=2020_1}" *)

module ellipf (
        ap_clk,
        ap_rst,
        in_ports_V,
        out_ports_V,
        out_ports_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [31:0] in_ports_V;
output  [31:0] out_ports_V;
output   out_ports_V_ap_vld;

reg out_ports_V_ap_vld;

wire   [3:0] grp_fu_73_p2;
reg   [3:0] reg_93;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [3:0] grp_fu_74_p2;
reg   [3:0] reg_97;
wire   [3:0] inp_V_fu_118_p1;
reg   [3:0] inp_V_reg_212;
reg   [3:0] sv2_V_reg_217;
reg   [2:0] tmp_1_reg_222;
wire    ap_CS_fsm_state3;
reg   [3:0] grp_fu_73_p0;
reg   [3:0] grp_fu_73_p1;
reg   [3:0] grp_fu_74_p0;
wire   [3:0] factor1_fu_199_p3;
reg   [3:0] grp_fu_74_p1;
wire   [3:0] factor_fu_192_p2;
wire   [3:0] empty_fu_186_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        inp_V_reg_212 <= inp_V_fu_118_p1;
        sv2_V_reg_217 <= {{in_ports_V[7:4]}};
        tmp_1_reg_222 <= {{in_ports_V[30:28]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        reg_93 <= grp_fu_73_p2;
        reg_97 <= grp_fu_74_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_73_p0 = reg_97;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_73_p0 = {{in_ports_V[23:20]}};
    end else begin
        grp_fu_73_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_73_p1 = sv2_V_reg_217;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_73_p1 = inp_V_reg_212;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_73_p1 = {{in_ports_V[31:28]}};
    end else begin
        grp_fu_73_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_74_p0 = grp_fu_73_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_74_p0 = factor1_fu_199_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_74_p0 = {{in_ports_V[19:16]}};
    end else begin
        grp_fu_74_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_74_p1 = reg_93;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_74_p1 = factor_fu_192_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_74_p1 = {{in_ports_V[11:8]}};
    end else begin
        grp_fu_74_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_ports_V_ap_vld = 1'b1;
    end else begin
        out_ports_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign empty_fu_186_p2 = reg_93 << 4'd2;

assign factor1_fu_199_p3 = {{tmp_1_reg_222}, {1'd0}};

assign factor_fu_192_p2 = (empty_fu_186_p2 - reg_93);

assign grp_fu_73_p2 = (grp_fu_73_p0 + grp_fu_73_p1);

assign grp_fu_74_p2 = (grp_fu_74_p0 + grp_fu_74_p1);

assign inp_V_fu_118_p1 = in_ports_V[3:0];

assign out_ports_V = grp_fu_74_p2;

endmodule //ellipf
