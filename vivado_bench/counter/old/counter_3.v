// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="counter,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=146,HLS_VERSION=2020_1}" *)

module counter (
        ap_clk,
        ap_rst,
        seed_V,
        out_V,
        out_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [5:0] seed_V;
output  [3:0] out_V;
output   out_V_ap_vld;

reg out_V_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] limit_V_2_fu_170_p3;
reg   [3:0] limit_V_2_reg_265;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln883_fu_112_p2;
wire   [3:0] select_ln879_1_fu_198_p3;
reg   [3:0] select_ln879_1_reg_270;
wire   [5:0] r_V_1_fu_230_p1;
reg   [5:0] r_V_1_reg_275;
reg   [5:0] seed_V_buf_0_reg_77;
wire    ap_CS_fsm_state4;
reg   [3:0] limit_V_1_reg_86;
reg   [3:0] p_097_0_reg_97;
reg   [3:0] limit_V_fu_56;
wire   [3:0] data_V_fu_206_p1;
reg   [1:0] ctrl_V_1_fu_60;
wire   [0:0] icmp_ln883_1_fu_136_p2;
wire   [3:0] count_V_fu_142_p2;
wire   [3:0] count_V_1_fu_156_p2;
wire   [0:0] icmp_ln879_fu_124_p2;
wire   [0:0] icmp_ln879_1_fu_130_p2;
wire   [0:0] xor_ln879_fu_178_p2;
wire   [0:0] and_ln879_fu_184_p2;
wire   [3:0] select_ln24_fu_148_p3;
wire   [3:0] select_ln28_fu_162_p3;
wire   [3:0] select_ln879_fu_190_p3;
wire   [2:0] r_V_fu_220_p4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        limit_V_1_reg_86 <= limit_V_2_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        limit_V_1_reg_86 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_097_0_reg_97 <= select_ln879_1_reg_270;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_097_0_reg_97 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        seed_V_buf_0_reg_77 <= r_V_1_reg_275;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        seed_V_buf_0_reg_77 <= seed_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_fu_112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_V_1_fu_60 <= {{seed_V_buf_0_reg_77[2:1]}};
        limit_V_2_reg_265 <= limit_V_2_fu_170_p3;
        limit_V_fu_56 <= data_V_fu_206_p1;
        r_V_1_reg_275[2 : 0] <= r_V_1_fu_230_p1[2 : 0];
        select_ln879_1_reg_270 <= select_ln879_1_fu_198_p3;
    end
end

always @ (*) begin
    if (((icmp_ln883_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_V_ap_vld = 1'b1;
    end else begin
        out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln883_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln879_fu_184_p2 = (xor_ln879_fu_178_p2 & icmp_ln879_1_fu_130_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign count_V_1_fu_156_p2 = ($signed(4'd15) + $signed(p_097_0_reg_97));

assign count_V_fu_142_p2 = (4'd1 + p_097_0_reg_97);

assign data_V_fu_206_p1 = seed_V_buf_0_reg_77[3:0];

assign icmp_ln879_1_fu_130_p2 = ((ctrl_V_1_fu_60 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_124_p2 = ((ctrl_V_1_fu_60 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln883_1_fu_136_p2 = ((p_097_0_reg_97 == limit_V_1_reg_86) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_112_p2 = ((ctrl_V_1_fu_60 == 2'd0) ? 1'b1 : 1'b0);

assign limit_V_2_fu_170_p3 = ((icmp_ln879_fu_124_p2[0:0] === 1'b1) ? limit_V_fu_56 : limit_V_1_reg_86);

assign out_V = p_097_0_reg_97;

assign r_V_1_fu_230_p1 = r_V_fu_220_p4;

assign r_V_fu_220_p4 = {{seed_V_buf_0_reg_77[5:3]}};

assign select_ln24_fu_148_p3 = ((icmp_ln883_1_fu_136_p2[0:0] === 1'b1) ? p_097_0_reg_97 : count_V_fu_142_p2);

assign select_ln28_fu_162_p3 = ((icmp_ln883_1_fu_136_p2[0:0] === 1'b1) ? p_097_0_reg_97 : count_V_1_fu_156_p2);

assign select_ln879_1_fu_198_p3 = ((icmp_ln879_fu_124_p2[0:0] === 1'b1) ? p_097_0_reg_97 : select_ln879_fu_190_p3);

assign select_ln879_fu_190_p3 = ((and_ln879_fu_184_p2[0:0] === 1'b1) ? select_ln24_fu_148_p3 : select_ln28_fu_162_p3);

assign xor_ln879_fu_178_p2 = (icmp_ln879_fu_124_p2 ^ 1'd1);

always @ (posedge ap_clk) begin
    r_V_1_reg_275[5:3] <= 3'b000;
end

endmodule //counter
