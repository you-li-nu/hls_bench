// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="counter,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.600000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=342,HLS_VERSION=2020_1}" *)

module counter (
        ap_clk,
        ap_rst,
        seed_V,
        out_V,
        out_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [5:0] seed_V;
output  [3:0] out_V;
output   out_V_ap_vld;

reg out_V_ap_vld;

reg   [3:0] data_V_0_0_reg_75;
reg   [5:0] ctrl_V_0_0_in_in_reg_84;
reg   [3:0] data_V_1_reg_93;
reg   [3:0] p_053_0_0_reg_104;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] data_V_fu_127_p1;
wire   [0:0] icmp_ln883_fu_141_p2;
reg   [0:0] icmp_ln883_reg_365;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln879_1_fu_231_p3;
reg   [3:0] select_ln879_1_reg_369;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] add_ln214_fu_255_p2;
wire   [0:0] icmp_ln883_2_fu_261_p2;
reg   [0:0] icmp_ln883_2_reg_379;
wire   [3:0] select_ln879_2_fu_313_p3;
wire   [3:0] select_ln879_4_fu_341_p3;
reg   [3:0] select_ln879_4_reg_388;
wire   [3:0] add_ln1503_1_fu_349_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran4to5_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [3:0] ap_phi_mux_p_053_0_0_phi_fu_108_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] p_053_0_lcssa_reg_116;
wire    ap_CS_fsm_state5;
wire   [1:0] ctrl_V_fu_131_p4;
wire   [0:0] icmp_ln883_1_fu_169_p2;
wire   [3:0] add_ln700_fu_175_p2;
wire   [3:0] add_ln701_fu_189_p2;
wire   [0:0] icmp_ln879_fu_157_p2;
wire   [0:0] icmp_ln879_1_fu_163_p2;
wire   [0:0] xor_ln879_fu_211_p2;
wire   [0:0] and_ln879_fu_217_p2;
wire   [3:0] select_ln32_fu_181_p3;
wire   [3:0] select_ln36_fu_195_p3;
wire   [3:0] select_ln879_fu_223_p3;
wire   [3:0] trunc_ln320_fu_147_p1;
wire   [5:0] add_ln320_fu_151_p2;
wire   [1:0] ssdm_int_V_write_ass_fu_245_p4;
wire   [3:0] data_V_2_fu_203_p3;
wire   [0:0] icmp_ln883_3_fu_279_p2;
wire   [3:0] add_ln700_1_fu_285_p2;
wire   [3:0] add_ln701_1_fu_299_p2;
wire   [0:0] icmp_ln879_2_fu_267_p2;
wire   [3:0] add_ln1503_fu_239_p2;
wire   [0:0] icmp_ln879_3_fu_273_p2;
wire   [0:0] xor_ln879_1_fu_321_p2;
wire   [0:0] and_ln879_1_fu_327_p2;
wire   [3:0] select_ln32_1_fu_291_p3;
wire   [3:0] select_ln36_1_fu_305_p3;
wire   [3:0] select_ln879_3_fu_333_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_286;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_predicate_tran4to5_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_2_fu_261_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ctrl_V_0_0_in_in_reg_84 <= add_ln214_fu_255_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctrl_V_0_0_in_in_reg_84 <= seed_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_2_fu_261_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_0_0_reg_75 <= add_ln1503_1_fu_349_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_V_0_0_reg_75 <= data_V_fu_127_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_2_fu_261_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_1_reg_93 <= select_ln879_2_fu_313_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        data_V_1_reg_93 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_2_reg_379 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_reg_365 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_053_0_0_reg_104 <= select_ln879_4_reg_388;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_053_0_0_reg_104 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_286)) begin
            p_053_0_lcssa_reg_116 <= select_ln879_1_reg_369;
        end else if (((icmp_ln883_fu_141_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_053_0_lcssa_reg_116 <= ap_phi_mux_p_053_0_0_phi_fu_108_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln883_2_reg_379 <= icmp_ln883_2_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln883_reg_365 <= icmp_ln883_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln879_1_reg_369 <= select_ln879_1_fu_231_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln883_2_fu_261_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln883_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln879_4_reg_388 <= select_ln879_4_fu_341_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln883_2_reg_379 == 1'd0) & (icmp_ln883_reg_365 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_p_053_0_0_phi_fu_108_p4 = select_ln879_4_reg_388;
    end else begin
        ap_phi_mux_p_053_0_0_phi_fu_108_p4 = p_053_0_0_reg_104;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_V_ap_vld = 1'b1;
    end else begin
        out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1503_1_fu_349_p2 = (trunc_ln320_fu_147_p1 + 4'd2);

assign add_ln1503_fu_239_p2 = (4'd1 + trunc_ln320_fu_147_p1);

assign add_ln214_fu_255_p2 = (6'd2 + ctrl_V_0_0_in_in_reg_84);

assign add_ln320_fu_151_p2 = (6'd1 + ctrl_V_0_0_in_in_reg_84);

assign add_ln700_1_fu_285_p2 = (select_ln879_1_fu_231_p3 + 4'd1);

assign add_ln700_fu_175_p2 = (4'd1 + ap_phi_mux_p_053_0_0_phi_fu_108_p4);

assign add_ln701_1_fu_299_p2 = ($signed(select_ln879_1_fu_231_p3) + $signed(4'd15));

assign add_ln701_fu_189_p2 = ($signed(4'd15) + $signed(ap_phi_mux_p_053_0_0_phi_fu_108_p4));

assign and_ln879_1_fu_327_p2 = (xor_ln879_1_fu_321_p2 & icmp_ln879_3_fu_273_p2);

assign and_ln879_fu_217_p2 = (xor_ln879_fu_211_p2 & icmp_ln879_1_fu_163_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_286 = ((icmp_ln883_2_reg_379 == 1'd1) & (icmp_ln883_reg_365 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran4to5_state2 = ((icmp_ln883_2_fu_261_p2 == 1'd1) | (icmp_ln883_fu_141_p2 == 1'd1));
end

assign ctrl_V_fu_131_p4 = {{ctrl_V_0_0_in_in_reg_84[5:4]}};

assign data_V_2_fu_203_p3 = ((icmp_ln879_fu_157_p2[0:0] === 1'b1) ? data_V_0_0_reg_75 : data_V_1_reg_93);

assign data_V_fu_127_p1 = seed_V[3:0];

assign icmp_ln879_1_fu_163_p2 = ((ctrl_V_fu_131_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_267_p2 = ((ssdm_int_V_write_ass_fu_245_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_273_p2 = ((ssdm_int_V_write_ass_fu_245_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_157_p2 = ((ctrl_V_fu_131_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln883_1_fu_169_p2 = ((ap_phi_mux_p_053_0_0_phi_fu_108_p4 == data_V_1_reg_93) ? 1'b1 : 1'b0);

assign icmp_ln883_2_fu_261_p2 = ((ssdm_int_V_write_ass_fu_245_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln883_3_fu_279_p2 = ((select_ln879_1_fu_231_p3 == data_V_2_fu_203_p3) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_141_p2 = ((ctrl_V_fu_131_p4 == 2'd0) ? 1'b1 : 1'b0);

assign out_V = p_053_0_lcssa_reg_116;

assign select_ln32_1_fu_291_p3 = ((icmp_ln883_3_fu_279_p2[0:0] === 1'b1) ? select_ln879_1_fu_231_p3 : add_ln700_1_fu_285_p2);

assign select_ln32_fu_181_p3 = ((icmp_ln883_1_fu_169_p2[0:0] === 1'b1) ? ap_phi_mux_p_053_0_0_phi_fu_108_p4 : add_ln700_fu_175_p2);

assign select_ln36_1_fu_305_p3 = ((icmp_ln883_3_fu_279_p2[0:0] === 1'b1) ? select_ln879_1_fu_231_p3 : add_ln701_1_fu_299_p2);

assign select_ln36_fu_195_p3 = ((icmp_ln883_1_fu_169_p2[0:0] === 1'b1) ? ap_phi_mux_p_053_0_0_phi_fu_108_p4 : add_ln701_fu_189_p2);

assign select_ln879_1_fu_231_p3 = ((icmp_ln879_fu_157_p2[0:0] === 1'b1) ? ap_phi_mux_p_053_0_0_phi_fu_108_p4 : select_ln879_fu_223_p3);

assign select_ln879_2_fu_313_p3 = ((icmp_ln879_2_fu_267_p2[0:0] === 1'b1) ? add_ln1503_fu_239_p2 : data_V_2_fu_203_p3);

assign select_ln879_3_fu_333_p3 = ((and_ln879_1_fu_327_p2[0:0] === 1'b1) ? select_ln32_1_fu_291_p3 : select_ln36_1_fu_305_p3);

assign select_ln879_4_fu_341_p3 = ((icmp_ln879_2_fu_267_p2[0:0] === 1'b1) ? select_ln879_1_fu_231_p3 : select_ln879_3_fu_333_p3);

assign select_ln879_fu_223_p3 = ((and_ln879_fu_217_p2[0:0] === 1'b1) ? select_ln32_fu_181_p3 : select_ln36_fu_195_p3);

assign ssdm_int_V_write_ass_fu_245_p4 = {{add_ln320_fu_151_p2[5:4]}};

assign trunc_ln320_fu_147_p1 = ctrl_V_0_0_in_in_reg_84[3:0];

assign xor_ln879_1_fu_321_p2 = (icmp_ln879_2_fu_267_p2 ^ 1'd1);

assign xor_ln879_fu_211_p2 = (icmp_ln879_fu_157_p2 ^ 1'd1);

endmodule //counter
