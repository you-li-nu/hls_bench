// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ellipf_seq,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.405000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=107,HLS_SYN_LUT=339,HLS_VERSION=2020_1}" *)

module ellipf_seq (
        ap_clk,
        ap_rst,
        in_ports_V,
        out_ports_V,
        out_ports_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [31:0] in_ports_V;
output  [31:0] out_ports_V;
output   out_ports_V_ap_vld;

reg out_ports_V_ap_vld;

reg   [31:0] in_ports_V_buf_0_reg_97;
reg   [2:0] p_0305_0_reg_108;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln887_fu_119_p2;
reg   [0:0] icmp_ln887_reg_376;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] i_V_fu_125_p2;
reg   [2:0] i_V_reg_380;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] inp_V_fu_131_p1;
reg   [3:0] inp_V_reg_385;
wire   [3:0] sv39_V_fu_175_p4;
reg   [3:0] sv39_V_reg_390;
wire   [3:0] n1_V_fu_185_p2;
reg   [3:0] n1_V_reg_396;
wire   [3:0] n2_V_fu_191_p2;
reg   [3:0] n2_V_reg_402;
wire   [3:0] n3_V_fu_197_p2;
reg   [3:0] n3_V_reg_408;
wire   [3:0] n5_V_fu_209_p2;
reg   [3:0] n5_V_reg_414;
reg   [2:0] tmp_1_reg_421;
reg   [2:0] tmp_2_reg_426;
wire   [31:0] ret_V_fu_351_p9;
reg   [31:0] ret_V_reg_431;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [31:0] ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_p_0305_0_phi_fu_112_p4;
wire    ap_CS_fsm_state5;
wire   [3:0] sv2_V_fu_135_p4;
wire   [3:0] sv33_V_fu_165_p4;
wire   [3:0] sv13_V_fu_145_p4;
wire   [3:0] sv26_V_fu_155_p4;
wire   [3:0] add_ln209_fu_203_p2;
wire    ap_block_pp0_stage1;
wire   [3:0] n8_V_fu_235_p2;
wire   [3:0] add_ln209_4_fu_243_p2;
wire   [3:0] n9_V_fu_239_p2;
wire   [3:0] add_ln209_6_fu_253_p2;
wire   [3:0] n15_V_fu_248_p2;
wire   [3:0] n16_V_fu_258_p2;
wire   [3:0] factor_fu_279_p3;
wire   [3:0] add_ln209_11_fu_286_p2;
wire   [3:0] factor1_fu_298_p3;
wire   [3:0] n19_V_fu_268_p2;
wire   [3:0] n17_V_fu_263_p2;
wire   [3:0] add_ln209_14_fu_311_p2;
wire   [3:0] n28_V_fu_292_p2;
wire   [3:0] add_ln209_17_fu_328_p2;
wire   [3:0] n29_V_fu_305_p2;
wire   [3:0] n20_V_fu_274_p2;
wire   [3:0] sv39_o_V_fu_345_p2;
wire   [3:0] sv33_o_V_fu_339_p2;
wire   [3:0] sv26_o_V_fu_333_p2;
wire   [3:0] sv13_o_V_fu_322_p2;
wire   [3:0] sv2_o_V_fu_316_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_ports_V_buf_0_reg_97 <= ret_V_reg_431;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_ports_V_buf_0_reg_97 <= in_ports_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_reg_376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0305_0_reg_108 <= i_V_reg_380;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0305_0_reg_108 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_V_reg_380 <= i_V_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln887_reg_376 <= icmp_ln887_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln887_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inp_V_reg_385 <= inp_V_fu_131_p1;
        n1_V_reg_396 <= n1_V_fu_185_p2;
        n2_V_reg_402 <= n2_V_fu_191_p2;
        n3_V_reg_408 <= n3_V_fu_197_p2;
        n5_V_reg_414 <= n5_V_fu_209_p2;
        sv39_V_reg_390 <= {{ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[31:28]}};
        tmp_1_reg_421 <= {{ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[14:12]}};
        tmp_2_reg_426 <= {{ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[26:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln887_reg_376 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ret_V_reg_431 <= ret_V_fu_351_p9;
    end
end

always @ (*) begin
    if ((icmp_ln887_fu_119_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4 = ret_V_reg_431;
    end else begin
        ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4 = in_ports_V_buf_0_reg_97;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p_0305_0_phi_fu_112_p4 = i_V_reg_380;
    end else begin
        ap_phi_mux_p_0305_0_phi_fu_112_p4 = p_0305_0_reg_108;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_ports_V_ap_vld = 1'b1;
    end else begin
        out_ports_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln887_fu_119_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln887_fu_119_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln209_11_fu_286_p2 = (n15_V_fu_248_p2 + factor_fu_279_p3);

assign add_ln209_14_fu_311_p2 = (n17_V_fu_263_p2 + inp_V_reg_385);

assign add_ln209_17_fu_328_p2 = (n9_V_fu_239_p2 + n5_V_reg_414);

assign add_ln209_4_fu_243_p2 = (n8_V_fu_235_p2 + n1_V_reg_396);

assign add_ln209_6_fu_253_p2 = (n9_V_fu_239_p2 + sv39_V_reg_390);

assign add_ln209_fu_203_p2 = (n3_V_fu_197_p2 + sv26_V_fu_155_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign factor1_fu_298_p3 = {{tmp_2_reg_426}, {1'd0}};

assign factor_fu_279_p3 = {{tmp_1_reg_421}, {1'd0}};

assign i_V_fu_125_p2 = (ap_phi_mux_p_0305_0_phi_fu_112_p4 + 3'd1);

assign icmp_ln887_fu_119_p2 = ((ap_phi_mux_p_0305_0_phi_fu_112_p4 == 3'd4) ? 1'b1 : 1'b0);

assign inp_V_fu_131_p1 = ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[3:0];

assign n15_V_fu_248_p2 = (n3_V_reg_408 + add_ln209_4_fu_243_p2);

assign n16_V_fu_258_p2 = (n2_V_reg_402 + add_ln209_6_fu_253_p2);

assign n17_V_fu_263_p2 = (n1_V_reg_396 + n15_V_fu_248_p2);

assign n19_V_fu_268_p2 = (n9_V_fu_239_p2 + n16_V_fu_258_p2);

assign n1_V_fu_185_p2 = (inp_V_fu_131_p1 + sv2_V_fu_135_p4);

assign n20_V_fu_274_p2 = (sv39_V_reg_390 + n16_V_fu_258_p2);

assign n28_V_fu_292_p2 = (n8_V_fu_235_p2 + add_ln209_11_fu_286_p2);

assign n29_V_fu_305_p2 = (factor1_fu_298_p3 + n19_V_fu_268_p2);

assign n2_V_fu_191_p2 = (sv33_V_fu_165_p4 + sv39_V_fu_175_p4);

assign n3_V_fu_197_p2 = (sv13_V_fu_145_p4 + n1_V_fu_185_p2);

assign n5_V_fu_209_p2 = (n2_V_fu_191_p2 + add_ln209_fu_203_p2);

assign n8_V_fu_235_p2 = (n3_V_reg_408 + n5_V_reg_414);

assign n9_V_fu_239_p2 = (n2_V_reg_402 + n5_V_reg_414);

assign out_ports_V = in_ports_V_buf_0_reg_97;

assign ret_V_fu_351_p9 = {{{{{{{{sv39_o_V_fu_345_p2}, {n29_V_fu_305_p2}}, {sv33_o_V_fu_339_p2}}, {sv26_o_V_fu_333_p2}}, {n28_V_fu_292_p2}}, {sv13_o_V_fu_322_p2}}, {sv2_o_V_fu_316_p2}}, {n20_V_fu_274_p2}};

assign sv13_V_fu_145_p4 = {{ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[11:8]}};

assign sv13_o_V_fu_322_p2 = (n17_V_fu_263_p2 + n28_V_fu_292_p2);

assign sv26_V_fu_155_p4 = {{ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[19:16]}};

assign sv26_o_V_fu_333_p2 = (n8_V_fu_235_p2 + add_ln209_17_fu_328_p2);

assign sv2_V_fu_135_p4 = {{ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[7:4]}};

assign sv2_o_V_fu_316_p2 = (n15_V_fu_248_p2 + add_ln209_14_fu_311_p2);

assign sv33_V_fu_165_p4 = {{ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[23:20]}};

assign sv33_o_V_fu_339_p2 = (n19_V_fu_268_p2 + n29_V_fu_305_p2);

assign sv39_V_fu_175_p4 = {{ap_phi_mux_in_ports_V_buf_0_phi_fu_101_p4[31:28]}};

assign sv39_o_V_fu_345_p2 = (n16_V_fu_258_p2 + n20_V_fu_274_p2);

endmodule //ellipf_seq
