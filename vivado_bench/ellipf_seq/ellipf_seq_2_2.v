// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ellipf_seq,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.280000,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=61,HLS_SYN_LUT=213,HLS_VERSION=2020_1}" *)

module ellipf_seq (
        ap_clk,
        ap_rst,
        in_ports_V,
        out_ports_V,
        out_ports_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [31:0] in_ports_V;
output  [31:0] out_ports_V;
output   out_ports_V_ap_vld;

reg out_ports_V_ap_vld;

wire   [4:0] grp_fu_115_p2;
reg   [4:0] i_V_reg_174;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [3:0] grp_fu_117_p2;
reg   [3:0] n2_V_reg_179;
wire   [0:0] icmp_ln887_fu_213_p2;
wire   [3:0] grp_fu_116_p2;
reg   [3:0] add_ln209_1_reg_183;
wire    ap_CS_fsm_state1;
reg   [3:0] sv2_V_reg_321;
reg   [2:0] tmp_2_reg_326;
wire   [31:0] zext_ln209_fu_309_p1;
wire    ap_CS_fsm_state3;
reg   [31:0] in_ports_V_buf_0_reg_93;
reg   [4:0] p_0305_0_reg_104;
wire    ap_CS_fsm_state4;
reg   [4:0] grp_fu_115_p0;
reg   [4:0] grp_fu_115_p1;
reg   [3:0] grp_fu_116_p0;
wire   [3:0] add_ln209_fu_118_p2;
wire   [3:0] factor1_fu_301_p3;
reg   [3:0] grp_fu_116_p1;
wire   [3:0] inp_V_fu_219_p1;
wire   [3:0] factor_fu_294_p2;
reg   [3:0] grp_fu_117_p0;
reg   [3:0] grp_fu_117_p1;
wire   [3:0] sv26_V_fu_245_p4;
wire   [3:0] sv13_V_fu_234_p4;
wire   [3:0] empty_4_fu_288_p2;
wire   [3:0] zext_ln209_fu_309_p0;
reg   [3:0] ap_NS_fsm;
wire   [4:0] zext_ln209_fu_309_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_ports_V_buf_0_reg_93 <= zext_ln209_fu_309_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_ports_V_buf_0_reg_93 <= in_ports_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_0305_0_reg_104 <= i_V_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0305_0_reg_104 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln209_1_reg_183 <= grp_fu_116_p2;
        n2_V_reg_179 <= grp_fu_117_p2;
        sv2_V_reg_321 <= {{in_ports_V_buf_0_reg_93[7:4]}};
        tmp_2_reg_326 <= {{in_ports_V_buf_0_reg_93[30:28]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_174 <= grp_fu_115_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_115_p0 = grp_fu_117_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_115_p0 = p_0305_0_reg_104;
    end else begin
        grp_fu_115_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_115_p1 = add_ln209_1_reg_183;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_115_p1 = 5'd1;
    end else begin
        grp_fu_115_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_116_p0 = factor1_fu_301_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_116_p0 = add_ln209_fu_118_p2;
    end else begin
        grp_fu_116_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_116_p1 = factor_fu_294_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_116_p1 = inp_V_fu_219_p1;
    end else begin
        grp_fu_116_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_117_p0 = grp_fu_116_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_117_p0 = {{in_ports_V_buf_0_reg_93[23:20]}};
    end else begin
        grp_fu_117_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_117_p1 = sv2_V_reg_321;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_117_p1 = {{in_ports_V_buf_0_reg_93[31:28]}};
    end else begin
        grp_fu_117_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_ports_V_ap_vld = 1'b1;
    end else begin
        out_ports_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln209_fu_118_p2 = (sv26_V_fu_245_p4 + sv13_V_fu_234_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign empty_4_fu_288_p2 = n2_V_reg_179 << 4'd2;

assign factor1_fu_301_p3 = {{tmp_2_reg_326}, {1'd0}};

assign factor_fu_294_p2 = (empty_4_fu_288_p2 - n2_V_reg_179);

assign grp_fu_115_p2 = (grp_fu_115_p0 + grp_fu_115_p1);

assign grp_fu_116_p2 = (grp_fu_116_p0 + grp_fu_116_p1);

assign grp_fu_117_p2 = (grp_fu_117_p0 + grp_fu_117_p1);

assign icmp_ln887_fu_213_p2 = ((p_0305_0_reg_104 == 5'd20) ? 1'b1 : 1'b0);

assign inp_V_fu_219_p1 = in_ports_V_buf_0_reg_93[3:0];

assign out_ports_V = in_ports_V_buf_0_reg_93;

assign sv13_V_fu_234_p4 = {{in_ports_V_buf_0_reg_93[11:8]}};

assign sv26_V_fu_245_p4 = {{in_ports_V_buf_0_reg_93[19:16]}};

assign zext_ln209_fu_309_p0 = zext_ln209_fu_309_p00;

assign zext_ln209_fu_309_p00 = (grp_fu_115_p0 + grp_fu_115_p1);

assign zext_ln209_fu_309_p1 = zext_ln209_fu_309_p0;

endmodule //ellipf_seq
